<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1606" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1589.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1589.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.10%)</title><rect x="0.0473%" y="1509" width="0.1013%" height="15" fill="rgb(227,0,7)"/><text x="0.2973%" y="1519.50"></text></g><g><title>h2s_client::main::_{{closure}} (45 samples, 0.10%)</title><rect x="0.0473%" y="1493" width="0.1013%" height="15" fill="rgb(217,0,24)"/><text x="0.2973%" y="1503.50"></text></g><g><title>[unknown] (55 samples, 0.12%)</title><rect x="0.0473%" y="1525" width="0.1239%" height="15" fill="rgb(221,193,54)"/><text x="0.2973%" y="1535.50"></text></g><g><title>ret_from_fork (63 samples, 0.14%)</title><rect x="0.1712%" y="1509" width="0.1419%" height="15" fill="rgb(248,212,6)"/><text x="0.4212%" y="1519.50"></text></g><g><title>schedule_tail (62 samples, 0.14%)</title><rect x="0.1734%" y="1493" width="0.1396%" height="15" fill="rgb(208,68,35)"/><text x="0.4234%" y="1503.50"></text></g><g><title>finish_task_switch (62 samples, 0.14%)</title><rect x="0.1734%" y="1477" width="0.1396%" height="15" fill="rgb(232,128,0)"/><text x="0.4234%" y="1487.50"></text></g><g><title>__perf_event_task_sched_in (60 samples, 0.14%)</title><rect x="0.1779%" y="1461" width="0.1351%" height="15" fill="rgb(207,160,47)"/><text x="0.4279%" y="1471.50"></text></g><g><title>perf_pmu_enable.part.111 (60 samples, 0.14%)</title><rect x="0.1779%" y="1445" width="0.1351%" height="15" fill="rgb(228,23,34)"/><text x="0.4279%" y="1455.50"></text></g><g><title>x86_pmu_enable (59 samples, 0.13%)</title><rect x="0.1802%" y="1429" width="0.1329%" height="15" fill="rgb(218,30,26)"/><text x="0.4302%" y="1439.50"></text></g><g><title>intel_pmu_enable_all (56 samples, 0.13%)</title><rect x="0.1869%" y="1413" width="0.1261%" height="15" fill="rgb(220,122,19)"/><text x="0.4369%" y="1423.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (56 samples, 0.13%)</title><rect x="0.1869%" y="1397" width="0.1261%" height="15" fill="rgb(250,228,42)"/><text x="0.4369%" y="1407.50"></text></g><g><title>native_write_msr (56 samples, 0.13%)</title><rect x="0.1869%" y="1381" width="0.1261%" height="15" fill="rgb(240,193,28)"/><text x="0.4369%" y="1391.50"></text></g><g><title>__GI___clone (74 samples, 0.17%)</title><rect x="0.1712%" y="1525" width="0.1667%" height="15" fill="rgb(216,20,37)"/><text x="0.4212%" y="1535.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (107 samples, 0.24%)</title><rect x="0.3829%" y="821" width="0.2410%" height="15" fill="rgb(206,188,39)"/><text x="0.6329%" y="831.50"></text></g><g><title>native_write_msr (107 samples, 0.24%)</title><rect x="0.3829%" y="805" width="0.2410%" height="15" fill="rgb(217,207,13)"/><text x="0.6329%" y="815.50"></text></g><g><title>__perf_event_task_sched_in (115 samples, 0.26%)</title><rect x="0.3671%" y="885" width="0.2590%" height="15" fill="rgb(231,73,38)"/><text x="0.6171%" y="895.50"></text></g><g><title>perf_pmu_enable.part.111 (109 samples, 0.25%)</title><rect x="0.3806%" y="869" width="0.2455%" height="15" fill="rgb(225,20,46)"/><text x="0.6306%" y="879.50"></text></g><g><title>x86_pmu_enable (109 samples, 0.25%)</title><rect x="0.3806%" y="853" width="0.2455%" height="15" fill="rgb(210,31,41)"/><text x="0.6306%" y="863.50"></text></g><g><title>intel_pmu_enable_all (108 samples, 0.24%)</title><rect x="0.3829%" y="837" width="0.2432%" height="15" fill="rgb(221,200,47)"/><text x="0.6329%" y="847.50"></text></g><g><title>finish_task_switch (122 samples, 0.27%)</title><rect x="0.3558%" y="901" width="0.2748%" height="15" fill="rgb(226,26,5)"/><text x="0.6058%" y="911.50"></text></g><g><title>futex_wait_queue_me (128 samples, 0.29%)</title><rect x="0.3446%" y="949" width="0.2883%" height="15" fill="rgb(249,33,26)"/><text x="0.5946%" y="959.50"></text></g><g><title>schedule (126 samples, 0.28%)</title><rect x="0.3491%" y="933" width="0.2838%" height="15" fill="rgb(235,183,28)"/><text x="0.5991%" y="943.50"></text></g><g><title>__schedule (126 samples, 0.28%)</title><rect x="0.3491%" y="917" width="0.2838%" height="15" fill="rgb(221,5,38)"/><text x="0.5991%" y="927.50"></text></g><g><title>__x64_sys_futex (131 samples, 0.30%)</title><rect x="0.3446%" y="997" width="0.2950%" height="15" fill="rgb(247,18,42)"/><text x="0.5946%" y="1007.50"></text></g><g><title>do_futex (131 samples, 0.30%)</title><rect x="0.3446%" y="981" width="0.2950%" height="15" fill="rgb(241,131,45)"/><text x="0.5946%" y="991.50"></text></g><g><title>futex_wait (131 samples, 0.30%)</title><rect x="0.3446%" y="965" width="0.2950%" height="15" fill="rgb(249,31,29)"/><text x="0.5946%" y="975.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (135 samples, 0.30%)</title><rect x="0.3378%" y="1269" width="0.3040%" height="15" fill="rgb(225,111,53)"/><text x="0.5878%" y="1279.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current (135 samples, 0.30%)</title><rect x="0.3378%" y="1253" width="0.3040%" height="15" fill="rgb(238,160,17)"/><text x="0.5878%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (135 samples, 0.30%)</title><rect x="0.3378%" y="1237" width="0.3040%" height="15" fill="rgb(214,148,48)"/><text x="0.5878%" y="1247.50"></text></g><g><title>tokio::park::thread::CachedParkThread::with_current::_{{closure}} (135 samples, 0.30%)</title><rect x="0.3378%" y="1221" width="0.3040%" height="15" fill="rgb(232,36,49)"/><text x="0.5878%" y="1231.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::_{{closure}} (135 samples, 0.30%)</title><rect x="0.3378%" y="1205" width="0.3040%" height="15" fill="rgb(209,103,24)"/><text x="0.5878%" y="1215.50"></text></g><g><title>tokio::park::thread::Inner::park (135 samples, 0.30%)</title><rect x="0.3378%" y="1189" width="0.3040%" height="15" fill="rgb(229,88,8)"/><text x="0.5878%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (135 samples, 0.30%)</title><rect x="0.3378%" y="1173" width="0.3040%" height="15" fill="rgb(213,181,19)"/><text x="0.5878%" y="1183.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (135 samples, 0.30%)</title><rect x="0.3378%" y="1157" width="0.3040%" height="15" fill="rgb(254,191,54)"/><text x="0.5878%" y="1167.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (135 samples, 0.30%)</title><rect x="0.3378%" y="1141" width="0.3040%" height="15" fill="rgb(241,83,37)"/><text x="0.5878%" y="1151.50"></text></g><g><title>parking_lot_core::parking_lot::park (134 samples, 0.30%)</title><rect x="0.3401%" y="1125" width="0.3018%" height="15" fill="rgb(233,36,39)"/><text x="0.5901%" y="1135.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (134 samples, 0.30%)</title><rect x="0.3401%" y="1109" width="0.3018%" height="15" fill="rgb(226,3,54)"/><text x="0.5901%" y="1119.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (134 samples, 0.30%)</title><rect x="0.3401%" y="1093" width="0.3018%" height="15" fill="rgb(245,192,40)"/><text x="0.5901%" y="1103.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (134 samples, 0.30%)</title><rect x="0.3401%" y="1077" width="0.3018%" height="15" fill="rgb(238,167,29)"/><text x="0.5901%" y="1087.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (133 samples, 0.30%)</title><rect x="0.3423%" y="1061" width="0.2995%" height="15" fill="rgb(232,182,51)"/><text x="0.5923%" y="1071.50"></text></g><g><title>syscall (133 samples, 0.30%)</title><rect x="0.3423%" y="1045" width="0.2995%" height="15" fill="rgb(231,60,39)"/><text x="0.5923%" y="1055.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (132 samples, 0.30%)</title><rect x="0.3446%" y="1029" width="0.2973%" height="15" fill="rgb(208,69,12)"/><text x="0.5946%" y="1039.50"></text></g><g><title>do_syscall_64 (132 samples, 0.30%)</title><rect x="0.3446%" y="1013" width="0.2973%" height="15" fill="rgb(235,93,37)"/><text x="0.5946%" y="1023.50"></text></g><g><title>__libc_start_main (136 samples, 0.31%)</title><rect x="0.3378%" y="1509" width="0.3063%" height="15" fill="rgb(213,116,39)"/><text x="0.5878%" y="1519.50"></text></g><g><title>main (136 samples, 0.31%)</title><rect x="0.3378%" y="1493" width="0.3063%" height="15" fill="rgb(222,207,29)"/><text x="0.5878%" y="1503.50"></text></g><g><title>std::rt::lang_start_internal (136 samples, 0.31%)</title><rect x="0.3378%" y="1477" width="0.3063%" height="15" fill="rgb(206,96,30)"/><text x="0.5878%" y="1487.50"></text></g><g><title>std::panic::catch_unwind (136 samples, 0.31%)</title><rect x="0.3378%" y="1461" width="0.3063%" height="15" fill="rgb(218,138,4)"/><text x="0.5878%" y="1471.50"></text></g><g><title>std::panicking::try (136 samples, 0.31%)</title><rect x="0.3378%" y="1445" width="0.3063%" height="15" fill="rgb(250,191,14)"/><text x="0.5878%" y="1455.50"></text></g><g><title>std::panicking::try::do_call (136 samples, 0.31%)</title><rect x="0.3378%" y="1429" width="0.3063%" height="15" fill="rgb(239,60,40)"/><text x="0.5878%" y="1439.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (136 samples, 0.31%)</title><rect x="0.3378%" y="1413" width="0.3063%" height="15" fill="rgb(206,27,48)"/><text x="0.5878%" y="1423.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (136 samples, 0.31%)</title><rect x="0.3378%" y="1397" width="0.3063%" height="15" fill="rgb(225,35,8)"/><text x="0.5878%" y="1407.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (136 samples, 0.31%)</title><rect x="0.3378%" y="1381" width="0.3063%" height="15" fill="rgb(250,213,24)"/><text x="0.5878%" y="1391.50"></text></g><g><title>core::ops::function::FnOnce::call_once (136 samples, 0.31%)</title><rect x="0.3378%" y="1365" width="0.3063%" height="15" fill="rgb(247,123,22)"/><text x="0.5878%" y="1375.50"></text></g><g><title>h2s_client::main (136 samples, 0.31%)</title><rect x="0.3378%" y="1349" width="0.3063%" height="15" fill="rgb(231,138,38)"/><text x="0.5878%" y="1359.50"></text></g><g><title>tokio::runtime::Runtime::block_on (136 samples, 0.31%)</title><rect x="0.3378%" y="1333" width="0.3063%" height="15" fill="rgb(231,145,46)"/><text x="0.5878%" y="1343.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (136 samples, 0.31%)</title><rect x="0.3378%" y="1317" width="0.3063%" height="15" fill="rgb(251,118,11)"/><text x="0.5878%" y="1327.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (136 samples, 0.31%)</title><rect x="0.3378%" y="1301" width="0.3063%" height="15" fill="rgb(217,147,25)"/><text x="0.5878%" y="1311.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (136 samples, 0.31%)</title><rect x="0.3378%" y="1285" width="0.3063%" height="15" fill="rgb(247,81,37)"/><text x="0.5878%" y="1295.50"></text></g><g><title>_start (137 samples, 0.31%)</title><rect x="0.3378%" y="1525" width="0.3086%" height="15" fill="rgb(209,12,38)"/><text x="0.5878%" y="1535.50"></text></g><g><title>h2s-client (294 samples, 0.66%)</title><rect x="0.0000%" y="1541" width="0.6621%" height="15" fill="rgb(227,1,9)"/><text x="0.2500%" y="1551.50"></text></g><g><title>[[heap]] (54 samples, 0.12%)</title><rect x="0.7117%" y="1525" width="0.1216%" height="15" fill="rgb(248,47,43)"/><text x="0.9617%" y="1535.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::poll_complete (47 samples, 0.11%)</title><rect x="0.9662%" y="1509" width="0.1059%" height="15" fill="rgb(221,10,30)"/><text x="1.2162%" y="1519.50"></text></g><g><title>h2::codec::Codec&lt;T,B&gt;::flush (47 samples, 0.11%)</title><rect x="0.9662%" y="1493" width="0.1059%" height="15" fill="rgb(210,229,1)"/><text x="1.2162%" y="1503.50"></text></g><g><title>h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (47 samples, 0.11%)</title><rect x="0.9662%" y="1477" width="0.1059%" height="15" fill="rgb(222,148,37)"/><text x="1.2162%" y="1487.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (47 samples, 0.11%)</title><rect x="0.9662%" y="1461" width="0.1059%" height="15" fill="rgb(234,67,33)"/><text x="1.2162%" y="1471.50"></text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (47 samples, 0.11%)</title><rect x="0.9662%" y="1445" width="0.1059%" height="15" fill="rgb(247,98,35)"/><text x="1.2162%" y="1455.50"></text></g><g><title>tokio_openssl::SslStream&lt;S&gt;::with_context (47 samples, 0.11%)</title><rect x="0.9662%" y="1429" width="0.1059%" height="15" fill="rgb(247,138,52)"/><text x="1.2162%" y="1439.50"></text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write::_{{closure}} (47 samples, 0.11%)</title><rect x="0.9662%" y="1413" width="0.1059%" height="15" fill="rgb(213,79,30)"/><text x="1.2162%" y="1423.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::write (47 samples, 0.11%)</title><rect x="0.9662%" y="1397" width="0.1059%" height="15" fill="rgb(246,177,23)"/><text x="1.2162%" y="1407.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_write (47 samples, 0.11%)</title><rect x="0.9662%" y="1381" width="0.1059%" height="15" fill="rgb(230,62,27)"/><text x="1.2162%" y="1391.50"></text></g><g><title>SSL_write (47 samples, 0.11%)</title><rect x="0.9662%" y="1365" width="0.1059%" height="15" fill="rgb(216,154,8)"/><text x="1.2162%" y="1375.50"></text></g><g><title>ssl_write_internal (47 samples, 0.11%)</title><rect x="0.9662%" y="1349" width="0.1059%" height="15" fill="rgb(244,35,45)"/><text x="1.2162%" y="1359.50"></text></g><g><title>ssl3_write_bytes (47 samples, 0.11%)</title><rect x="0.9662%" y="1333" width="0.1059%" height="15" fill="rgb(251,115,12)"/><text x="1.2162%" y="1343.50"></text></g><g><title>do_ssl3_write (47 samples, 0.11%)</title><rect x="0.9662%" y="1317" width="0.1059%" height="15" fill="rgb(240,54,50)"/><text x="1.2162%" y="1327.50"></text></g><g><title>memcpy (235 samples, 0.53%)</title><rect x="1.4121%" y="1093" width="0.5293%" height="15" fill="rgb(233,84,52)"/><text x="1.6621%" y="1103.50"></text></g><g><title>__memmove_avx_unaligned_erms (235 samples, 0.53%)</title><rect x="1.4121%" y="1077" width="0.5293%" height="15" fill="rgb(207,117,47)"/><text x="1.6621%" y="1087.50"></text></g><g><title>skb_release_data (69 samples, 0.16%)</title><rect x="2.4054%" y="485" width="0.1554%" height="15" fill="rgb(249,43,39)"/><text x="2.6554%" y="495.50"></text></g><g><title>__kfree_skb (101 samples, 0.23%)</title><rect x="2.3716%" y="517" width="0.2275%" height="15" fill="rgb(209,38,44)"/><text x="2.6216%" y="527.50"></text></g><g><title>skb_release_all (86 samples, 0.19%)</title><rect x="2.4054%" y="501" width="0.1937%" height="15" fill="rgb(236,212,23)"/><text x="2.6554%" y="511.50"></text></g><g><title>copy_user_enhanced_fast_string (668 samples, 1.50%)</title><rect x="2.9752%" y="453" width="1.5045%" height="15" fill="rgb(242,79,21)"/><text x="3.2252%" y="463.50"></text></g><g><title>_copy_to_iter (687 samples, 1.55%)</title><rect x="2.9616%" y="469" width="1.5473%" height="15" fill="rgb(211,96,35)"/><text x="3.2116%" y="479.50"></text></g><g><title>skb_copy_datagram_iter (778 samples, 1.75%)</title><rect x="2.7589%" y="517" width="1.7522%" height="15" fill="rgb(253,215,40)"/><text x="3.0089%" y="527.50"></text></g><g><title>__skb_datagram_iter (771 samples, 1.74%)</title><rect x="2.7747%" y="501" width="1.7364%" height="15" fill="rgb(211,81,21)"/><text x="3.0247%" y="511.50"></text></g><g><title>simple_copy_to_iter (725 samples, 1.63%)</title><rect x="2.8783%" y="485" width="1.6328%" height="15" fill="rgb(208,190,38)"/><text x="3.1283%" y="495.50"></text></g><g><title>__kfree_skb (51 samples, 0.11%)</title><rect x="4.7161%" y="69" width="0.1149%" height="15" fill="rgb(235,213,38)"/><text x="4.9661%" y="79.50"></text></g><g><title>skb_release_all (45 samples, 0.10%)</title><rect x="4.7296%" y="53" width="0.1013%" height="15" fill="rgb(237,122,38)"/><text x="4.9796%" y="63.50"></text></g><g><title>skb_release_data (45 samples, 0.10%)</title><rect x="4.7296%" y="37" width="0.1013%" height="15" fill="rgb(244,218,35)"/><text x="4.9796%" y="47.50"></text></g><g><title>tcp_ack (67 samples, 0.15%)</title><rect x="4.6868%" y="85" width="0.1509%" height="15" fill="rgb(240,68,47)"/><text x="4.9368%" y="95.50"></text></g><g><title>tcp_v4_do_rcv (84 samples, 0.19%)</title><rect x="4.6598%" y="117" width="0.1892%" height="15" fill="rgb(210,16,53)"/><text x="4.9098%" y="127.50"></text></g><g><title>tcp_rcv_established (84 samples, 0.19%)</title><rect x="4.6598%" y="101" width="0.1892%" height="15" fill="rgb(235,124,12)"/><text x="4.9098%" y="111.50"></text></g><g><title>ip_local_deliver_finish (93 samples, 0.21%)</title><rect x="4.6418%" y="165" width="0.2095%" height="15" fill="rgb(224,169,11)"/><text x="4.8918%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (93 samples, 0.21%)</title><rect x="4.6418%" y="149" width="0.2095%" height="15" fill="rgb(250,166,2)"/><text x="4.8918%" y="159.50"></text></g><g><title>tcp_v4_rcv (93 samples, 0.21%)</title><rect x="4.6418%" y="133" width="0.2095%" height="15" fill="rgb(242,216,29)"/><text x="4.8918%" y="143.50"></text></g><g><title>ip_local_deliver (97 samples, 0.22%)</title><rect x="4.6418%" y="181" width="0.2185%" height="15" fill="rgb(230,116,27)"/><text x="4.8918%" y="191.50"></text></g><g><title>ip_rcv_finish (98 samples, 0.22%)</title><rect x="4.6418%" y="197" width="0.2207%" height="15" fill="rgb(228,99,48)"/><text x="4.8918%" y="207.50"></text></g><g><title>__local_bh_enable_ip (107 samples, 0.24%)</title><rect x="4.6328%" y="341" width="0.2410%" height="15" fill="rgb(253,11,6)"/><text x="4.8828%" y="351.50"></text></g><g><title>do_softirq.part.18 (107 samples, 0.24%)</title><rect x="4.6328%" y="325" width="0.2410%" height="15" fill="rgb(247,143,39)"/><text x="4.8828%" y="335.50"></text></g><g><title>do_softirq_own_stack (107 samples, 0.24%)</title><rect x="4.6328%" y="309" width="0.2410%" height="15" fill="rgb(236,97,10)"/><text x="4.8828%" y="319.50"></text></g><g><title>__softirqentry_text_start (107 samples, 0.24%)</title><rect x="4.6328%" y="293" width="0.2410%" height="15" fill="rgb(233,208,19)"/><text x="4.8828%" y="303.50"></text></g><g><title>net_rx_action (107 samples, 0.24%)</title><rect x="4.6328%" y="277" width="0.2410%" height="15" fill="rgb(216,164,2)"/><text x="4.8828%" y="287.50"></text></g><g><title>process_backlog (105 samples, 0.24%)</title><rect x="4.6373%" y="261" width="0.2365%" height="15" fill="rgb(220,129,5)"/><text x="4.8873%" y="271.50"></text></g><g><title>__netif_receive_skb (105 samples, 0.24%)</title><rect x="4.6373%" y="245" width="0.2365%" height="15" fill="rgb(242,17,10)"/><text x="4.8873%" y="255.50"></text></g><g><title>__netif_receive_skb_one_core (105 samples, 0.24%)</title><rect x="4.6373%" y="229" width="0.2365%" height="15" fill="rgb(242,107,0)"/><text x="4.8873%" y="239.50"></text></g><g><title>ip_rcv (103 samples, 0.23%)</title><rect x="4.6418%" y="213" width="0.2320%" height="15" fill="rgb(251,28,31)"/><text x="4.8918%" y="223.50"></text></g><g><title>ip_finish_output2 (119 samples, 0.27%)</title><rect x="4.6283%" y="357" width="0.2680%" height="15" fill="rgb(233,223,10)"/><text x="4.8783%" y="367.50"></text></g><g><title>ip_finish_output (124 samples, 0.28%)</title><rect x="4.6193%" y="389" width="0.2793%" height="15" fill="rgb(215,21,27)"/><text x="4.8693%" y="399.50"></text></g><g><title>__ip_finish_output (123 samples, 0.28%)</title><rect x="4.6215%" y="373" width="0.2770%" height="15" fill="rgb(232,23,21)"/><text x="4.8715%" y="383.50"></text></g><g><title>ip_output (129 samples, 0.29%)</title><rect x="4.6170%" y="405" width="0.2905%" height="15" fill="rgb(244,5,23)"/><text x="4.8670%" y="415.50"></text></g><g><title>tcp_cleanup_rbuf (176 samples, 0.40%)</title><rect x="4.5134%" y="517" width="0.3964%" height="15" fill="rgb(226,81,46)"/><text x="4.7634%" y="527.50"></text></g><g><title>tcp_send_ack (165 samples, 0.37%)</title><rect x="4.5382%" y="501" width="0.3716%" height="15" fill="rgb(247,70,30)"/><text x="4.7882%" y="511.50"></text></g><g><title>__tcp_send_ack.part.50 (165 samples, 0.37%)</title><rect x="4.5382%" y="485" width="0.3716%" height="15" fill="rgb(212,68,19)"/><text x="4.7882%" y="495.50"></text></g><g><title>__tcp_transmit_skb (153 samples, 0.34%)</title><rect x="4.5652%" y="469" width="0.3446%" height="15" fill="rgb(240,187,13)"/><text x="4.8152%" y="479.50"></text></g><g><title>ip_queue_xmit (149 samples, 0.34%)</title><rect x="4.5742%" y="453" width="0.3356%" height="15" fill="rgb(223,113,26)"/><text x="4.8242%" y="463.50"></text></g><g><title>__ip_queue_xmit (149 samples, 0.34%)</title><rect x="4.5742%" y="437" width="0.3356%" height="15" fill="rgb(206,192,2)"/><text x="4.8242%" y="447.50"></text></g><g><title>ip_local_out (148 samples, 0.33%)</title><rect x="4.5765%" y="421" width="0.3333%" height="15" fill="rgb(241,108,4)"/><text x="4.8265%" y="431.50"></text></g><g><title>inet_recvmsg (1,183 samples, 2.66%)</title><rect x="2.3310%" y="549" width="2.6644%" height="15" fill="rgb(247,173,49)"/><text x="2.5810%" y="559.50">in..</text></g><g><title>tcp_recvmsg (1,180 samples, 2.66%)</title><rect x="2.3378%" y="533" width="2.6576%" height="15" fill="rgb(224,114,35)"/><text x="2.5878%" y="543.50">tc..</text></g><g><title>sock_recvmsg (1,204 samples, 2.71%)</title><rect x="2.3198%" y="565" width="2.7117%" height="15" fill="rgb(245,159,27)"/><text x="2.5698%" y="575.50">so..</text></g><g><title>__sys_recvfrom (1,239 samples, 2.79%)</title><rect x="2.2792%" y="581" width="2.7905%" height="15" fill="rgb(245,172,44)"/><text x="2.5292%" y="591.50">__..</text></g><g><title>__x64_sys_recvfrom (1,242 samples, 2.80%)</title><rect x="2.2792%" y="597" width="2.7972%" height="15" fill="rgb(236,23,11)"/><text x="2.5292%" y="607.50">__..</text></g><g><title>do_syscall_64 (1,250 samples, 2.82%)</title><rect x="2.2657%" y="613" width="2.8153%" height="15" fill="rgb(205,117,38)"/><text x="2.5157%" y="623.50">do..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,258 samples, 2.83%)</title><rect x="2.2499%" y="629" width="2.8333%" height="15" fill="rgb(237,72,25)"/><text x="2.4999%" y="639.50">en..</text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (1,336 samples, 3.01%)</title><rect x="2.0833%" y="837" width="3.0089%" height="15" fill="rgb(244,70,9)"/><text x="2.3333%" y="847.50">tok..</text></g><g><title>tokio::io::driver::registration::Registration::poll_io (1,336 samples, 3.01%)</title><rect x="2.0833%" y="821" width="3.0089%" height="15" fill="rgb(217,125,39)"/><text x="2.3333%" y="831.50">tok..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::_{{closure}} (1,304 samples, 2.94%)</title><rect x="2.1554%" y="805" width="2.9369%" height="15" fill="rgb(235,36,10)"/><text x="2.4054%" y="815.50">to..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1,304 samples, 2.94%)</title><rect x="2.1554%" y="789" width="2.9369%" height="15" fill="rgb(251,123,47)"/><text x="2.4054%" y="799.50">&lt;&amp;..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1,304 samples, 2.94%)</title><rect x="2.1554%" y="773" width="2.9369%" height="15" fill="rgb(221,13,13)"/><text x="2.4054%" y="783.50">mi..</text></g><g><title>mio::sys::unix::IoSourceState::do_io (1,304 samples, 2.94%)</title><rect x="2.1554%" y="757" width="2.9369%" height="15" fill="rgb(238,131,9)"/><text x="2.4054%" y="767.50">mi..</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (1,304 samples, 2.94%)</title><rect x="2.1554%" y="741" width="2.9369%" height="15" fill="rgb(211,50,8)"/><text x="2.4054%" y="751.50">&lt;&amp;..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1,304 samples, 2.94%)</title><rect x="2.1554%" y="725" width="2.9369%" height="15" fill="rgb(245,182,24)"/><text x="2.4054%" y="735.50">&lt;&amp;..</text></g><g><title>std::sys_common::net::TcpStream::read (1,304 samples, 2.94%)</title><rect x="2.1554%" y="709" width="2.9369%" height="15" fill="rgb(242,14,37)"/><text x="2.4054%" y="719.50">st..</text></g><g><title>std::sys::unix::net::Socket::read (1,304 samples, 2.94%)</title><rect x="2.1554%" y="693" width="2.9369%" height="15" fill="rgb(246,228,12)"/><text x="2.4054%" y="703.50">st..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1,304 samples, 2.94%)</title><rect x="2.1554%" y="677" width="2.9369%" height="15" fill="rgb(213,55,15)"/><text x="2.4054%" y="687.50">st..</text></g><g><title>__libc_recv (1,303 samples, 2.93%)</title><rect x="2.1576%" y="661" width="2.9346%" height="15" fill="rgb(209,9,3)"/><text x="2.4076%" y="671.50">__..</text></g><g><title>__libc_recv (1,303 samples, 2.93%)</title><rect x="2.1576%" y="645" width="2.9346%" height="15" fill="rgb(230,59,30)"/><text x="2.4076%" y="655.50">__..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1,339 samples, 3.02%)</title><rect x="2.0810%" y="885" width="3.0157%" height="15" fill="rgb(209,121,21)"/><text x="2.3310%" y="895.50">&lt;to..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (1,339 samples, 3.02%)</title><rect x="2.0810%" y="869" width="3.0157%" height="15" fill="rgb(220,109,13)"/><text x="2.3310%" y="879.50">tok..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1,339 samples, 3.02%)</title><rect x="2.0810%" y="853" width="3.0157%" height="15" fill="rgb(232,18,1)"/><text x="2.3310%" y="863.50">tok..</text></g><g><title>BIO_read (1,368 samples, 3.08%)</title><rect x="2.0225%" y="1061" width="3.0810%" height="15" fill="rgb(215,41,42)"/><text x="2.2725%" y="1071.50">BIO..</text></g><g><title>bio_read_intern (1,361 samples, 3.07%)</title><rect x="2.0382%" y="1045" width="3.0652%" height="15" fill="rgb(224,123,36)"/><text x="2.2882%" y="1055.50">bio..</text></g><g><title>bread_conv (1,351 samples, 3.04%)</title><rect x="2.0608%" y="1029" width="3.0427%" height="15" fill="rgb(240,125,3)"/><text x="2.3108%" y="1039.50">bre..</text></g><g><title>openssl::ssl::bio::bread (1,345 samples, 3.03%)</title><rect x="2.0743%" y="1013" width="3.0292%" height="15" fill="rgb(205,98,50)"/><text x="2.3243%" y="1023.50">ope..</text></g><g><title>std::panic::catch_unwind (1,343 samples, 3.02%)</title><rect x="2.0788%" y="997" width="3.0247%" height="15" fill="rgb(205,185,37)"/><text x="2.3288%" y="1007.50">std..</text></g><g><title>std::panicking::try (1,343 samples, 3.02%)</title><rect x="2.0788%" y="981" width="3.0247%" height="15" fill="rgb(238,207,15)"/><text x="2.3288%" y="991.50">std..</text></g><g><title>std::panicking::try::do_call (1,343 samples, 3.02%)</title><rect x="2.0788%" y="965" width="3.0247%" height="15" fill="rgb(213,199,42)"/><text x="2.3288%" y="975.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,343 samples, 3.02%)</title><rect x="2.0788%" y="949" width="3.0247%" height="15" fill="rgb(235,201,11)"/><text x="2.3288%" y="959.50">&lt;st..</text></g><g><title>core::ops::function::FnOnce::call_once (1,343 samples, 3.02%)</title><rect x="2.0788%" y="933" width="3.0247%" height="15" fill="rgb(207,46,11)"/><text x="2.3288%" y="943.50">cor..</text></g><g><title>openssl::ssl::bio::bread::_{{closure}} (1,343 samples, 3.02%)</title><rect x="2.0788%" y="917" width="3.0247%" height="15" fill="rgb(241,35,35)"/><text x="2.3288%" y="927.50">ope..</text></g><g><title>&lt;tokio_openssl::StreamWrapper&lt;S&gt; as std::io::Read&gt;::read (1,343 samples, 3.02%)</title><rect x="2.0788%" y="901" width="3.0247%" height="15" fill="rgb(243,32,47)"/><text x="2.3288%" y="911.50">&lt;to..</text></g><g><title>ssl3_read_n (1,392 samples, 3.14%)</title><rect x="1.9842%" y="1077" width="3.1351%" height="15" fill="rgb(247,202,23)"/><text x="2.2342%" y="1087.50">ssl..</text></g><g><title>aes_gcm_cipher (49 samples, 0.11%)</title><rect x="5.2364%" y="1029" width="0.1104%" height="15" fill="rgb(219,102,11)"/><text x="5.4864%" y="1039.50"></text></g><g><title>EVP_DecryptUpdate (55 samples, 0.12%)</title><rect x="5.2251%" y="1061" width="0.1239%" height="15" fill="rgb(243,110,44)"/><text x="5.4751%" y="1071.50"></text></g><g><title>EVP_DecryptUpdate (55 samples, 0.12%)</title><rect x="5.2251%" y="1045" width="0.1239%" height="15" fill="rgb(222,74,54)"/><text x="5.4751%" y="1055.50"></text></g><g><title>ssl3_get_record (1,539 samples, 3.47%)</title><rect x="1.9414%" y="1093" width="3.4661%" height="15" fill="rgb(216,99,12)"/><text x="2.1914%" y="1103.50">ssl..</text></g><g><title>tls13_enc (128 samples, 0.29%)</title><rect x="5.1193%" y="1077" width="0.2883%" height="15" fill="rgb(226,22,26)"/><text x="5.3693%" y="1087.50"></text></g><g><title>SSL_read (1,916 samples, 4.32%)</title><rect x="1.2860%" y="1173" width="4.3152%" height="15" fill="rgb(217,163,10)"/><text x="1.5360%" y="1183.50">SSL_r..</text></g><g><title>ssl_read_internal (1,915 samples, 4.31%)</title><rect x="1.2883%" y="1157" width="4.3130%" height="15" fill="rgb(213,25,53)"/><text x="1.5383%" y="1167.50">ssl_r..</text></g><g><title>ssl_read_internal (1,899 samples, 4.28%)</title><rect x="1.3243%" y="1141" width="4.2769%" height="15" fill="rgb(252,105,26)"/><text x="1.5743%" y="1151.50">ssl_r..</text></g><g><title>ssl3_read_internal (1,894 samples, 4.27%)</title><rect x="1.3356%" y="1125" width="4.2657%" height="15" fill="rgb(220,39,43)"/><text x="1.5856%" y="1135.50">ssl3_..</text></g><g><title>ssl3_read_bytes (1,883 samples, 4.24%)</title><rect x="1.3603%" y="1109" width="4.2409%" height="15" fill="rgb(229,68,48)"/><text x="1.6103%" y="1119.50">ssl3_..</text></g><g><title>ssl3_setup_read_buffer (45 samples, 0.10%)</title><rect x="5.4999%" y="1093" width="0.1013%" height="15" fill="rgb(252,8,32)"/><text x="5.7499%" y="1103.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (1,940 samples, 4.37%)</title><rect x="1.2657%" y="1189" width="4.3693%" height="15" fill="rgb(223,20,43)"/><text x="1.5157%" y="1199.50">opens..</text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (1,941 samples, 4.37%)</title><rect x="1.2657%" y="1205" width="4.3715%" height="15" fill="rgb(229,81,49)"/><text x="1.5157%" y="1215.50">&lt;open..</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (37,879 samples, 85.31%)</title><rect x="5.6373%" y="1205" width="85.3111%" height="15" fill="rgb(236,28,36)"/><text x="5.8873%" y="1215.50">tokio::io::read_buf::ReadBuf::initialize_unfilled</text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (37,879 samples, 85.31%)</title><rect x="5.6373%" y="1189" width="85.3111%" height="15" fill="rgb(249,185,26)"/><text x="5.8873%" y="1199.50">tokio::io::read_buf::ReadBuf::initialize_unfilled_to</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (37,862 samples, 85.27%)</title><rect x="5.6755%" y="1173" width="85.2729%" height="15" fill="rgb(249,174,33)"/><text x="5.9255%" y="1183.50">core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes</text></g><g><title>core::intrinsics::write_bytes (37,862 samples, 85.27%)</title><rect x="5.6755%" y="1157" width="85.2729%" height="15" fill="rgb(233,201,37)"/><text x="5.9255%" y="1167.50">core::intrinsics::write_bytes</text></g><g><title>__memset_avx2_erms (37,862 samples, 85.27%)</title><rect x="5.6755%" y="1141" width="85.2729%" height="15" fill="rgb(221,78,26)"/><text x="5.9255%" y="1151.50">__memset_avx2_erms</text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::_{{closure}} (39,823 samples, 89.69%)</title><rect x="1.2635%" y="1221" width="89.6894%" height="15" fill="rgb(250,127,30)"/><text x="1.5135%" y="1231.50">&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::_{{closure}}</text></g><g><title>&lt;h2::codec::framed_write::FramedWrite&lt;T,B&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (39,827 samples, 89.70%)</title><rect x="1.2590%" y="1285" width="89.6984%" height="15" fill="rgb(230,49,44)"/><text x="1.5090%" y="1295.50">&lt;h2::codec::framed_write::FramedWrite&lt;T,B&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (39,827 samples, 89.70%)</title><rect x="1.2590%" y="1269" width="89.6984%" height="15" fill="rgb(229,67,23)"/><text x="1.5090%" y="1279.50">&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (39,827 samples, 89.70%)</title><rect x="1.2590%" y="1253" width="89.6984%" height="15" fill="rgb(249,83,47)"/><text x="1.5090%" y="1263.50">&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>tokio_openssl::SslStream&lt;S&gt;::with_context (39,827 samples, 89.70%)</title><rect x="1.2590%" y="1237" width="89.6984%" height="15" fill="rgb(215,43,3)"/><text x="1.5090%" y="1247.50">tokio_openssl::SslStream&lt;S&gt;::with_context</text></g><g><title>&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next (39,843 samples, 89.73%)</title><rect x="1.2252%" y="1333" width="89.7345%" height="15" fill="rgb(238,154,13)"/><text x="1.4752%" y="1343.50">&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (39,843 samples, 89.73%)</title><rect x="1.2252%" y="1317" width="89.7345%" height="15" fill="rgb(219,56,2)"/><text x="1.4752%" y="1327.50">&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>tokio_util::util::poll_read_buf (39,835 samples, 89.72%)</title><rect x="1.2432%" y="1301" width="89.7164%" height="15" fill="rgb(233,0,4)"/><text x="1.4932%" y="1311.50">tokio_util::util::poll_read_buf</text></g><g><title>&lt;h2::codec::Codec&lt;T,B&gt; as futures_core::stream::Stream&gt;::poll_next (39,849 samples, 89.75%)</title><rect x="1.2207%" y="1365" width="89.7480%" height="15" fill="rgb(235,30,7)"/><text x="1.4707%" y="1375.50">&lt;h2::codec::Codec&lt;T,B&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (39,849 samples, 89.75%)</title><rect x="1.2207%" y="1349" width="89.7480%" height="15" fill="rgb(250,79,13)"/><text x="1.4707%" y="1359.50">&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (39,856 samples, 89.76%)</title><rect x="1.2207%" y="1381" width="89.7637%" height="15" fill="rgb(211,146,34)"/><text x="1.4707%" y="1391.50">h2::proto::connection::Connection&lt;T,P,B&gt;::poll2</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (39,866 samples, 89.79%)</title><rect x="1.2184%" y="1509" width="89.7863%" height="15" fill="rgb(228,22,38)"/><text x="1.4684%" y="1519.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1493" width="89.7840%" height="15" fill="rgb(235,168,5)"/><text x="1.4707%" y="1503.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1477" width="89.7840%" height="15" fill="rgb(221,155,16)"/><text x="1.4707%" y="1487.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1461" width="89.7840%" height="15" fill="rgb(215,215,53)"/><text x="1.4707%" y="1471.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1445" width="89.7840%" height="15" fill="rgb(223,4,10)"/><text x="1.4707%" y="1455.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>h2s_client::main::_{{closure}}::_{{closure}} (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1429" width="89.7840%" height="15" fill="rgb(234,103,6)"/><text x="1.4707%" y="1439.50">h2s_client::main::_{{closure}}::_{{closure}}</text></g><g><title>&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1413" width="89.7840%" height="15" fill="rgb(227,97,0)"/><text x="1.4707%" y="1423.50">&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (39,865 samples, 89.78%)</title><rect x="1.2207%" y="1397" width="89.7840%" height="15" fill="rgb(234,150,53)"/><text x="1.4707%" y="1407.50">h2::proto::connection::Connection&lt;T,P,B&gt;::poll</text></g><g><title>[unknown] (40,046 samples, 90.19%)</title><rect x="0.9099%" y="1525" width="90.1917%" height="15" fill="rgb(228,201,54)"/><text x="1.1599%" y="1535.50">[unknown]</text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (46 samples, 0.10%)</title><rect x="91.2502%" y="1285" width="0.1036%" height="15" fill="rgb(222,22,37)"/><text x="91.5002%" y="1295.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (46 samples, 0.10%)</title><rect x="91.2502%" y="1269" width="0.1036%" height="15" fill="rgb(237,53,32)"/><text x="91.5002%" y="1279.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (46 samples, 0.10%)</title><rect x="91.2502%" y="1253" width="0.1036%" height="15" fill="rgb(233,25,53)"/><text x="91.5002%" y="1263.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (46 samples, 0.10%)</title><rect x="91.2502%" y="1237" width="0.1036%" height="15" fill="rgb(210,40,34)"/><text x="91.5002%" y="1247.50"></text></g><g><title>parking_lot_core::parking_lot::park (45 samples, 0.10%)</title><rect x="91.2524%" y="1221" width="0.1013%" height="15" fill="rgb(241,220,44)"/><text x="91.5024%" y="1231.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (45 samples, 0.10%)</title><rect x="91.2524%" y="1205" width="0.1013%" height="15" fill="rgb(235,28,35)"/><text x="91.5024%" y="1215.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (45 samples, 0.10%)</title><rect x="91.2524%" y="1189" width="0.1013%" height="15" fill="rgb(210,56,17)"/><text x="91.5024%" y="1199.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (45 samples, 0.10%)</title><rect x="91.2524%" y="1173" width="0.1013%" height="15" fill="rgb(224,130,29)"/><text x="91.5024%" y="1183.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (45 samples, 0.10%)</title><rect x="91.2524%" y="1157" width="0.1013%" height="15" fill="rgb(235,212,8)"/><text x="91.5024%" y="1167.50"></text></g><g><title>syscall (45 samples, 0.10%)</title><rect x="91.2524%" y="1141" width="0.1013%" height="15" fill="rgb(223,33,50)"/><text x="91.5024%" y="1151.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (45 samples, 0.10%)</title><rect x="91.2524%" y="1125" width="0.1013%" height="15" fill="rgb(219,149,13)"/><text x="91.5024%" y="1135.50"></text></g><g><title>do_syscall_64 (45 samples, 0.10%)</title><rect x="91.2524%" y="1109" width="0.1013%" height="15" fill="rgb(250,156,29)"/><text x="91.5024%" y="1119.50"></text></g><g><title>pick_next_task_fair (88 samples, 0.20%)</title><rect x="91.7096%" y="821" width="0.1982%" height="15" fill="rgb(216,193,19)"/><text x="91.9596%" y="831.50"></text></g><g><title>update_curr (59 samples, 0.13%)</title><rect x="91.7750%" y="805" width="0.1329%" height="15" fill="rgb(216,135,14)"/><text x="92.0250%" y="815.50"></text></g><g><title>__schedule (187 samples, 0.42%)</title><rect x="91.5340%" y="837" width="0.4212%" height="15" fill="rgb(241,47,5)"/><text x="91.7840%" y="847.50"></text></g><g><title>schedule (193 samples, 0.43%)</title><rect x="91.5317%" y="853" width="0.4347%" height="15" fill="rgb(233,42,35)"/><text x="91.7817%" y="863.50"></text></g><g><title>do_sched_yield (210 samples, 0.47%)</title><rect x="91.5047%" y="869" width="0.4730%" height="15" fill="rgb(231,13,6)"/><text x="91.7547%" y="879.50"></text></g><g><title>__x64_sys_sched_yield (222 samples, 0.50%)</title><rect x="91.5024%" y="885" width="0.5000%" height="15" fill="rgb(207,181,40)"/><text x="91.7524%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (243 samples, 0.55%)</title><rect x="91.4754%" y="917" width="0.5473%" height="15" fill="rgb(254,173,49)"/><text x="91.7254%" y="927.50"></text></g><g><title>do_syscall_64 (237 samples, 0.53%)</title><rect x="91.4889%" y="901" width="0.5338%" height="15" fill="rgb(221,1,38)"/><text x="91.7389%" y="911.50"></text></g><g><title>__GI___sched_yield (291 samples, 0.66%)</title><rect x="91.3831%" y="933" width="0.6554%" height="15" fill="rgb(206,124,46)"/><text x="91.6331%" y="943.50"></text></g><g><title>finish_task_switch (52 samples, 0.12%)</title><rect x="92.0790%" y="645" width="0.1171%" height="15" fill="rgb(249,21,11)"/><text x="92.3290%" y="655.50"></text></g><g><title>__perf_event_task_sched_in (50 samples, 0.11%)</title><rect x="92.0835%" y="629" width="0.1126%" height="15" fill="rgb(222,201,40)"/><text x="92.3335%" y="639.50"></text></g><g><title>perf_pmu_enable.part.111 (49 samples, 0.11%)</title><rect x="92.0858%" y="613" width="0.1104%" height="15" fill="rgb(235,61,29)"/><text x="92.3358%" y="623.50"></text></g><g><title>x86_pmu_enable (49 samples, 0.11%)</title><rect x="92.0858%" y="597" width="0.1104%" height="15" fill="rgb(219,207,3)"/><text x="92.3358%" y="607.50"></text></g><g><title>intel_pmu_enable_all (49 samples, 0.11%)</title><rect x="92.0858%" y="581" width="0.1104%" height="15" fill="rgb(222,56,46)"/><text x="92.3358%" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (49 samples, 0.11%)</title><rect x="92.0858%" y="565" width="0.1104%" height="15" fill="rgb(239,76,54)"/><text x="92.3358%" y="575.50"></text></g><g><title>native_write_msr (49 samples, 0.11%)</title><rect x="92.0858%" y="549" width="0.1104%" height="15" fill="rgb(231,124,27)"/><text x="92.3358%" y="559.50"></text></g><g><title>__schedule (57 samples, 0.13%)</title><rect x="92.0700%" y="661" width="0.1284%" height="15" fill="rgb(249,195,6)"/><text x="92.3200%" y="671.50"></text></g><g><title>futex_wait_queue_me (58 samples, 0.13%)</title><rect x="92.0700%" y="693" width="0.1306%" height="15" fill="rgb(237,174,47)"/><text x="92.3200%" y="703.50"></text></g><g><title>schedule (58 samples, 0.13%)</title><rect x="92.0700%" y="677" width="0.1306%" height="15" fill="rgb(206,201,31)"/><text x="92.3200%" y="687.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (64 samples, 0.14%)</title><rect x="92.0632%" y="933" width="0.1441%" height="15" fill="rgb(231,57,52)"/><text x="92.3132%" y="943.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (64 samples, 0.14%)</title><rect x="92.0632%" y="917" width="0.1441%" height="15" fill="rgb(248,177,22)"/><text x="92.3132%" y="927.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (64 samples, 0.14%)</title><rect x="92.0632%" y="901" width="0.1441%" height="15" fill="rgb(215,211,37)"/><text x="92.3132%" y="911.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (64 samples, 0.14%)</title><rect x="92.0632%" y="885" width="0.1441%" height="15" fill="rgb(241,128,51)"/><text x="92.3132%" y="895.50"></text></g><g><title>parking_lot_core::parking_lot::park (63 samples, 0.14%)</title><rect x="92.0655%" y="869" width="0.1419%" height="15" fill="rgb(227,165,31)"/><text x="92.3155%" y="879.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (63 samples, 0.14%)</title><rect x="92.0655%" y="853" width="0.1419%" height="15" fill="rgb(228,167,24)"/><text x="92.3155%" y="863.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (63 samples, 0.14%)</title><rect x="92.0655%" y="837" width="0.1419%" height="15" fill="rgb(228,143,12)"/><text x="92.3155%" y="847.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (63 samples, 0.14%)</title><rect x="92.0655%" y="821" width="0.1419%" height="15" fill="rgb(249,149,8)"/><text x="92.3155%" y="831.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (63 samples, 0.14%)</title><rect x="92.0655%" y="805" width="0.1419%" height="15" fill="rgb(243,35,44)"/><text x="92.3155%" y="815.50"></text></g><g><title>syscall (63 samples, 0.14%)</title><rect x="92.0655%" y="789" width="0.1419%" height="15" fill="rgb(246,89,9)"/><text x="92.3155%" y="799.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (62 samples, 0.14%)</title><rect x="92.0677%" y="773" width="0.1396%" height="15" fill="rgb(233,213,13)"/><text x="92.3177%" y="783.50"></text></g><g><title>do_syscall_64 (62 samples, 0.14%)</title><rect x="92.0677%" y="757" width="0.1396%" height="15" fill="rgb(233,141,41)"/><text x="92.3177%" y="767.50"></text></g><g><title>__x64_sys_futex (61 samples, 0.14%)</title><rect x="92.0700%" y="741" width="0.1374%" height="15" fill="rgb(239,167,4)"/><text x="92.3200%" y="751.50"></text></g><g><title>do_futex (61 samples, 0.14%)</title><rect x="92.0700%" y="725" width="0.1374%" height="15" fill="rgb(209,217,16)"/><text x="92.3200%" y="735.50"></text></g><g><title>futex_wait (61 samples, 0.14%)</title><rect x="92.0700%" y="709" width="0.1374%" height="15" fill="rgb(219,88,35)"/><text x="92.3200%" y="719.50"></text></g><g><title>ep_item_poll.isra.20 (93 samples, 0.21%)</title><rect x="92.5700%" y="613" width="0.2095%" height="15" fill="rgb(220,193,23)"/><text x="92.8200%" y="623.50"></text></g><g><title>sock_poll (78 samples, 0.18%)</title><rect x="92.6038%" y="597" width="0.1757%" height="15" fill="rgb(230,90,52)"/><text x="92.8538%" y="607.50"></text></g><g><title>ep_send_events_proc (126 samples, 0.28%)</title><rect x="92.5047%" y="629" width="0.2838%" height="15" fill="rgb(252,106,19)"/><text x="92.7547%" y="639.50"></text></g><g><title>ep_scan_ready_list.constprop.24 (157 samples, 0.35%)</title><rect x="92.4754%" y="645" width="0.3536%" height="15" fill="rgb(206,74,20)"/><text x="92.7254%" y="655.50"></text></g><g><title>dequeue_entity (82 samples, 0.18%)</title><rect x="93.0047%" y="533" width="0.1847%" height="15" fill="rgb(230,138,44)"/><text x="93.2547%" y="543.50"></text></g><g><title>dequeue_task_fair (92 samples, 0.21%)</title><rect x="92.9844%" y="549" width="0.2072%" height="15" fill="rgb(235,182,43)"/><text x="93.2344%" y="559.50"></text></g><g><title>psi_task_change (156 samples, 0.35%)</title><rect x="93.1916%" y="549" width="0.3513%" height="15" fill="rgb(242,16,51)"/><text x="93.4416%" y="559.50"></text></g><g><title>dequeue_task (252 samples, 0.57%)</title><rect x="92.9799%" y="565" width="0.5676%" height="15" fill="rgb(248,9,4)"/><text x="93.2299%" y="575.50"></text></g><g><title>deactivate_task (254 samples, 0.57%)</title><rect x="92.9799%" y="581" width="0.5721%" height="15" fill="rgb(210,31,22)"/><text x="93.2299%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (113 samples, 0.25%)</title><rect x="93.6015%" y="565" width="0.2545%" height="15" fill="rgb(239,54,39)"/><text x="93.8515%" y="575.50"></text></g><g><title>perf_pmu_enable.part.111 (112 samples, 0.25%)</title><rect x="93.6037%" y="549" width="0.2522%" height="15" fill="rgb(230,99,41)"/><text x="93.8537%" y="559.50"></text></g><g><title>x86_pmu_enable (110 samples, 0.25%)</title><rect x="93.6083%" y="533" width="0.2477%" height="15" fill="rgb(253,106,12)"/><text x="93.8583%" y="543.50"></text></g><g><title>intel_pmu_enable_all (109 samples, 0.25%)</title><rect x="93.6105%" y="517" width="0.2455%" height="15" fill="rgb(213,46,41)"/><text x="93.8605%" y="527.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (109 samples, 0.25%)</title><rect x="93.6105%" y="501" width="0.2455%" height="15" fill="rgb(215,133,35)"/><text x="93.8605%" y="511.50"></text></g><g><title>native_write_msr (109 samples, 0.25%)</title><rect x="93.6105%" y="485" width="0.2455%" height="15" fill="rgb(213,28,5)"/><text x="93.8605%" y="495.50"></text></g><g><title>finish_task_switch (137 samples, 0.31%)</title><rect x="93.5519%" y="581" width="0.3086%" height="15" fill="rgb(215,77,49)"/><text x="93.8019%" y="591.50"></text></g><g><title>__schedule (472 samples, 1.06%)</title><rect x="92.8695%" y="597" width="1.0630%" height="15" fill="rgb(248,100,22)"/><text x="93.1195%" y="607.50"></text></g><g><title>schedule_hrtimeout_range (496 samples, 1.12%)</title><rect x="92.8312%" y="645" width="1.1171%" height="15" fill="rgb(208,67,9)"/><text x="93.0812%" y="655.50"></text></g><g><title>schedule_hrtimeout_range_clock (494 samples, 1.11%)</title><rect x="92.8357%" y="629" width="1.1126%" height="15" fill="rgb(219,133,21)"/><text x="93.0857%" y="639.50"></text></g><g><title>schedule (488 samples, 1.10%)</title><rect x="92.8493%" y="613" width="1.0991%" height="15" fill="rgb(246,46,29)"/><text x="93.0993%" y="623.50"></text></g><g><title>ep_poll (688 samples, 1.55%)</title><rect x="92.4011%" y="661" width="1.5495%" height="15" fill="rgb(246,185,52)"/><text x="92.6511%" y="671.50"></text></g><g><title>__x64_sys_epoll_wait (723 samples, 1.63%)</title><rect x="92.3763%" y="693" width="1.6283%" height="15" fill="rgb(252,136,11)"/><text x="92.6263%" y="703.50"></text></g><g><title>do_epoll_wait (723 samples, 1.63%)</title><rect x="92.3763%" y="677" width="1.6283%" height="15" fill="rgb(219,138,53)"/><text x="92.6263%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (744 samples, 1.68%)</title><rect x="92.3560%" y="725" width="1.6756%" height="15" fill="rgb(211,51,23)"/><text x="92.6060%" y="735.50"></text></g><g><title>do_syscall_64 (739 samples, 1.66%)</title><rect x="92.3673%" y="709" width="1.6644%" height="15" fill="rgb(247,221,28)"/><text x="92.6173%" y="719.50"></text></g><g><title>mio::poll::Poll::poll (777 samples, 1.75%)</title><rect x="92.2885%" y="773" width="1.7500%" height="15" fill="rgb(251,222,45)"/><text x="92.5385%" y="783.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (777 samples, 1.75%)</title><rect x="92.2885%" y="757" width="1.7500%" height="15" fill="rgb(217,162,53)"/><text x="92.5385%" y="767.50"></text></g><g><title>epoll_wait (768 samples, 1.73%)</title><rect x="92.3087%" y="741" width="1.7297%" height="15" fill="rgb(229,93,14)"/><text x="92.5587%" y="751.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (841 samples, 1.89%)</title><rect x="92.2299%" y="805" width="1.8941%" height="15" fill="rgb(209,67,49)"/><text x="92.4799%" y="815.50">&lt;..</text></g><g><title>tokio::io::driver::Driver::turn (835 samples, 1.88%)</title><rect x="92.2434%" y="789" width="1.8806%" height="15" fill="rgb(213,87,29)"/><text x="92.4934%" y="799.50">t..</text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (853 samples, 1.92%)</title><rect x="92.2277%" y="821" width="1.9211%" height="15" fill="rgb(205,151,52)"/><text x="92.4777%" y="831.50">&lt;..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (858 samples, 1.93%)</title><rect x="92.2277%" y="853" width="1.9324%" height="15" fill="rgb(253,215,39)"/><text x="92.4777%" y="863.50">&lt;..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (858 samples, 1.93%)</title><rect x="92.2277%" y="837" width="1.9324%" height="15" fill="rgb(221,220,41)"/><text x="92.4777%" y="847.50">&lt;..</text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (54 samples, 0.12%)</title><rect x="94.1758%" y="853" width="0.1216%" height="15" fill="rgb(218,133,21)"/><text x="94.4258%" y="863.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (934 samples, 2.10%)</title><rect x="92.2096%" y="885" width="2.1036%" height="15" fill="rgb(221,193,43)"/><text x="92.4596%" y="895.50">&lt;..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (931 samples, 2.10%)</title><rect x="92.2164%" y="869" width="2.0968%" height="15" fill="rgb(240,128,52)"/><text x="92.4664%" y="879.50">t..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (944 samples, 2.13%)</title><rect x="92.2074%" y="917" width="2.1261%" height="15" fill="rgb(253,114,12)"/><text x="92.4574%" y="927.50">&lt;..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (944 samples, 2.13%)</title><rect x="92.2074%" y="901" width="2.1261%" height="15" fill="rgb(215,223,47)"/><text x="92.4574%" y="911.50">&lt;..</text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (1,317 samples, 2.97%)</title><rect x="91.3808%" y="965" width="2.9661%" height="15" fill="rgb(248,225,23)"/><text x="91.6308%" y="975.50">&lt;to..</text></g><g><title>tokio::runtime::park::Inner::park (1,317 samples, 2.97%)</title><rect x="91.3808%" y="949" width="2.9661%" height="15" fill="rgb(250,108,0)"/><text x="91.6308%" y="959.50">tok..</text></g><g><title>tokio::runtime::park::Inner::park_driver (950 samples, 2.14%)</title><rect x="92.2074%" y="933" width="2.1396%" height="15" fill="rgb(228,208,7)"/><text x="92.4574%" y="943.50">t..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1,328 samples, 2.99%)</title><rect x="91.3786%" y="981" width="2.9909%" height="15" fill="rgb(244,45,10)"/><text x="91.6286%" y="991.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (1,367 samples, 3.08%)</title><rect x="91.3583%" y="997" width="3.0788%" height="15" fill="rgb(207,125,25)"/><text x="91.6083%" y="1007.50">tok..</text></g><g><title>std::panic::catch_unwind (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1413" width="3.3783%" height="15" fill="rgb(210,195,18)"/><text x="91.4214%" y="1423.50">std..</text></g><g><title>std::panicking::try (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1397" width="3.3783%" height="15" fill="rgb(249,80,12)"/><text x="91.4214%" y="1407.50">std..</text></g><g><title>std::panicking::try::do_call (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1381" width="3.3783%" height="15" fill="rgb(221,65,9)"/><text x="91.4214%" y="1391.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1365" width="3.3783%" height="15" fill="rgb(235,49,36)"/><text x="91.4214%" y="1375.50">&lt;st..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1349" width="3.3783%" height="15" fill="rgb(225,32,20)"/><text x="91.4214%" y="1359.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1333" width="3.3783%" height="15" fill="rgb(215,141,46)"/><text x="91.4214%" y="1343.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (1,500 samples, 3.38%)</title><rect x="91.1714%" y="1317" width="3.3783%" height="15" fill="rgb(250,160,47)"/><text x="91.4214%" y="1327.50">tok..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (1,499 samples, 3.38%)</title><rect x="91.1736%" y="1301" width="3.3761%" height="15" fill="rgb(216,222,40)"/><text x="91.4236%" y="1311.50">tok..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1285" width="3.1959%" height="15" fill="rgb(234,217,39)"/><text x="91.6038%" y="1295.50">tok..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1269" width="3.1959%" height="15" fill="rgb(207,178,40)"/><text x="91.6038%" y="1279.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1253" width="3.1959%" height="15" fill="rgb(221,136,13)"/><text x="91.6038%" y="1263.50">tok..</text></g><g><title>std::panic::catch_unwind (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1237" width="3.1959%" height="15" fill="rgb(249,199,10)"/><text x="91.6038%" y="1247.50">std..</text></g><g><title>std::panicking::try (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1221" width="3.1959%" height="15" fill="rgb(249,222,13)"/><text x="91.6038%" y="1231.50">std..</text></g><g><title>std::panicking::try::do_call (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1205" width="3.1959%" height="15" fill="rgb(244,185,38)"/><text x="91.6038%" y="1215.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1189" width="3.1959%" height="15" fill="rgb(236,202,9)"/><text x="91.6038%" y="1199.50">&lt;st..</text></g><g><title>core::ops::function::FnOnce::call_once (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1173" width="3.1959%" height="15" fill="rgb(250,229,37)"/><text x="91.6038%" y="1183.50">cor..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1157" width="3.1959%" height="15" fill="rgb(206,174,23)"/><text x="91.6038%" y="1167.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1141" width="3.1959%" height="15" fill="rgb(211,33,43)"/><text x="91.6038%" y="1151.50">tok..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1125" width="3.1959%" height="15" fill="rgb(245,58,50)"/><text x="91.6038%" y="1135.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1109" width="3.1959%" height="15" fill="rgb(244,68,36)"/><text x="91.6038%" y="1119.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1093" width="3.1959%" height="15" fill="rgb(232,229,15)"/><text x="91.6038%" y="1103.50">&lt;to..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::_{{closure}} (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1077" width="3.1959%" height="15" fill="rgb(254,30,23)"/><text x="91.6038%" y="1087.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::run (1,419 samples, 3.20%)</title><rect x="91.3538%" y="1061" width="3.1959%" height="15" fill="rgb(235,160,14)"/><text x="91.6038%" y="1071.50">tok..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (1,418 samples, 3.19%)</title><rect x="91.3561%" y="1045" width="3.1936%" height="15" fill="rgb(212,155,44)"/><text x="91.6061%" y="1055.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::run::_{{closure}} (1,418 samples, 3.19%)</title><rect x="91.3561%" y="1029" width="3.1936%" height="15" fill="rgb(226,2,50)"/><text x="91.6061%" y="1039.50">tok..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (1,418 samples, 3.19%)</title><rect x="91.3561%" y="1013" width="3.1936%" height="15" fill="rgb(234,177,6)"/><text x="91.6061%" y="1023.50">tok..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,503 samples, 3.39%)</title><rect x="91.1691%" y="1477" width="3.3851%" height="15" fill="rgb(217,24,9)"/><text x="91.4191%" y="1487.50">&lt;al..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,503 samples, 3.39%)</title><rect x="91.1691%" y="1461" width="3.3851%" height="15" fill="rgb(220,13,46)"/><text x="91.4191%" y="1471.50">&lt;al..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1,502 samples, 3.38%)</title><rect x="91.1714%" y="1445" width="3.3828%" height="15" fill="rgb(239,221,27)"/><text x="91.4214%" y="1455.50">cor..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (1,502 samples, 3.38%)</title><rect x="91.1714%" y="1429" width="3.3828%" height="15" fill="rgb(222,198,25)"/><text x="91.4214%" y="1439.50">std..</text></g><g><title>__GI___clone (1,547 samples, 3.48%)</title><rect x="91.1016%" y="1525" width="3.4842%" height="15" fill="rgb(211,99,13)"/><text x="91.3516%" y="1535.50">__G..</text></g><g><title>start_thread (1,547 samples, 3.48%)</title><rect x="91.1016%" y="1509" width="3.4842%" height="15" fill="rgb(232,111,31)"/><text x="91.3516%" y="1519.50">sta..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,517 samples, 3.42%)</title><rect x="91.1691%" y="1493" width="3.4166%" height="15" fill="rgb(245,82,37)"/><text x="91.4191%" y="1503.50">std..</text></g><g><title>_aesni_ctr32_ghash_6x (1,790 samples, 4.03%)</title><rect x="94.5902%" y="1525" width="4.0314%" height="15" fill="rgb(227,149,46)"/><text x="94.8402%" y="1535.50">_aes..</text></g><g><title>apic_timer_interrupt (534 samples, 1.20%)</title><rect x="98.6217%" y="1525" width="1.2027%" height="15" fill="rgb(218,36,50)"/><text x="98.8717%" y="1535.50"></text></g><g><title>all (44,401 samples, 100%)</title><rect x="0.0000%" y="1557" width="100.0000%" height="15" fill="rgb(226,80,48)"/><text x="0.2500%" y="1567.50"></text></g><g><title>tokio-runtime-w (44,102 samples, 99.33%)</title><rect x="0.6734%" y="1541" width="99.3266%" height="15" fill="rgb(238,224,15)"/><text x="0.9234%" y="1551.50">tokio-runtime-w</text></g></svg></svg>