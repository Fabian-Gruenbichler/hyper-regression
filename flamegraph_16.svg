<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1702" onload="init(evt)" viewBox="0 0 1200 1702" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1702" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1685.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1685.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (38 samples, 0.24%)</title><rect x="0.1071%" y="1621" width="0.2393%" height="15" fill="rgb(227,0,7)"/><text x="0.3571%" y="1631.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.18%)</title><rect x="0.4913%" y="1413" width="0.1764%" height="15" fill="rgb(217,0,24)"/><text x="0.7413%" y="1423.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (28 samples, 0.18%)</title><rect x="0.4913%" y="1397" width="0.1764%" height="15" fill="rgb(221,193,54)"/><text x="0.7413%" y="1407.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (26 samples, 0.16%)</title><rect x="0.5039%" y="1381" width="0.1638%" height="15" fill="rgb(248,212,6)"/><text x="0.7539%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place (29 samples, 0.18%)</title><rect x="0.4913%" y="1445" width="0.1827%" height="15" fill="rgb(208,68,35)"/><text x="0.7413%" y="1455.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.18%)</title><rect x="0.4913%" y="1429" width="0.1827%" height="15" fill="rgb(232,128,0)"/><text x="0.7413%" y="1439.50"></text></g><g><title>__memmove_avx_unaligned_erms (39 samples, 0.25%)</title><rect x="0.9385%" y="1413" width="0.2456%" height="15" fill="rgb(207,160,47)"/><text x="1.1885%" y="1423.50"></text></g><g><title>h2::proto::streams::buffer::Deque::pop_front (92 samples, 0.58%)</title><rect x="0.9322%" y="1429" width="0.5795%" height="15" fill="rgb(228,23,34)"/><text x="1.1822%" y="1439.50"></text></g><g><title>slab::Slab&lt;T&gt;::remove (51 samples, 0.32%)</title><rect x="1.1904%" y="1413" width="0.3212%" height="15" fill="rgb(218,30,26)"/><text x="1.4404%" y="1423.50"></text></g><g><title>core::mem::replace (48 samples, 0.30%)</title><rect x="1.2093%" y="1397" width="0.3023%" height="15" fill="rgb(220,122,19)"/><text x="1.4593%" y="1407.50"></text></g><g><title>core::mem::swap (47 samples, 0.30%)</title><rect x="1.2156%" y="1381" width="0.2960%" height="15" fill="rgb(250,228,42)"/><text x="1.4656%" y="1391.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (47 samples, 0.30%)</title><rect x="1.2156%" y="1365" width="0.2960%" height="15" fill="rgb(240,193,28)"/><text x="1.4656%" y="1375.50"></text></g><g><title>core::ptr::swap_nonoverlapping (47 samples, 0.30%)</title><rect x="1.2156%" y="1349" width="0.2960%" height="15" fill="rgb(216,20,37)"/><text x="1.4656%" y="1359.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (47 samples, 0.30%)</title><rect x="1.2156%" y="1333" width="0.2960%" height="15" fill="rgb(206,188,39)"/><text x="1.4656%" y="1343.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.30%)</title><rect x="1.2156%" y="1317" width="0.2960%" height="15" fill="rgb(217,207,13)"/><text x="1.4656%" y="1327.50"></text></g><g><title>h2::proto::streams::recv::Recv::poll_data (139 samples, 0.88%)</title><rect x="0.6739%" y="1445" width="0.8755%" height="15" fill="rgb(231,73,38)"/><text x="0.9239%" y="1455.50"></text></g><g><title>__GI___pthread_mutex_lock (98 samples, 0.62%)</title><rect x="1.5746%" y="1397" width="0.6172%" height="15" fill="rgb(225,20,46)"/><text x="1.8246%" y="1407.50"></text></g><g><title>&lt;h2::share::RecvStream as futures_core::stream::Stream&gt;::poll_next (280 samples, 1.76%)</title><rect x="0.4535%" y="1493" width="1.7636%" height="15" fill="rgb(210,31,41)"/><text x="0.7035%" y="1503.50"></text></g><g><title>h2::share::RecvStream::poll_data (280 samples, 1.76%)</title><rect x="0.4535%" y="1477" width="1.7636%" height="15" fill="rgb(221,200,47)"/><text x="0.7035%" y="1487.50"></text></g><g><title>h2::proto::streams::streams::OpaqueStreamRef::poll_data (279 samples, 1.76%)</title><rect x="0.4598%" y="1461" width="1.7573%" height="15" fill="rgb(226,26,5)"/><text x="0.7098%" y="1471.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (106 samples, 0.67%)</title><rect x="1.5494%" y="1445" width="0.6676%" height="15" fill="rgb(249,33,26)"/><text x="1.7994%" y="1455.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (105 samples, 0.66%)</title><rect x="1.5557%" y="1429" width="0.6613%" height="15" fill="rgb(235,183,28)"/><text x="1.8057%" y="1439.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (102 samples, 0.64%)</title><rect x="1.5746%" y="1413" width="0.6424%" height="15" fill="rgb(221,5,38)"/><text x="1.8246%" y="1423.50"></text></g><g><title>__GI___libc_free (18 samples, 0.11%)</title><rect x="2.3808%" y="1285" width="0.1134%" height="15" fill="rgb(247,18,42)"/><text x="2.6308%" y="1295.50"></text></g><g><title>do_futex (25 samples, 0.16%)</title><rect x="2.9792%" y="1205" width="0.1575%" height="15" fill="rgb(241,131,45)"/><text x="3.2292%" y="1215.50"></text></g><g><title>futex_wake (23 samples, 0.14%)</title><rect x="2.9917%" y="1189" width="0.1449%" height="15" fill="rgb(249,31,29)"/><text x="3.2417%" y="1199.50"></text></g><g><title>__x64_sys_futex (26 samples, 0.16%)</title><rect x="2.9792%" y="1221" width="0.1638%" height="15" fill="rgb(225,111,53)"/><text x="3.2292%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place (136 samples, 0.86%)</title><rect x="2.3241%" y="1397" width="0.8566%" height="15" fill="rgb(238,160,17)"/><text x="2.5741%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place (136 samples, 0.86%)</title><rect x="2.3241%" y="1381" width="0.8566%" height="15" fill="rgb(214,148,48)"/><text x="2.5741%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place (136 samples, 0.86%)</title><rect x="2.3241%" y="1365" width="0.8566%" height="15" fill="rgb(232,36,49)"/><text x="2.5741%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place (136 samples, 0.86%)</title><rect x="2.3241%" y="1349" width="0.8566%" height="15" fill="rgb(209,103,24)"/><text x="2.5741%" y="1359.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.86%)</title><rect x="2.3241%" y="1333" width="0.8566%" height="15" fill="rgb(229,88,8)"/><text x="2.5741%" y="1343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (127 samples, 0.80%)</title><rect x="2.3808%" y="1317" width="0.7999%" height="15" fill="rgb(213,181,19)"/><text x="2.6308%" y="1327.50"></text></g><g><title>alloc::alloc::dealloc (127 samples, 0.80%)</title><rect x="2.3808%" y="1301" width="0.7999%" height="15" fill="rgb(254,191,54)"/><text x="2.6308%" y="1311.50"></text></g><g><title>_int_free (107 samples, 0.67%)</title><rect x="2.5068%" y="1285" width="0.6739%" height="15" fill="rgb(241,83,37)"/><text x="2.7568%" y="1295.50"></text></g><g><title>__lll_unlock_wake_private (35 samples, 0.22%)</title><rect x="2.9603%" y="1269" width="0.2204%" height="15" fill="rgb(233,36,39)"/><text x="3.2103%" y="1279.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (34 samples, 0.21%)</title><rect x="2.9666%" y="1253" width="0.2141%" height="15" fill="rgb(226,3,54)"/><text x="3.2166%" y="1263.50"></text></g><g><title>do_syscall_64 (33 samples, 0.21%)</title><rect x="2.9729%" y="1237" width="0.2078%" height="15" fill="rgb(245,192,40)"/><text x="3.2229%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place (166 samples, 1.05%)</title><rect x="2.2170%" y="1493" width="1.0455%" height="15" fill="rgb(238,167,29)"/><text x="2.4670%" y="1503.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (166 samples, 1.05%)</title><rect x="2.2170%" y="1477" width="1.0455%" height="15" fill="rgb(232,182,51)"/><text x="2.4670%" y="1487.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (149 samples, 0.94%)</title><rect x="2.3241%" y="1461" width="0.9385%" height="15" fill="rgb(231,60,39)"/><text x="2.5741%" y="1471.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (149 samples, 0.94%)</title><rect x="2.3241%" y="1445" width="0.9385%" height="15" fill="rgb(208,69,12)"/><text x="2.5741%" y="1455.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (149 samples, 0.94%)</title><rect x="2.3241%" y="1429" width="0.9385%" height="15" fill="rgb(235,93,37)"/><text x="2.5741%" y="1439.50"></text></g><g><title>bytes::bytes_mut::release_shared (149 samples, 0.94%)</title><rect x="2.3241%" y="1413" width="0.9385%" height="15" fill="rgb(213,116,39)"/><text x="2.5741%" y="1423.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.29%)</title><rect x="3.2689%" y="1429" width="0.2897%" height="15" fill="rgb(222,207,29)"/><text x="3.5189%" y="1439.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (46 samples, 0.29%)</title><rect x="3.2689%" y="1413" width="0.2897%" height="15" fill="rgb(206,96,30)"/><text x="3.5189%" y="1423.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (46 samples, 0.29%)</title><rect x="3.2689%" y="1397" width="0.2897%" height="15" fill="rgb(218,138,4)"/><text x="3.5189%" y="1407.50"></text></g><g><title>core::ptr::drop_in_place (47 samples, 0.30%)</title><rect x="3.2689%" y="1461" width="0.2960%" height="15" fill="rgb(250,191,14)"/><text x="3.5189%" y="1471.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.30%)</title><rect x="3.2689%" y="1445" width="0.2960%" height="15" fill="rgb(239,60,40)"/><text x="3.5189%" y="1455.50"></text></g><g><title>h2::proto::streams::recv::Recv::release_capacity (35 samples, 0.22%)</title><rect x="3.5649%" y="1461" width="0.2204%" height="15" fill="rgb(206,27,48)"/><text x="3.8149%" y="1471.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (546 samples, 3.44%)</title><rect x="0.4157%" y="1525" width="3.4389%" height="15" fill="rgb(225,35,8)"/><text x="0.6657%" y="1535.50">&lt;F ..</text></g><g><title>&lt;h2s_client::Process as core::future::future::Future&gt;::poll (544 samples, 3.43%)</title><rect x="0.4283%" y="1509" width="3.4263%" height="15" fill="rgb(250,213,24)"/><text x="0.6783%" y="1519.50">&lt;h2..</text></g><g><title>h2::share::FlowControl::release_capacity (94 samples, 0.59%)</title><rect x="3.2626%" y="1493" width="0.5921%" height="15" fill="rgb(247,123,22)"/><text x="3.5126%" y="1503.50"></text></g><g><title>h2::proto::streams::streams::OpaqueStreamRef::release_capacity (94 samples, 0.59%)</title><rect x="3.2626%" y="1477" width="0.5921%" height="15" fill="rgb(231,138,38)"/><text x="3.5126%" y="1487.50"></text></g><g><title>&lt;futures_util::future::try_future::AndThen&lt;Fut1,Fut2,F&gt; as core::future::future::Future&gt;::poll (555 samples, 3.50%)</title><rect x="0.4094%" y="1573" width="3.4956%" height="15" fill="rgb(231,145,46)"/><text x="0.6594%" y="1583.50">&lt;fu..</text></g><g><title>&lt;futures_util::future::try_future::TryFlatten&lt;Fut1,Fut2&gt; as core::future::future::Future&gt;::poll (555 samples, 3.50%)</title><rect x="0.4094%" y="1557" width="3.4956%" height="15" fill="rgb(251,118,11)"/><text x="0.6594%" y="1567.50">&lt;fu..</text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (554 samples, 3.49%)</title><rect x="0.4157%" y="1541" width="3.4893%" height="15" fill="rgb(217,147,25)"/><text x="0.6657%" y="1551.50">&lt;fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (578 samples, 3.64%)</title><rect x="0.3716%" y="1605" width="3.6405%" height="15" fill="rgb(247,81,37)"/><text x="0.6216%" y="1615.50">&lt;cor..</text></g><g><title>h2s_client::main::_{{closure}} (574 samples, 3.62%)</title><rect x="0.3968%" y="1589" width="3.6153%" height="15" fill="rgb(209,12,38)"/><text x="0.6468%" y="1599.50">h2s_..</text></g><g><title>[unknown] (598 samples, 3.77%)</title><rect x="0.3716%" y="1621" width="3.7665%" height="15" fill="rgb(227,1,9)"/><text x="0.6216%" y="1631.50">[unk..</text></g><g><title>ret_from_fork (54 samples, 0.34%)</title><rect x="4.1381%" y="1605" width="0.3401%" height="15" fill="rgb(248,47,43)"/><text x="4.3881%" y="1615.50"></text></g><g><title>schedule_tail (54 samples, 0.34%)</title><rect x="4.1381%" y="1589" width="0.3401%" height="15" fill="rgb(221,10,30)"/><text x="4.3881%" y="1599.50"></text></g><g><title>finish_task_switch (53 samples, 0.33%)</title><rect x="4.1444%" y="1573" width="0.3338%" height="15" fill="rgb(210,229,1)"/><text x="4.3944%" y="1583.50"></text></g><g><title>__perf_event_task_sched_in (52 samples, 0.33%)</title><rect x="4.1507%" y="1557" width="0.3275%" height="15" fill="rgb(222,148,37)"/><text x="4.4007%" y="1567.50"></text></g><g><title>perf_pmu_enable.part.111 (52 samples, 0.33%)</title><rect x="4.1507%" y="1541" width="0.3275%" height="15" fill="rgb(234,67,33)"/><text x="4.4007%" y="1551.50"></text></g><g><title>x86_pmu_enable (52 samples, 0.33%)</title><rect x="4.1507%" y="1525" width="0.3275%" height="15" fill="rgb(247,98,35)"/><text x="4.4007%" y="1535.50"></text></g><g><title>intel_pmu_enable_all (52 samples, 0.33%)</title><rect x="4.1507%" y="1509" width="0.3275%" height="15" fill="rgb(247,138,52)"/><text x="4.4007%" y="1519.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (52 samples, 0.33%)</title><rect x="4.1507%" y="1493" width="0.3275%" height="15" fill="rgb(213,79,30)"/><text x="4.4007%" y="1503.50"></text></g><g><title>native_write_msr (52 samples, 0.33%)</title><rect x="4.1507%" y="1477" width="0.3275%" height="15" fill="rgb(246,177,23)"/><text x="4.4007%" y="1487.50"></text></g><g><title>__GI___clone (62 samples, 0.39%)</title><rect x="4.1381%" y="1621" width="0.3905%" height="15" fill="rgb(230,62,27)"/><text x="4.3881%" y="1631.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (42 samples, 0.26%)</title><rect x="4.6860%" y="1269" width="0.2645%" height="15" fill="rgb(216,154,8)"/><text x="4.9360%" y="1279.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.26%)</title><rect x="4.6860%" y="1253" width="0.2645%" height="15" fill="rgb(244,35,45)"/><text x="4.9360%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (53 samples, 0.33%)</title><rect x="5.0324%" y="1157" width="0.3338%" height="15" fill="rgb(251,115,12)"/><text x="5.2824%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.33%)</title><rect x="5.0324%" y="1141" width="0.3338%" height="15" fill="rgb(240,54,50)"/><text x="5.2824%" y="1151.50"></text></g><g><title>entry_SYSCALL_64 (17 samples, 0.11%)</title><rect x="5.4670%" y="1125" width="0.1071%" height="15" fill="rgb(233,84,52)"/><text x="5.7170%" y="1135.50"></text></g><g><title>_raw_spin_lock (24 samples, 0.15%)</title><rect x="6.2921%" y="981" width="0.1512%" height="15" fill="rgb(207,117,47)"/><text x="6.5421%" y="991.50"></text></g><g><title>__perf_event_task_sched_out (54 samples, 0.34%)</title><rect x="6.2606%" y="997" width="0.3401%" height="15" fill="rgb(249,43,39)"/><text x="6.5106%" y="1007.50"></text></g><g><title>task_ctx_sched_out (24 samples, 0.15%)</title><rect x="6.4496%" y="981" width="0.1512%" height="15" fill="rgb(209,38,44)"/><text x="6.6996%" y="991.50"></text></g><g><title>ctx_sched_out (23 samples, 0.14%)</title><rect x="6.4559%" y="965" width="0.1449%" height="15" fill="rgb(236,212,23)"/><text x="6.7059%" y="975.50"></text></g><g><title>update_cfs_group (30 samples, 0.19%)</title><rect x="7.1613%" y="933" width="0.1890%" height="15" fill="rgb(242,79,21)"/><text x="7.4113%" y="943.50"></text></g><g><title>update_curr (45 samples, 0.28%)</title><rect x="7.3503%" y="933" width="0.2834%" height="15" fill="rgb(211,96,35)"/><text x="7.6003%" y="943.50"></text></g><g><title>__update_load_avg_cfs_rq (18 samples, 0.11%)</title><rect x="7.6967%" y="917" width="0.1134%" height="15" fill="rgb(253,215,40)"/><text x="7.9467%" y="927.50"></text></g><g><title>update_load_avg (45 samples, 0.28%)</title><rect x="7.6337%" y="933" width="0.2834%" height="15" fill="rgb(211,81,21)"/><text x="7.8837%" y="943.50"></text></g><g><title>__update_load_avg_se (17 samples, 0.11%)</title><rect x="7.8100%" y="917" width="0.1071%" height="15" fill="rgb(208,190,38)"/><text x="8.0600%" y="927.50"></text></g><g><title>dequeue_entity (191 samples, 1.20%)</title><rect x="6.7330%" y="949" width="1.2030%" height="15" fill="rgb(235,213,38)"/><text x="6.9830%" y="959.50"></text></g><g><title>dequeue_task_fair (211 samples, 1.33%)</title><rect x="6.6385%" y="965" width="1.3290%" height="15" fill="rgb(237,122,38)"/><text x="6.8885%" y="975.50"></text></g><g><title>deactivate_task (495 samples, 3.12%)</title><rect x="6.6196%" y="997" width="3.1177%" height="15" fill="rgb(244,218,35)"/><text x="6.8696%" y="1007.50">dea..</text></g><g><title>dequeue_task (494 samples, 3.11%)</title><rect x="6.6259%" y="981" width="3.1114%" height="15" fill="rgb(240,68,47)"/><text x="6.8759%" y="991.50">deq..</text></g><g><title>psi_task_change (281 samples, 1.77%)</title><rect x="7.9675%" y="965" width="1.7699%" height="15" fill="rgb(210,16,53)"/><text x="8.2175%" y="975.50"></text></g><g><title>record_times (27 samples, 0.17%)</title><rect x="9.5673%" y="949" width="0.1701%" height="15" fill="rgb(235,124,12)"/><text x="9.8173%" y="959.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (203 samples, 1.28%)</title><rect x="10.4743%" y="917" width="1.2786%" height="15" fill="rgb(224,169,11)"/><text x="10.7243%" y="927.50"></text></g><g><title>native_write_msr (200 samples, 1.26%)</title><rect x="10.4932%" y="901" width="1.2597%" height="15" fill="rgb(250,166,2)"/><text x="10.7432%" y="911.50"></text></g><g><title>__perf_event_task_sched_in (213 samples, 1.34%)</title><rect x="10.4365%" y="981" width="1.3416%" height="15" fill="rgb(242,216,29)"/><text x="10.6865%" y="991.50"></text></g><g><title>perf_pmu_enable.part.111 (208 samples, 1.31%)</title><rect x="10.4680%" y="965" width="1.3101%" height="15" fill="rgb(230,116,27)"/><text x="10.7180%" y="975.50"></text></g><g><title>x86_pmu_enable (208 samples, 1.31%)</title><rect x="10.4680%" y="949" width="1.3101%" height="15" fill="rgb(228,99,48)"/><text x="10.7180%" y="959.50"></text></g><g><title>intel_pmu_enable_all (207 samples, 1.30%)</title><rect x="10.4743%" y="933" width="1.3038%" height="15" fill="rgb(253,11,6)"/><text x="10.7243%" y="943.50"></text></g><g><title>finish_task_switch (324 samples, 2.04%)</title><rect x="9.7437%" y="997" width="2.0407%" height="15" fill="rgb(247,143,39)"/><text x="9.9937%" y="1007.50">f..</text></g><g><title>pick_next_task_fair (56 samples, 0.35%)</title><rect x="11.7906%" y="997" width="0.3527%" height="15" fill="rgb(236,97,10)"/><text x="12.0406%" y="1007.50"></text></g><g><title>newidle_balance (49 samples, 0.31%)</title><rect x="11.8347%" y="981" width="0.3086%" height="15" fill="rgb(233,208,19)"/><text x="12.0847%" y="991.50"></text></g><g><title>pick_next_task_idle (18 samples, 0.11%)</title><rect x="12.1434%" y="997" width="0.1134%" height="15" fill="rgb(216,164,2)"/><text x="12.3934%" y="1007.50"></text></g><g><title>__schedule (1,026 samples, 6.46%)</title><rect x="5.9394%" y="1013" width="6.4622%" height="15" fill="rgb(220,129,5)"/><text x="6.1894%" y="1023.50">__schedu..</text></g><g><title>futex_wait_queue_me (1,056 samples, 6.65%)</title><rect x="5.7819%" y="1045" width="6.6511%" height="15" fill="rgb(242,17,10)"/><text x="6.0319%" y="1055.50">futex_wai..</text></g><g><title>schedule (1,031 samples, 6.49%)</title><rect x="5.9394%" y="1029" width="6.4937%" height="15" fill="rgb(242,107,0)"/><text x="6.1894%" y="1039.50">schedule</text></g><g><title>get_futex_key (62 samples, 0.39%)</title><rect x="12.5716%" y="1029" width="0.3905%" height="15" fill="rgb(251,28,31)"/><text x="12.8216%" y="1039.50"></text></g><g><title>get_futex_key_refs.isra.10 (59 samples, 0.37%)</title><rect x="12.5905%" y="1013" width="0.3716%" height="15" fill="rgb(233,223,10)"/><text x="12.8405%" y="1023.50"></text></g><g><title>futex_wait_setup (98 samples, 0.62%)</title><rect x="12.4331%" y="1045" width="0.6172%" height="15" fill="rgb(215,21,27)"/><text x="12.6831%" y="1055.50"></text></g><g><title>do_futex (1,178 samples, 7.42%)</title><rect x="5.6623%" y="1077" width="7.4195%" height="15" fill="rgb(232,23,21)"/><text x="5.9123%" y="1087.50">do_futex</text></g><g><title>futex_wait (1,171 samples, 7.38%)</title><rect x="5.7064%" y="1061" width="7.3754%" height="15" fill="rgb(244,5,23)"/><text x="5.9564%" y="1071.50">futex_wait</text></g><g><title>__x64_sys_futex (1,183 samples, 7.45%)</title><rect x="5.6434%" y="1093" width="7.4510%" height="15" fill="rgb(226,81,46)"/><text x="5.8934%" y="1103.50">__x64_sys_..</text></g><g><title>do_syscall_64 (1,201 samples, 7.56%)</title><rect x="5.6308%" y="1109" width="7.5644%" height="15" fill="rgb(247,70,30)"/><text x="5.8808%" y="1119.50">do_syscall..</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,211 samples, 7.63%)</title><rect x="5.5741%" y="1125" width="7.6274%" height="15" fill="rgb(212,68,19)"/><text x="5.8241%" y="1135.50">entry_SYSC..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (1,305 samples, 8.22%)</title><rect x="5.0261%" y="1173" width="8.2194%" height="15" fill="rgb(240,187,13)"/><text x="5.2761%" y="1183.50">&lt;parking_lo..</text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (1,251 samples, 7.88%)</title><rect x="5.3663%" y="1157" width="7.8793%" height="15" fill="rgb(223,113,26)"/><text x="5.6163%" y="1167.50">parking_lot..</text></g><g><title>syscall (1,251 samples, 7.88%)</title><rect x="5.3663%" y="1141" width="7.8793%" height="15" fill="rgb(206,192,2)"/><text x="5.6163%" y="1151.50">syscall</text></g><g><title>parking_lot_core::parking_lot::lock_bucket (29 samples, 0.18%)</title><rect x="13.2645%" y="1173" width="0.1827%" height="15" fill="rgb(241,108,4)"/><text x="13.5145%" y="1183.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (27 samples, 0.17%)</title><rect x="13.2771%" y="1157" width="0.1701%" height="15" fill="rgb(247,173,49)"/><text x="13.5271%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (27 samples, 0.17%)</title><rect x="13.2771%" y="1141" width="0.1701%" height="15" fill="rgb(224,114,35)"/><text x="13.5271%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (27 samples, 0.17%)</title><rect x="13.2771%" y="1125" width="0.1701%" height="15" fill="rgb(245,159,27)"/><text x="13.5271%" y="1135.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (1,357 samples, 8.55%)</title><rect x="4.9506%" y="1269" width="8.5470%" height="15" fill="rgb(245,172,44)"/><text x="5.2006%" y="1279.50">tokio::loom:..</text></g><g><title>parking_lot::condvar::Condvar::wait (1,357 samples, 8.55%)</title><rect x="4.9506%" y="1253" width="8.5470%" height="15" fill="rgb(236,23,11)"/><text x="5.2006%" y="1263.50">parking_lot:..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1,356 samples, 8.54%)</title><rect x="4.9569%" y="1237" width="8.5407%" height="15" fill="rgb(205,117,38)"/><text x="5.2069%" y="1247.50">parking_lot:..</text></g><g><title>parking_lot_core::parking_lot::park (1,345 samples, 8.47%)</title><rect x="5.0261%" y="1221" width="8.4714%" height="15" fill="rgb(237,72,25)"/><text x="5.2761%" y="1231.50">parking_lot_..</text></g><g><title>parking_lot_core::parking_lot::with_thread_data (1,345 samples, 8.47%)</title><rect x="5.0261%" y="1205" width="8.4714%" height="15" fill="rgb(244,70,9)"/><text x="5.2761%" y="1215.50">parking_lot_..</text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (1,345 samples, 8.47%)</title><rect x="5.0261%" y="1189" width="8.4714%" height="15" fill="rgb(217,125,39)"/><text x="5.2761%" y="1199.50">parking_lot_..</text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (1,419 samples, 8.94%)</title><rect x="4.6356%" y="1365" width="8.9375%" height="15" fill="rgb(235,36,10)"/><text x="4.8856%" y="1375.50">&lt;tokio::park:..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current (1,419 samples, 8.94%)</title><rect x="4.6356%" y="1349" width="8.9375%" height="15" fill="rgb(251,123,47)"/><text x="4.8856%" y="1359.50">tokio::park::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,419 samples, 8.94%)</title><rect x="4.6356%" y="1333" width="8.9375%" height="15" fill="rgb(221,13,13)"/><text x="4.8856%" y="1343.50">std::thread::..</text></g><g><title>tokio::park::thread::CachedParkThread::with_current::_{{closure}} (1,419 samples, 8.94%)</title><rect x="4.6356%" y="1317" width="8.9375%" height="15" fill="rgb(238,131,9)"/><text x="4.8856%" y="1327.50">tokio::park::..</text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park::_{{closure}} (1,419 samples, 8.94%)</title><rect x="4.6356%" y="1301" width="8.9375%" height="15" fill="rgb(211,50,8)"/><text x="4.8856%" y="1311.50">&lt;tokio::park:..</text></g><g><title>tokio::park::thread::Inner::park (1,417 samples, 8.92%)</title><rect x="4.6482%" y="1285" width="8.9249%" height="15" fill="rgb(245,182,24)"/><text x="4.8982%" y="1295.50">tokio::park::..</text></g><g><title>__libc_start_main (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1605" width="9.0823%" height="15" fill="rgb(242,14,37)"/><text x="4.7786%" y="1615.50">__libc_start_..</text></g><g><title>main (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1589" width="9.0823%" height="15" fill="rgb(246,228,12)"/><text x="4.7786%" y="1599.50">main</text></g><g><title>std::rt::lang_start_internal (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1573" width="9.0823%" height="15" fill="rgb(213,55,15)"/><text x="4.7786%" y="1583.50">std::rt::lang..</text></g><g><title>std::panic::catch_unwind (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1557" width="9.0823%" height="15" fill="rgb(209,9,3)"/><text x="4.7786%" y="1567.50">std::panic::c..</text></g><g><title>std::panicking::try (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1541" width="9.0823%" height="15" fill="rgb(230,59,30)"/><text x="4.7786%" y="1551.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1525" width="9.0823%" height="15" fill="rgb(209,121,21)"/><text x="4.7786%" y="1535.50">std::panickin..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1509" width="9.0823%" height="15" fill="rgb(220,109,13)"/><text x="4.7786%" y="1519.50">core::ops::fu..</text></g><g><title>std::rt::lang_start::_{{closure}} (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1493" width="9.0823%" height="15" fill="rgb(232,18,1)"/><text x="4.7786%" y="1503.50">std::rt::lang..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1477" width="9.0823%" height="15" fill="rgb(215,41,42)"/><text x="4.7786%" y="1487.50">std::sys_comm..</text></g><g><title>core::ops::function::FnOnce::call_once (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1461" width="9.0823%" height="15" fill="rgb(224,123,36)"/><text x="4.7786%" y="1471.50">core::ops::fu..</text></g><g><title>h2s_client::main (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1445" width="9.0823%" height="15" fill="rgb(240,125,3)"/><text x="4.7786%" y="1455.50">h2s_client::m..</text></g><g><title>tokio::runtime::Runtime::block_on (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1429" width="9.0823%" height="15" fill="rgb(205,98,50)"/><text x="4.7786%" y="1439.50">tokio::runtim..</text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1413" width="9.0823%" height="15" fill="rgb(205,185,37)"/><text x="4.7786%" y="1423.50">tokio::runtim..</text></g><g><title>tokio::runtime::enter::Enter::block_on (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1397" width="9.0823%" height="15" fill="rgb(238,207,15)"/><text x="4.7786%" y="1407.50">tokio::runtim..</text></g><g><title>tokio::park::thread::CachedParkThread::block_on (1,442 samples, 9.08%)</title><rect x="4.5286%" y="1381" width="9.0823%" height="15" fill="rgb(213,199,42)"/><text x="4.7786%" y="1391.50">tokio::park::..</text></g><g><title>_start (1,443 samples, 9.09%)</title><rect x="4.5286%" y="1621" width="9.0886%" height="15" fill="rgb(235,201,11)"/><text x="4.7786%" y="1631.50">_start</text></g><g><title>h2s-client (2,187 samples, 13.77%)</title><rect x="0.0000%" y="1637" width="13.7746%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="1647.50">h2s-client</text></g><g><title>&lt;tracing_core::callsite::REGISTRY as core::ops::deref::Deref&gt;::deref::__stability::LAZY (41 samples, 0.26%)</title><rect x="13.8187%" y="1621" width="0.2582%" height="15" fill="rgb(241,35,35)"/><text x="14.0687%" y="1631.50"></text></g><g><title>[[heap]] (123 samples, 0.77%)</title><rect x="14.1022%" y="1621" width="0.7747%" height="15" fill="rgb(243,32,47)"/><text x="14.3522%" y="1631.50"></text></g><g><title>[anon] (102 samples, 0.64%)</title><rect x="14.8769%" y="1621" width="0.6424%" height="15" fill="rgb(247,202,23)"/><text x="15.1269%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.10%)</title><rect x="16.0547%" y="1605" width="0.1008%" height="15" fill="rgb(219,102,11)"/><text x="16.3047%" y="1615.50"></text></g><g><title>ssl3_write_pending (19 samples, 0.12%)</title><rect x="16.3192%" y="1397" width="0.1197%" height="15" fill="rgb(243,110,44)"/><text x="16.5692%" y="1407.50"></text></g><g><title>BIO_write (19 samples, 0.12%)</title><rect x="16.3192%" y="1381" width="0.1197%" height="15" fill="rgb(222,74,54)"/><text x="16.5692%" y="1391.50"></text></g><g><title>bio_write_intern (19 samples, 0.12%)</title><rect x="16.3192%" y="1365" width="0.1197%" height="15" fill="rgb(216,99,12)"/><text x="16.5692%" y="1375.50"></text></g><g><title>bio_write_intern (19 samples, 0.12%)</title><rect x="16.3192%" y="1349" width="0.1197%" height="15" fill="rgb(226,22,26)"/><text x="16.5692%" y="1359.50"></text></g><g><title>bwrite_conv (19 samples, 0.12%)</title><rect x="16.3192%" y="1333" width="0.1197%" height="15" fill="rgb(217,163,10)"/><text x="16.5692%" y="1343.50"></text></g><g><title>openssl::ssl::bio::bwrite (19 samples, 0.12%)</title><rect x="16.3192%" y="1317" width="0.1197%" height="15" fill="rgb(213,25,53)"/><text x="16.5692%" y="1327.50"></text></g><g><title>std::panic::catch_unwind (19 samples, 0.12%)</title><rect x="16.3192%" y="1301" width="0.1197%" height="15" fill="rgb(252,105,26)"/><text x="16.5692%" y="1311.50"></text></g><g><title>std::panicking::try (19 samples, 0.12%)</title><rect x="16.3192%" y="1285" width="0.1197%" height="15" fill="rgb(220,39,43)"/><text x="16.5692%" y="1295.50"></text></g><g><title>std::panicking::try::do_call (19 samples, 0.12%)</title><rect x="16.3192%" y="1269" width="0.1197%" height="15" fill="rgb(229,68,48)"/><text x="16.5692%" y="1279.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (19 samples, 0.12%)</title><rect x="16.3192%" y="1253" width="0.1197%" height="15" fill="rgb(252,8,32)"/><text x="16.5692%" y="1263.50"></text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 0.12%)</title><rect x="16.3192%" y="1237" width="0.1197%" height="15" fill="rgb(223,20,43)"/><text x="16.5692%" y="1247.50"></text></g><g><title>openssl::ssl::bio::bwrite::_{{closure}} (19 samples, 0.12%)</title><rect x="16.3192%" y="1221" width="0.1197%" height="15" fill="rgb(229,81,49)"/><text x="16.5692%" y="1231.50"></text></g><g><title>&lt;tokio_openssl::StreamWrapper&lt;S&gt; as std::io::Write&gt;::write (19 samples, 0.12%)</title><rect x="16.3192%" y="1205" width="0.1197%" height="15" fill="rgb(236,28,36)"/><text x="16.5692%" y="1215.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (19 samples, 0.12%)</title><rect x="16.3192%" y="1189" width="0.1197%" height="15" fill="rgb(249,185,26)"/><text x="16.5692%" y="1199.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (19 samples, 0.12%)</title><rect x="16.3192%" y="1173" width="0.1197%" height="15" fill="rgb(249,174,33)"/><text x="16.5692%" y="1183.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (19 samples, 0.12%)</title><rect x="16.3192%" y="1157" width="0.1197%" height="15" fill="rgb(233,201,37)"/><text x="16.5692%" y="1167.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_write_io (19 samples, 0.12%)</title><rect x="16.3192%" y="1141" width="0.1197%" height="15" fill="rgb(221,78,26)"/><text x="16.5692%" y="1151.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_io (19 samples, 0.12%)</title><rect x="16.3192%" y="1125" width="0.1197%" height="15" fill="rgb(250,127,30)"/><text x="16.5692%" y="1135.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write::_{{closure}} (19 samples, 0.12%)</title><rect x="16.3192%" y="1109" width="0.1197%" height="15" fill="rgb(230,49,44)"/><text x="16.5692%" y="1119.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (19 samples, 0.12%)</title><rect x="16.3192%" y="1093" width="0.1197%" height="15" fill="rgb(229,67,23)"/><text x="16.5692%" y="1103.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (19 samples, 0.12%)</title><rect x="16.3192%" y="1077" width="0.1197%" height="15" fill="rgb(249,83,47)"/><text x="16.5692%" y="1087.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (19 samples, 0.12%)</title><rect x="16.3192%" y="1061" width="0.1197%" height="15" fill="rgb(215,43,3)"/><text x="16.5692%" y="1071.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (19 samples, 0.12%)</title><rect x="16.3192%" y="1045" width="0.1197%" height="15" fill="rgb(238,154,13)"/><text x="16.5692%" y="1055.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (19 samples, 0.12%)</title><rect x="16.3192%" y="1029" width="0.1197%" height="15" fill="rgb(219,56,2)"/><text x="16.5692%" y="1039.50"></text></g><g><title>std::sys_common::net::TcpStream::write (19 samples, 0.12%)</title><rect x="16.3192%" y="1013" width="0.1197%" height="15" fill="rgb(233,0,4)"/><text x="16.5692%" y="1023.50"></text></g><g><title>__libc_send (19 samples, 0.12%)</title><rect x="16.3192%" y="997" width="0.1197%" height="15" fill="rgb(235,30,7)"/><text x="16.5692%" y="1007.50"></text></g><g><title>__libc_send (19 samples, 0.12%)</title><rect x="16.3192%" y="981" width="0.1197%" height="15" fill="rgb(250,79,13)"/><text x="16.5692%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (19 samples, 0.12%)</title><rect x="16.3192%" y="965" width="0.1197%" height="15" fill="rgb(211,146,34)"/><text x="16.5692%" y="975.50"></text></g><g><title>do_syscall_64 (19 samples, 0.12%)</title><rect x="16.3192%" y="949" width="0.1197%" height="15" fill="rgb(228,22,38)"/><text x="16.5692%" y="959.50"></text></g><g><title>__x64_sys_sendto (19 samples, 0.12%)</title><rect x="16.3192%" y="933" width="0.1197%" height="15" fill="rgb(235,168,5)"/><text x="16.5692%" y="943.50"></text></g><g><title>__sys_sendto (19 samples, 0.12%)</title><rect x="16.3192%" y="917" width="0.1197%" height="15" fill="rgb(221,155,16)"/><text x="16.5692%" y="927.50"></text></g><g><title>sock_sendmsg (19 samples, 0.12%)</title><rect x="16.3192%" y="901" width="0.1197%" height="15" fill="rgb(215,215,53)"/><text x="16.5692%" y="911.50"></text></g><g><title>inet_sendmsg (19 samples, 0.12%)</title><rect x="16.3192%" y="885" width="0.1197%" height="15" fill="rgb(223,4,10)"/><text x="16.5692%" y="895.50"></text></g><g><title>tcp_sendmsg (19 samples, 0.12%)</title><rect x="16.3192%" y="869" width="0.1197%" height="15" fill="rgb(234,103,6)"/><text x="16.5692%" y="879.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.11%)</title><rect x="16.3255%" y="853" width="0.1134%" height="15" fill="rgb(227,97,0)"/><text x="16.5755%" y="863.50"></text></g><g><title>h2::proto::streams::prioritize::Prioritize::poll_complete (23 samples, 0.14%)</title><rect x="16.3003%" y="1605" width="0.1449%" height="15" fill="rgb(234,150,53)"/><text x="16.5503%" y="1615.50"></text></g><g><title>h2::codec::Codec&lt;T,B&gt;::flush (23 samples, 0.14%)</title><rect x="16.3003%" y="1589" width="0.1449%" height="15" fill="rgb(228,201,54)"/><text x="16.5503%" y="1599.50"></text></g><g><title>h2::codec::framed_write::FramedWrite&lt;T,B&gt;::flush (23 samples, 0.14%)</title><rect x="16.3003%" y="1573" width="0.1449%" height="15" fill="rgb(222,22,37)"/><text x="16.5503%" y="1583.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (23 samples, 0.14%)</title><rect x="16.3003%" y="1557" width="0.1449%" height="15" fill="rgb(237,53,32)"/><text x="16.5503%" y="1567.50"></text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (23 samples, 0.14%)</title><rect x="16.3003%" y="1541" width="0.1449%" height="15" fill="rgb(233,25,53)"/><text x="16.5503%" y="1551.50"></text></g><g><title>tokio_openssl::SslStream&lt;S&gt;::with_context (23 samples, 0.14%)</title><rect x="16.3003%" y="1525" width="0.1449%" height="15" fill="rgb(210,40,34)"/><text x="16.5503%" y="1535.50"></text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write::_{{closure}} (23 samples, 0.14%)</title><rect x="16.3003%" y="1509" width="0.1449%" height="15" fill="rgb(241,220,44)"/><text x="16.5503%" y="1519.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::write (23 samples, 0.14%)</title><rect x="16.3003%" y="1493" width="0.1449%" height="15" fill="rgb(235,28,35)"/><text x="16.5503%" y="1503.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_write (23 samples, 0.14%)</title><rect x="16.3003%" y="1477" width="0.1449%" height="15" fill="rgb(210,56,17)"/><text x="16.5503%" y="1487.50"></text></g><g><title>SSL_write (23 samples, 0.14%)</title><rect x="16.3003%" y="1461" width="0.1449%" height="15" fill="rgb(224,130,29)"/><text x="16.5503%" y="1471.50"></text></g><g><title>ssl_write_internal (23 samples, 0.14%)</title><rect x="16.3003%" y="1445" width="0.1449%" height="15" fill="rgb(235,212,8)"/><text x="16.5503%" y="1455.50"></text></g><g><title>ssl3_write_bytes (23 samples, 0.14%)</title><rect x="16.3003%" y="1429" width="0.1449%" height="15" fill="rgb(223,33,50)"/><text x="16.5503%" y="1439.50"></text></g><g><title>do_ssl3_write (23 samples, 0.14%)</title><rect x="16.3003%" y="1413" width="0.1449%" height="15" fill="rgb(219,149,13)"/><text x="16.5503%" y="1423.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (20 samples, 0.13%)</title><rect x="16.8357%" y="1605" width="0.1260%" height="15" fill="rgb(250,156,29)"/><text x="17.0857%" y="1615.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (20 samples, 0.13%)</title><rect x="16.8357%" y="1589" width="0.1260%" height="15" fill="rgb(216,193,19)"/><text x="17.0857%" y="1599.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (20 samples, 0.13%)</title><rect x="16.8357%" y="1573" width="0.1260%" height="15" fill="rgb(216,135,14)"/><text x="17.0857%" y="1583.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.13%)</title><rect x="16.8357%" y="1557" width="0.1260%" height="15" fill="rgb(241,47,5)"/><text x="17.0857%" y="1567.50"></text></g><g><title>h2s_client::main::_{{closure}}::_{{closure}} (20 samples, 0.13%)</title><rect x="16.8357%" y="1541" width="0.1260%" height="15" fill="rgb(233,42,35)"/><text x="17.0857%" y="1551.50"></text></g><g><title>&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (20 samples, 0.13%)</title><rect x="16.8357%" y="1525" width="0.1260%" height="15" fill="rgb(231,13,6)"/><text x="17.0857%" y="1535.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (20 samples, 0.13%)</title><rect x="16.8357%" y="1509" width="0.1260%" height="15" fill="rgb(207,181,40)"/><text x="17.0857%" y="1519.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_data (26 samples, 0.16%)</title><rect x="17.1884%" y="1381" width="0.1638%" height="15" fill="rgb(254,173,49)"/><text x="17.4384%" y="1391.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (22 samples, 0.14%)</title><rect x="17.2136%" y="1365" width="0.1386%" height="15" fill="rgb(221,1,38)"/><text x="17.4636%" y="1375.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (20 samples, 0.13%)</title><rect x="17.2262%" y="1349" width="0.1260%" height="15" fill="rgb(206,124,46)"/><text x="17.4762%" y="1359.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.14%)</title><rect x="17.5411%" y="1221" width="0.1386%" height="15" fill="rgb(249,21,11)"/><text x="17.7911%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (24 samples, 0.15%)</title><rect x="17.5348%" y="1333" width="0.1512%" height="15" fill="rgb(222,201,40)"/><text x="17.7848%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (24 samples, 0.15%)</title><rect x="17.5348%" y="1317" width="0.1512%" height="15" fill="rgb(235,61,29)"/><text x="17.7848%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.15%)</title><rect x="17.5348%" y="1301" width="0.1512%" height="15" fill="rgb(219,207,3)"/><text x="17.7848%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.15%)</title><rect x="17.5348%" y="1285" width="0.1512%" height="15" fill="rgb(222,56,46)"/><text x="17.7848%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (23 samples, 0.14%)</title><rect x="17.5411%" y="1269" width="0.1449%" height="15" fill="rgb(239,76,54)"/><text x="17.7911%" y="1279.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.14%)</title><rect x="17.5411%" y="1253" width="0.1449%" height="15" fill="rgb(231,124,27)"/><text x="17.7911%" y="1263.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.14%)</title><rect x="17.5411%" y="1237" width="0.1449%" height="15" fill="rgb(249,195,6)"/><text x="17.7911%" y="1247.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (59 samples, 0.37%)</title><rect x="17.3773%" y="1365" width="0.3716%" height="15" fill="rgb(237,174,47)"/><text x="17.6273%" y="1375.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (59 samples, 0.37%)</title><rect x="17.3773%" y="1349" width="0.3716%" height="15" fill="rgb(206,201,31)"/><text x="17.6273%" y="1359.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (98 samples, 0.62%)</title><rect x="17.1380%" y="1397" width="0.6172%" height="15" fill="rgb(231,57,52)"/><text x="17.3880%" y="1407.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_head (64 samples, 0.40%)</title><rect x="17.3521%" y="1381" width="0.4031%" height="15" fill="rgb(248,177,22)"/><text x="17.6021%" y="1391.50"></text></g><g><title>__memmove_avx_unaligned_erms (207 samples, 1.30%)</title><rect x="18.5048%" y="1173" width="1.3038%" height="15" fill="rgb(215,211,37)"/><text x="18.7548%" y="1183.50"></text></g><g><title>memcpy (211 samples, 1.33%)</title><rect x="18.5048%" y="1189" width="1.3290%" height="15" fill="rgb(241,128,51)"/><text x="18.7548%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (57 samples, 0.36%)</title><rect x="21.6729%" y="869" width="0.3590%" height="15" fill="rgb(227,165,31)"/><text x="21.9229%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.36%)</title><rect x="21.6729%" y="853" width="0.3590%" height="15" fill="rgb(228,167,24)"/><text x="21.9229%" y="863.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (102 samples, 0.64%)</title><rect x="21.3957%" y="901" width="0.6424%" height="15" fill="rgb(228,143,12)"/><text x="21.6457%" y="911.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (63 samples, 0.40%)</title><rect x="21.6414%" y="885" width="0.3968%" height="15" fill="rgb(249,149,8)"/><text x="21.8914%" y="895.50"></text></g><g><title>__libc_enable_asynccancel (16 samples, 0.10%)</title><rect x="22.4161%" y="725" width="0.1008%" height="15" fill="rgb(243,35,44)"/><text x="22.6661%" y="735.50"></text></g><g><title>entry_SYSCALL_64 (38 samples, 0.24%)</title><rect x="22.5357%" y="725" width="0.2393%" height="15" fill="rgb(246,89,9)"/><text x="22.7857%" y="735.50"></text></g><g><title>fput (39 samples, 0.25%)</title><rect x="23.1845%" y="661" width="0.2456%" height="15" fill="rgb(233,213,13)"/><text x="23.4345%" y="671.50"></text></g><g><title>fput_many (39 samples, 0.25%)</title><rect x="23.1845%" y="645" width="0.2456%" height="15" fill="rgb(233,141,41)"/><text x="23.4345%" y="655.50"></text></g><g><title>skb_release_data (35 samples, 0.22%)</title><rect x="24.7906%" y="581" width="0.2204%" height="15" fill="rgb(239,167,4)"/><text x="25.0406%" y="591.50"></text></g><g><title>dst_release (59 samples, 0.37%)</title><rect x="25.0236%" y="565" width="0.3716%" height="15" fill="rgb(209,217,16)"/><text x="25.2736%" y="575.50"></text></g><g><title>skb_release_head_state (95 samples, 0.60%)</title><rect x="25.0110%" y="581" width="0.5983%" height="15" fill="rgb(219,88,35)"/><text x="25.2610%" y="591.50"></text></g><g><title>sock_rfree (34 samples, 0.21%)</title><rect x="25.3952%" y="565" width="0.2141%" height="15" fill="rgb(220,193,23)"/><text x="25.6452%" y="575.50"></text></g><g><title>skb_release_all (135 samples, 0.85%)</title><rect x="24.7780%" y="597" width="0.8503%" height="15" fill="rgb(230,90,52)"/><text x="25.0280%" y="607.50"></text></g><g><title>__kfree_skb (140 samples, 0.88%)</title><rect x="24.7528%" y="613" width="0.8818%" height="15" fill="rgb(252,106,19)"/><text x="25.0028%" y="623.50"></text></g><g><title>_raw_spin_lock_bh (399 samples, 2.51%)</title><rect x="25.7731%" y="597" width="2.5131%" height="15" fill="rgb(206,74,20)"/><text x="26.0231%" y="607.50">_r..</text></g><g><title>native_queued_spin_lock_slowpath (353 samples, 2.22%)</title><rect x="26.0629%" y="581" width="2.2233%" height="15" fill="rgb(230,138,44)"/><text x="26.3129%" y="591.50">n..</text></g><g><title>lock_sock_nested (413 samples, 2.60%)</title><rect x="25.7038%" y="613" width="2.6012%" height="15" fill="rgb(235,182,43)"/><text x="25.9538%" y="623.50">lo..</text></g><g><title>_cond_resched (17 samples, 0.11%)</title><rect x="28.5822%" y="581" width="0.1071%" height="15" fill="rgb(242,16,51)"/><text x="28.8322%" y="591.50"></text></g><g><title>_raw_spin_lock_irqsave (21 samples, 0.13%)</title><rect x="29.7537%" y="357" width="0.1323%" height="15" fill="rgb(248,9,4)"/><text x="30.0037%" y="367.50"></text></g><g><title>select_task_rq_fair (40 samples, 0.25%)</title><rect x="29.8986%" y="357" width="0.2519%" height="15" fill="rgb(210,31,22)"/><text x="30.1486%" y="367.50"></text></g><g><title>update_cfs_group (23 samples, 0.14%)</title><rect x="30.6355%" y="277" width="0.1449%" height="15" fill="rgb(239,54,39)"/><text x="30.8855%" y="287.50"></text></g><g><title>__update_load_avg_cfs_rq (17 samples, 0.11%)</title><rect x="30.8937%" y="261" width="0.1071%" height="15" fill="rgb(230,99,41)"/><text x="31.1437%" y="271.50"></text></g><g><title>enqueue_task_fair (138 samples, 0.87%)</title><rect x="30.1757%" y="309" width="0.8692%" height="15" fill="rgb(253,106,12)"/><text x="30.4257%" y="319.50"></text></g><g><title>enqueue_entity (93 samples, 0.59%)</title><rect x="30.4592%" y="293" width="0.5858%" height="15" fill="rgb(213,46,41)"/><text x="30.7092%" y="303.50"></text></g><g><title>update_load_avg (37 samples, 0.23%)</title><rect x="30.8119%" y="277" width="0.2330%" height="15" fill="rgb(215,133,35)"/><text x="31.0619%" y="287.50"></text></g><g><title>psi_task_change (108 samples, 0.68%)</title><rect x="31.0449%" y="309" width="0.6802%" height="15" fill="rgb(213,28,5)"/><text x="31.2949%" y="319.50"></text></g><g><title>enqueue_task (249 samples, 1.57%)</title><rect x="30.1631%" y="325" width="1.5683%" height="15" fill="rgb(215,77,49)"/><text x="30.4131%" y="335.50"></text></g><g><title>activate_task (253 samples, 1.59%)</title><rect x="30.1505%" y="341" width="1.5935%" height="15" fill="rgb(248,100,22)"/><text x="30.4005%" y="351.50"></text></g><g><title>ttwu_do_activate (275 samples, 1.73%)</title><rect x="30.1505%" y="357" width="1.7321%" height="15" fill="rgb(208,67,9)"/><text x="30.4005%" y="367.50"></text></g><g><title>ttwu_do_wakeup (19 samples, 0.12%)</title><rect x="31.7629%" y="341" width="0.1197%" height="15" fill="rgb(219,133,21)"/><text x="32.0129%" y="351.50"></text></g><g><title>check_preempt_curr (18 samples, 0.11%)</title><rect x="31.7692%" y="325" width="0.1134%" height="15" fill="rgb(246,46,29)"/><text x="32.0192%" y="335.50"></text></g><g><title>update_cfs_rq_h_load (23 samples, 0.14%)</title><rect x="31.8826%" y="357" width="0.1449%" height="15" fill="rgb(246,185,52)"/><text x="32.1326%" y="367.50"></text></g><g><title>autoremove_wake_function (424 samples, 2.67%)</title><rect x="29.5144%" y="405" width="2.6705%" height="15" fill="rgb(252,136,11)"/><text x="29.7644%" y="415.50">au..</text></g><g><title>default_wake_function (423 samples, 2.66%)</title><rect x="29.5207%" y="389" width="2.6642%" height="15" fill="rgb(219,138,53)"/><text x="29.7707%" y="399.50">de..</text></g><g><title>try_to_wake_up (419 samples, 2.64%)</title><rect x="29.5459%" y="373" width="2.6390%" height="15" fill="rgb(211,51,23)"/><text x="29.7959%" y="383.50">tr..</text></g><g><title>update_rq_clock (25 samples, 0.16%)</title><rect x="32.0275%" y="357" width="0.1575%" height="15" fill="rgb(247,221,28)"/><text x="32.2775%" y="367.50"></text></g><g><title>__wake_up_common (451 samples, 2.84%)</title><rect x="29.3506%" y="421" width="2.8406%" height="15" fill="rgb(251,222,45)"/><text x="29.6006%" y="431.50">__..</text></g><g><title>_raw_spin_lock_irqsave (18 samples, 0.11%)</title><rect x="32.1912%" y="421" width="0.1134%" height="15" fill="rgb(217,162,53)"/><text x="32.4412%" y="431.50"></text></g><g><title>__wake_up (481 samples, 3.03%)</title><rect x="29.3380%" y="453" width="3.0295%" height="15" fill="rgb(229,93,14)"/><text x="29.5880%" y="463.50">__w..</text></g><g><title>__wake_up_common_lock (481 samples, 3.03%)</title><rect x="29.3380%" y="437" width="3.0295%" height="15" fill="rgb(209,67,49)"/><text x="29.5880%" y="447.50">__w..</text></g><g><title>_raw_read_lock_irqsave (47 samples, 0.30%)</title><rect x="32.3676%" y="453" width="0.2960%" height="15" fill="rgb(213,87,29)"/><text x="32.6176%" y="463.50"></text></g><g><title>__wake_up_common (561 samples, 3.53%)</title><rect x="29.2247%" y="485" width="3.5334%" height="15" fill="rgb(205,151,52)"/><text x="29.4747%" y="495.50">__w..</text></g><g><title>ep_poll_callback (559 samples, 3.52%)</title><rect x="29.2373%" y="469" width="3.5208%" height="15" fill="rgb(253,215,39)"/><text x="29.4873%" y="479.50">ep_..</text></g><g><title>_raw_spin_lock_irqsave (18 samples, 0.11%)</title><rect x="32.7581%" y="485" width="0.1134%" height="15" fill="rgb(221,220,41)"/><text x="33.0081%" y="495.50"></text></g><g><title>__wake_up_common_lock (583 samples, 3.67%)</title><rect x="29.2121%" y="501" width="3.6720%" height="15" fill="rgb(218,133,21)"/><text x="29.4621%" y="511.50">__wa..</text></g><g><title>tcp_data_ready (601 samples, 3.79%)</title><rect x="29.1050%" y="549" width="3.7853%" height="15" fill="rgb(221,193,43)"/><text x="29.3550%" y="559.50">tcp_..</text></g><g><title>sock_def_readable (600 samples, 3.78%)</title><rect x="29.1113%" y="533" width="3.7791%" height="15" fill="rgb(240,128,52)"/><text x="29.3613%" y="543.50">sock..</text></g><g><title>__wake_up_sync_key (584 samples, 3.68%)</title><rect x="29.2121%" y="517" width="3.6783%" height="15" fill="rgb(253,114,12)"/><text x="29.4621%" y="527.50">__wa..</text></g><g><title>__release_sock (747 samples, 4.70%)</title><rect x="28.4374%" y="597" width="4.7049%" height="15" fill="rgb(215,223,47)"/><text x="28.6874%" y="607.50">__rel..</text></g><g><title>tcp_v4_do_rcv (697 samples, 4.39%)</title><rect x="28.7523%" y="581" width="4.3900%" height="15" fill="rgb(248,225,23)"/><text x="29.0023%" y="591.50">tcp_v..</text></g><g><title>tcp_rcv_established (681 samples, 4.29%)</title><rect x="28.8531%" y="565" width="4.2892%" height="15" fill="rgb(250,108,0)"/><text x="29.1031%" y="575.50">tcp_r..</text></g><g><title>tcp_queue_rcv (27 samples, 0.17%)</title><rect x="32.9722%" y="549" width="0.1701%" height="15" fill="rgb(228,208,7)"/><text x="33.2222%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (47 samples, 0.30%)</title><rect x="33.1549%" y="597" width="0.2960%" height="15" fill="rgb(244,45,10)"/><text x="33.4049%" y="607.50"></text></g><g><title>release_sock (820 samples, 5.16%)</title><rect x="28.3114%" y="613" width="5.1647%" height="15" fill="rgb(207,125,25)"/><text x="28.5614%" y="623.50">releas..</text></g><g><title>__check_object_size (76 samples, 0.48%)</title><rect x="34.0744%" y="565" width="0.4787%" height="15" fill="rgb(210,195,18)"/><text x="34.3244%" y="575.50"></text></g><g><title>__virt_addr_valid (17 samples, 0.11%)</title><rect x="34.5531%" y="565" width="0.1071%" height="15" fill="rgb(249,80,12)"/><text x="34.8031%" y="575.50"></text></g><g><title>copy_user_enhanced_fast_string (591 samples, 3.72%)</title><rect x="34.7673%" y="549" width="3.7224%" height="15" fill="rgb(221,65,9)"/><text x="35.0173%" y="559.50">copy..</text></g><g><title>copy_user_generic_unrolled (55 samples, 0.35%)</title><rect x="38.4896%" y="549" width="0.3464%" height="15" fill="rgb(235,49,36)"/><text x="38.7396%" y="559.50"></text></g><g><title>_copy_to_iter (669 samples, 4.21%)</title><rect x="34.6602%" y="565" width="4.2136%" height="15" fill="rgb(225,32,20)"/><text x="34.9102%" y="575.50">_copy..</text></g><g><title>__skb_datagram_iter (851 samples, 5.36%)</title><rect x="33.5391%" y="597" width="5.3600%" height="15" fill="rgb(215,141,46)"/><text x="33.7891%" y="607.50">__skb_d..</text></g><g><title>simple_copy_to_iter (770 samples, 4.85%)</title><rect x="34.0493%" y="581" width="4.8498%" height="15" fill="rgb(250,160,47)"/><text x="34.2993%" y="591.50">simple..</text></g><g><title>skb_copy_datagram_iter (863 samples, 5.44%)</title><rect x="33.4761%" y="613" width="5.4355%" height="15" fill="rgb(216,222,40)"/><text x="33.7261%" y="623.50">skb_cop..</text></g><g><title>__kmalloc_node_track_caller (18 samples, 0.11%)</title><rect x="39.2580%" y="533" width="0.1134%" height="15" fill="rgb(234,217,39)"/><text x="39.5080%" y="543.50"></text></g><g><title>__kmalloc_reserve.isra.61 (31 samples, 0.20%)</title><rect x="39.2517%" y="549" width="0.1953%" height="15" fill="rgb(207,178,40)"/><text x="39.5017%" y="559.50"></text></g><g><title>__alloc_skb (63 samples, 0.40%)</title><rect x="39.2077%" y="565" width="0.3968%" height="15" fill="rgb(221,136,13)"/><text x="39.4577%" y="575.50"></text></g><g><title>__sk_dst_check (24 samples, 0.15%)</title><rect x="40.0013%" y="517" width="0.1512%" height="15" fill="rgb(249,199,10)"/><text x="40.2513%" y="527.50"></text></g><g><title>iptable_filter_hook (25 samples, 0.16%)</title><rect x="40.3603%" y="469" width="0.1575%" height="15" fill="rgb(249,222,13)"/><text x="40.6103%" y="479.50"></text></g><g><title>ipt_do_table (25 samples, 0.16%)</title><rect x="40.3603%" y="453" width="0.1575%" height="15" fill="rgb(244,185,38)"/><text x="40.6103%" y="463.50"></text></g><g><title>__nf_conntrack_find_get (66 samples, 0.42%)</title><rect x="40.7319%" y="437" width="0.4157%" height="15" fill="rgb(236,202,9)"/><text x="40.9819%" y="447.50"></text></g><g><title>nf_conntrack_tcp_packet (34 samples, 0.21%)</title><rect x="41.1854%" y="437" width="0.2141%" height="15" fill="rgb(250,229,37)"/><text x="41.4354%" y="447.50"></text></g><g><title>nf_conntrack_in (119 samples, 0.75%)</title><rect x="40.6878%" y="453" width="0.7495%" height="15" fill="rgb(206,174,23)"/><text x="40.9378%" y="463.50"></text></g><g><title>ipv4_conntrack_local (124 samples, 0.78%)</title><rect x="40.6689%" y="469" width="0.7810%" height="15" fill="rgb(211,33,43)"/><text x="40.9189%" y="479.50"></text></g><g><title>nf_hook_slow (183 samples, 1.15%)</title><rect x="40.3540%" y="485" width="1.1526%" height="15" fill="rgb(245,58,50)"/><text x="40.6040%" y="495.50"></text></g><g><title>__ip_local_out (214 samples, 1.35%)</title><rect x="40.1839%" y="501" width="1.3479%" height="15" fill="rgb(244,68,36)"/><text x="40.4339%" y="511.50"></text></g><g><title>__inet_lookup_established (26 samples, 0.16%)</title><rect x="42.5521%" y="213" width="0.1638%" height="15" fill="rgb(232,229,15)"/><text x="42.8021%" y="223.50"></text></g><g><title>rb_erase (22 samples, 0.14%)</title><rect x="43.1316%" y="181" width="0.1386%" height="15" fill="rgb(254,30,23)"/><text x="43.3816%" y="191.50"></text></g><g><title>rb_first (28 samples, 0.18%)</title><rect x="43.2701%" y="181" width="0.1764%" height="15" fill="rgb(235,160,14)"/><text x="43.5201%" y="191.50"></text></g><g><title>kfree_skbmem (21 samples, 0.13%)</title><rect x="43.8118%" y="149" width="0.1323%" height="15" fill="rgb(212,155,44)"/><text x="44.0618%" y="159.50"></text></g><g><title>kmem_cache_free (20 samples, 0.13%)</title><rect x="43.8181%" y="133" width="0.1260%" height="15" fill="rgb(226,2,50)"/><text x="44.0681%" y="143.50"></text></g><g><title>__free_pages_ok (40 samples, 0.25%)</title><rect x="44.4668%" y="69" width="0.2519%" height="15" fill="rgb(234,177,6)"/><text x="44.7168%" y="79.50"></text></g><g><title>free_one_page (17 samples, 0.11%)</title><rect x="44.6117%" y="53" width="0.1071%" height="15" fill="rgb(217,24,9)"/><text x="44.8617%" y="63.50"></text></g><g><title>_raw_spin_lock (16 samples, 0.10%)</title><rect x="44.6180%" y="37" width="0.1008%" height="15" fill="rgb(220,13,46)"/><text x="44.8680%" y="47.50"></text></g><g><title>free_compound_page (43 samples, 0.27%)</title><rect x="44.4605%" y="85" width="0.2708%" height="15" fill="rgb(239,221,27)"/><text x="44.7105%" y="95.50"></text></g><g><title>__put_compound_page (49 samples, 0.31%)</title><rect x="44.4353%" y="101" width="0.3086%" height="15" fill="rgb(222,198,25)"/><text x="44.6853%" y="111.50"></text></g><g><title>__put_page (54 samples, 0.34%)</title><rect x="44.4290%" y="117" width="0.3401%" height="15" fill="rgb(211,99,13)"/><text x="44.6790%" y="127.50"></text></g><g><title>skb_release_data (180 samples, 1.13%)</title><rect x="43.9504%" y="133" width="1.1337%" height="15" fill="rgb(232,111,31)"/><text x="44.2004%" y="143.50"></text></g><g><title>skb_free_head (49 samples, 0.31%)</title><rect x="44.7755%" y="117" width="0.3086%" height="15" fill="rgb(245,82,37)"/><text x="45.0255%" y="127.50"></text></g><g><title>kfree (47 samples, 0.30%)</title><rect x="44.7881%" y="101" width="0.2960%" height="15" fill="rgb(227,149,46)"/><text x="45.0381%" y="111.50"></text></g><g><title>__slab_free (39 samples, 0.25%)</title><rect x="44.8384%" y="85" width="0.2456%" height="15" fill="rgb(218,36,50)"/><text x="45.0884%" y="95.50"></text></g><g><title>skb_release_all (183 samples, 1.15%)</title><rect x="43.9441%" y="149" width="1.1526%" height="15" fill="rgb(226,80,48)"/><text x="44.1941%" y="159.50"></text></g><g><title>__kfree_skb (208 samples, 1.31%)</title><rect x="43.7929%" y="165" width="1.3101%" height="15" fill="rgb(238,224,15)"/><text x="44.0429%" y="175.50"></text></g><g><title>tcp_schedule_loss_probe (36 samples, 0.23%)</title><rect x="45.1723%" y="165" width="0.2267%" height="15" fill="rgb(241,136,10)"/><text x="45.4223%" y="175.50"></text></g><g><title>sk_reset_timer (32 samples, 0.20%)</title><rect x="45.1975%" y="149" width="0.2015%" height="15" fill="rgb(208,32,45)"/><text x="45.4475%" y="159.50"></text></g><g><title>mod_timer (32 samples, 0.20%)</title><rect x="45.1975%" y="133" width="0.2015%" height="15" fill="rgb(207,135,9)"/><text x="45.4475%" y="143.50"></text></g><g><title>lock_timer_base (17 samples, 0.11%)</title><rect x="45.2919%" y="117" width="0.1071%" height="15" fill="rgb(206,86,44)"/><text x="45.5419%" y="127.50"></text></g><g><title>_raw_spin_lock_irqsave (17 samples, 0.11%)</title><rect x="45.2919%" y="101" width="0.1071%" height="15" fill="rgb(245,177,15)"/><text x="45.5419%" y="111.50"></text></g><g><title>tcp_ack (314 samples, 1.98%)</title><rect x="43.4591%" y="181" width="1.9777%" height="15" fill="rgb(206,64,50)"/><text x="43.7091%" y="191.50">t..</text></g><g><title>tcp_v4_do_rcv (435 samples, 2.74%)</title><rect x="42.8355%" y="213" width="2.7398%" height="15" fill="rgb(234,36,40)"/><text x="43.0855%" y="223.50">tc..</text></g><g><title>tcp_rcv_established (430 samples, 2.71%)</title><rect x="42.8670%" y="197" width="2.7083%" height="15" fill="rgb(213,64,8)"/><text x="43.1170%" y="207.50">tc..</text></g><g><title>ip_local_deliver_finish (519 samples, 3.27%)</title><rect x="42.3254%" y="261" width="3.2689%" height="15" fill="rgb(210,75,36)"/><text x="42.5754%" y="271.50">ip_..</text></g><g><title>ip_protocol_deliver_rcu (519 samples, 3.27%)</title><rect x="42.3254%" y="245" width="3.2689%" height="15" fill="rgb(229,88,21)"/><text x="42.5754%" y="255.50">ip_..</text></g><g><title>tcp_v4_rcv (508 samples, 3.20%)</title><rect x="42.3947%" y="229" width="3.1996%" height="15" fill="rgb(252,204,47)"/><text x="42.6447%" y="239.50">tcp..</text></g><g><title>iptable_filter_hook (24 samples, 0.15%)</title><rect x="45.6509%" y="245" width="0.1512%" height="15" fill="rgb(208,77,27)"/><text x="45.9009%" y="255.50"></text></g><g><title>ipt_do_table (24 samples, 0.15%)</title><rect x="45.6509%" y="229" width="0.1512%" height="15" fill="rgb(221,76,26)"/><text x="45.9009%" y="239.50"></text></g><g><title>nf_hook_slow (42 samples, 0.26%)</title><rect x="45.6446%" y="261" width="0.2645%" height="15" fill="rgb(225,139,18)"/><text x="45.8946%" y="271.50"></text></g><g><title>ip_local_deliver (573 samples, 3.61%)</title><rect x="42.3065%" y="277" width="3.6090%" height="15" fill="rgb(230,137,11)"/><text x="42.5565%" y="287.50">ip_l..</text></g><g><title>ip_rcv_finish (588 samples, 3.70%)</title><rect x="42.2939%" y="293" width="3.7035%" height="15" fill="rgb(212,28,1)"/><text x="42.5439%" y="303.50">ip_r..</text></g><g><title>nf_hook_slow (31 samples, 0.20%)</title><rect x="46.0855%" y="293" width="0.1953%" height="15" fill="rgb(248,164,17)"/><text x="46.3355%" y="303.50"></text></g><g><title>__netif_receive_skb (659 samples, 4.15%)</title><rect x="42.1427%" y="341" width="4.1507%" height="15" fill="rgb(222,171,42)"/><text x="42.3927%" y="351.50">__net..</text></g><g><title>__netif_receive_skb_one_core (655 samples, 4.13%)</title><rect x="42.1679%" y="325" width="4.1255%" height="15" fill="rgb(243,84,45)"/><text x="42.4179%" y="335.50">__ne..</text></g><g><title>ip_rcv (646 samples, 4.07%)</title><rect x="42.2246%" y="309" width="4.0688%" height="15" fill="rgb(252,49,23)"/><text x="42.4746%" y="319.50">ip_r..</text></g><g><title>net_rx_action (696 samples, 4.38%)</title><rect x="41.9664%" y="373" width="4.3837%" height="15" fill="rgb(215,19,7)"/><text x="42.2164%" y="383.50">net_r..</text></g><g><title>process_backlog (685 samples, 4.31%)</title><rect x="42.0356%" y="357" width="4.3144%" height="15" fill="rgb(238,81,41)"/><text x="42.2856%" y="367.50">proce..</text></g><g><title>do_softirq_own_stack (710 samples, 4.47%)</title><rect x="41.9097%" y="405" width="4.4719%" height="15" fill="rgb(210,199,37)"/><text x="42.1597%" y="415.50">do_so..</text></g><g><title>__softirqentry_text_start (709 samples, 4.47%)</title><rect x="41.9160%" y="389" width="4.4656%" height="15" fill="rgb(244,192,49)"/><text x="42.1660%" y="399.50">__sof..</text></g><g><title>do_softirq.part.18 (719 samples, 4.53%)</title><rect x="41.8656%" y="421" width="4.5286%" height="15" fill="rgb(226,211,11)"/><text x="42.1156%" y="431.50">do_so..</text></g><g><title>__local_bh_enable_ip (726 samples, 4.57%)</title><rect x="41.8278%" y="437" width="4.5727%" height="15" fill="rgb(236,162,54)"/><text x="42.0778%" y="447.50">__loc..</text></g><g><title>dev_hard_start_xmit (46 samples, 0.29%)</title><rect x="46.5201%" y="405" width="0.2897%" height="15" fill="rgb(220,229,9)"/><text x="46.7701%" y="415.50"></text></g><g><title>loopback_xmit (40 samples, 0.25%)</title><rect x="46.5579%" y="389" width="0.2519%" height="15" fill="rgb(250,87,22)"/><text x="46.8079%" y="399.50"></text></g><g><title>netif_rx (19 samples, 0.12%)</title><rect x="46.6902%" y="373" width="0.1197%" height="15" fill="rgb(239,43,17)"/><text x="46.9402%" y="383.50"></text></g><g><title>netif_rx_internal (19 samples, 0.12%)</title><rect x="46.6902%" y="357" width="0.1197%" height="15" fill="rgb(231,177,25)"/><text x="46.9402%" y="367.50"></text></g><g><title>__dev_queue_xmit (75 samples, 0.47%)</title><rect x="46.4005%" y="421" width="0.4724%" height="15" fill="rgb(219,179,1)"/><text x="46.6505%" y="431.50"></text></g><g><title>ip_finish_output2 (818 samples, 5.15%)</title><rect x="41.7333%" y="453" width="5.1521%" height="15" fill="rgb(238,219,53)"/><text x="41.9833%" y="463.50">ip_fin..</text></g><g><title>dev_queue_xmit (77 samples, 0.48%)</title><rect x="46.4005%" y="437" width="0.4850%" height="15" fill="rgb(232,167,36)"/><text x="46.6505%" y="447.50"></text></g><g><title>__ip_finish_output (832 samples, 5.24%)</title><rect x="41.6766%" y="469" width="5.2403%" height="15" fill="rgb(244,19,51)"/><text x="41.9266%" y="479.50">__ip_f..</text></g><g><title>ip_finish_output (849 samples, 5.35%)</title><rect x="41.5822%" y="485" width="5.3474%" height="15" fill="rgb(224,6,22)"/><text x="41.8322%" y="495.50">ip_fini..</text></g><g><title>nf_hook_slow (29 samples, 0.18%)</title><rect x="46.9421%" y="485" width="0.1827%" height="15" fill="rgb(224,145,5)"/><text x="47.1921%" y="495.50"></text></g><g><title>ip_output (890 samples, 5.61%)</title><rect x="41.5381%" y="501" width="5.6056%" height="15" fill="rgb(234,130,49)"/><text x="41.7881%" y="511.50">ip_outp..</text></g><g><title>ip_local_out (1,113 samples, 7.01%)</title><rect x="40.1524%" y="517" width="7.0101%" height="15" fill="rgb(254,6,2)"/><text x="40.4024%" y="527.50">ip_local_..</text></g><g><title>__ip_queue_xmit (1,151 samples, 7.25%)</title><rect x="39.9572%" y="533" width="7.2495%" height="15" fill="rgb(208,96,46)"/><text x="40.2072%" y="543.50">__ip_queue..</text></g><g><title>ip_queue_xmit (1,160 samples, 7.31%)</title><rect x="39.9572%" y="549" width="7.3062%" height="15" fill="rgb(239,3,39)"/><text x="40.2072%" y="559.50">ip_queue_x..</text></g><g><title>__tcp_transmit_skb (1,218 samples, 7.67%)</title><rect x="39.6297%" y="565" width="7.6715%" height="15" fill="rgb(233,210,1)"/><text x="39.8797%" y="575.50">__tcp_trans..</text></g><g><title>tcp_cleanup_rbuf (1,336 samples, 8.41%)</title><rect x="38.9116%" y="613" width="8.4147%" height="15" fill="rgb(244,137,37)"/><text x="39.1616%" y="623.50">tcp_cleanup_..</text></g><g><title>tcp_send_ack (1,294 samples, 8.15%)</title><rect x="39.1762%" y="597" width="8.1502%" height="15" fill="rgb(240,136,2)"/><text x="39.4262%" y="607.50">tcp_send_ack</text></g><g><title>__tcp_send_ack.part.50 (1,294 samples, 8.15%)</title><rect x="39.1762%" y="581" width="8.1502%" height="15" fill="rgb(239,18,37)"/><text x="39.4262%" y="591.50">__tcp_send_..</text></g><g><title>ktime_get (45 samples, 0.28%)</title><rect x="47.5405%" y="581" width="0.2834%" height="15" fill="rgb(218,185,22)"/><text x="47.7905%" y="591.50"></text></g><g><title>read_tsc (30 samples, 0.19%)</title><rect x="47.6349%" y="565" width="0.1890%" height="15" fill="rgb(225,218,4)"/><text x="47.8849%" y="575.50"></text></g><g><title>tcp_rcv_space_adjust (88 samples, 0.55%)</title><rect x="47.3263%" y="613" width="0.5543%" height="15" fill="rgb(230,182,32)"/><text x="47.5763%" y="623.50"></text></g><g><title>tcp_mstamp_refresh (61 samples, 0.38%)</title><rect x="47.4964%" y="597" width="0.3842%" height="15" fill="rgb(242,56,43)"/><text x="47.7464%" y="607.50"></text></g><g><title>inet_recvmsg (3,877 samples, 24.42%)</title><rect x="23.5561%" y="645" width="24.4190%" height="15" fill="rgb(233,99,24)"/><text x="23.8061%" y="655.50">inet_recvmsg</text></g><g><title>tcp_recvmsg (3,858 samples, 24.30%)</title><rect x="23.6758%" y="629" width="24.2993%" height="15" fill="rgb(234,209,42)"/><text x="23.9258%" y="639.50">tcp_recvmsg</text></g><g><title>sock_recvmsg (3,913 samples, 24.65%)</title><rect x="23.4931%" y="661" width="24.6457%" height="15" fill="rgb(227,7,12)"/><text x="23.7431%" y="671.50">sock_recvmsg</text></g><g><title>security_socket_recvmsg (26 samples, 0.16%)</title><rect x="47.9751%" y="645" width="0.1638%" height="15" fill="rgb(245,203,43)"/><text x="48.2251%" y="655.50"></text></g><g><title>apparmor_socket_recvmsg (22 samples, 0.14%)</title><rect x="48.0003%" y="629" width="0.1386%" height="15" fill="rgb(238,205,33)"/><text x="48.2503%" y="639.50"></text></g><g><title>aa_sk_perm (21 samples, 0.13%)</title><rect x="48.0066%" y="613" width="0.1323%" height="15" fill="rgb(231,56,7)"/><text x="48.2566%" y="623.50"></text></g><g><title>__fdget (70 samples, 0.44%)</title><rect x="48.1577%" y="645" width="0.4409%" height="15" fill="rgb(244,186,29)"/><text x="48.4077%" y="655.50"></text></g><g><title>__fget_light (69 samples, 0.43%)</title><rect x="48.1640%" y="629" width="0.4346%" height="15" fill="rgb(234,111,31)"/><text x="48.4140%" y="639.50"></text></g><g><title>__fget (61 samples, 0.38%)</title><rect x="48.2144%" y="613" width="0.3842%" height="15" fill="rgb(241,149,10)"/><text x="48.4644%" y="623.50"></text></g><g><title>__sys_recvfrom (4,069 samples, 25.63%)</title><rect x="23.0270%" y="677" width="25.6283%" height="15" fill="rgb(249,206,44)"/><text x="23.2770%" y="687.50">__sys_recvfrom</text></g><g><title>sockfd_lookup_light (82 samples, 0.52%)</title><rect x="48.1388%" y="661" width="0.5165%" height="15" fill="rgb(251,153,30)"/><text x="48.3888%" y="671.50"></text></g><g><title>__x64_sys_recvfrom (4,078 samples, 25.68%)</title><rect x="23.0207%" y="693" width="25.6850%" height="15" fill="rgb(239,152,38)"/><text x="23.2707%" y="703.50">__x64_sys_recvfrom</text></g><g><title>do_syscall_64 (4,104 samples, 25.85%)</title><rect x="22.9514%" y="709" width="25.8487%" height="15" fill="rgb(249,139,47)"/><text x="23.2014%" y="719.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64_after_hwframe (4,133 samples, 26.03%)</title><rect x="22.7751%" y="725" width="26.0314%" height="15" fill="rgb(244,64,35)"/><text x="23.0251%" y="735.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>__libc_recv (4,250 samples, 26.77%)</title><rect x="22.1326%" y="757" width="26.7683%" height="15" fill="rgb(216,46,15)"/><text x="22.3826%" y="767.50">__libc_recv</text></g><g><title>__libc_recv (4,248 samples, 26.76%)</title><rect x="22.1452%" y="741" width="26.7557%" height="15" fill="rgb(250,74,19)"/><text x="22.3952%" y="751.50">__libc_recv</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4,267 samples, 26.88%)</title><rect x="22.0571%" y="885" width="26.8754%" height="15" fill="rgb(249,42,33)"/><text x="22.3071%" y="895.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4,259 samples, 26.82%)</title><rect x="22.1075%" y="869" width="26.8250%" height="15" fill="rgb(242,149,17)"/><text x="22.3575%" y="879.50">mio::io_source::IoSource&lt;T&gt;::do_io</text></g><g><title>mio::sys::unix::IoSourceState::do_io (4,259 samples, 26.82%)</title><rect x="22.1075%" y="853" width="26.8250%" height="15" fill="rgb(244,29,21)"/><text x="22.3575%" y="863.50">mio::sys::unix::IoSourceState::do_io</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (4,259 samples, 26.82%)</title><rect x="22.1075%" y="837" width="26.8250%" height="15" fill="rgb(220,130,37)"/><text x="22.3575%" y="847.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4,259 samples, 26.82%)</title><rect x="22.1075%" y="821" width="26.8250%" height="15" fill="rgb(211,67,2)"/><text x="22.3575%" y="831.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Read..</text></g><g><title>std::sys_common::net::TcpStream::read (4,257 samples, 26.81%)</title><rect x="22.1200%" y="805" width="26.8124%" height="15" fill="rgb(235,68,52)"/><text x="22.3700%" y="815.50">std::sys_common::net::TcpStream::read</text></g><g><title>std::sys::unix::net::Socket::read (4,257 samples, 26.81%)</title><rect x="22.1200%" y="789" width="26.8124%" height="15" fill="rgb(246,142,3)"/><text x="22.3700%" y="799.50">std::sys::unix::net::Socket::read</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (4,257 samples, 26.81%)</title><rect x="22.1200%" y="773" width="26.8124%" height="15" fill="rgb(241,25,7)"/><text x="22.3700%" y="783.50">std::sys::unix::net::Socket::recv_with_flags</text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (4,386 samples, 27.62%)</title><rect x="21.3201%" y="933" width="27.6249%" height="15" fill="rgb(242,119,39)"/><text x="21.5701%" y="943.50">tokio::io::driver::registration::Registratio..</text></g><g><title>tokio::io::driver::registration::Registration::poll_io (4,386 samples, 27.62%)</title><rect x="21.3201%" y="917" width="27.6249%" height="15" fill="rgb(241,98,45)"/><text x="21.5701%" y="927.50">tokio::io::driver::registration::Registratio..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read::_{{closure}} (4,272 samples, 26.91%)</title><rect x="22.0382%" y="901" width="26.9068%" height="15" fill="rgb(254,28,30)"/><text x="22.2882%" y="911.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::po..</text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4,414 samples, 27.80%)</title><rect x="21.1879%" y="981" width="27.8012%" height="15" fill="rgb(241,142,54)"/><text x="21.4379%" y="991.50">&lt;tokio::net::tcp::stream::TcpStream as tokio:..</text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (4,410 samples, 27.78%)</title><rect x="21.2131%" y="965" width="27.7760%" height="15" fill="rgb(222,85,15)"/><text x="21.4631%" y="975.50">tokio::net::tcp::stream::TcpStream::poll_read..</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4,410 samples, 27.78%)</title><rect x="21.2131%" y="949" width="27.7760%" height="15" fill="rgb(210,85,47)"/><text x="21.4631%" y="959.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll..</text></g><g><title>BIO_read (4,505 samples, 28.37%)</title><rect x="20.6525%" y="1157" width="28.3744%" height="15" fill="rgb(224,206,25)"/><text x="20.9025%" y="1167.50">BIO_read</text></g><g><title>bio_read_intern (4,490 samples, 28.28%)</title><rect x="20.7470%" y="1141" width="28.2799%" height="15" fill="rgb(243,201,19)"/><text x="20.9970%" y="1151.50">bio_read_intern</text></g><g><title>bread_conv (4,451 samples, 28.03%)</title><rect x="20.9926%" y="1125" width="28.0343%" height="15" fill="rgb(236,59,4)"/><text x="21.2426%" y="1135.50">bread_conv</text></g><g><title>openssl::ssl::bio::bread (4,432 samples, 27.91%)</title><rect x="21.1123%" y="1109" width="27.9146%" height="15" fill="rgb(254,179,45)"/><text x="21.3623%" y="1119.50">openssl::ssl::bio::bread</text></g><g><title>std::panic::catch_unwind (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1093" width="27.8894%" height="15" fill="rgb(226,14,10)"/><text x="21.3875%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1077" width="27.8894%" height="15" fill="rgb(244,27,41)"/><text x="21.3875%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1061" width="27.8894%" height="15" fill="rgb(235,35,32)"/><text x="21.3875%" y="1071.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1045" width="27.8894%" height="15" fill="rgb(218,68,31)"/><text x="21.3875%" y="1055.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops..</text></g><g><title>core::ops::function::FnOnce::call_once (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1029" width="27.8894%" height="15" fill="rgb(207,120,37)"/><text x="21.3875%" y="1039.50">core::ops::function::FnOnce::call_once</text></g><g><title>openssl::ssl::bio::bread::_{{closure}} (4,428 samples, 27.89%)</title><rect x="21.1375%" y="1013" width="27.8894%" height="15" fill="rgb(227,98,0)"/><text x="21.3875%" y="1023.50">openssl::ssl::bio::bread::_{{closure}}</text></g><g><title>&lt;tokio_openssl::StreamWrapper&lt;S&gt; as std::io::Read&gt;::read (4,428 samples, 27.89%)</title><rect x="21.1375%" y="997" width="27.8894%" height="15" fill="rgb(207,7,3)"/><text x="21.3875%" y="1007.50">&lt;tokio_openssl::StreamWrapper&lt;S&gt; as std::io::..</text></g><g><title>ssl3_read_n (4,588 samples, 28.90%)</title><rect x="20.1990%" y="1173" width="28.8971%" height="15" fill="rgb(206,98,19)"/><text x="20.4490%" y="1183.50">ssl3_read_n</text></g><g><title>EVP_CIPHER_CTX_iv_length (25 samples, 0.16%)</title><rect x="49.2788%" y="1157" width="0.1575%" height="15" fill="rgb(217,5,26)"/><text x="49.5288%" y="1167.50"></text></g><g><title>aesni_encrypt (38 samples, 0.24%)</title><rect x="49.5749%" y="1109" width="0.2393%" height="15" fill="rgb(235,190,38)"/><text x="49.8249%" y="1119.50"></text></g><g><title>CRYPTO_gcm128_setiv (41 samples, 0.26%)</title><rect x="49.5623%" y="1125" width="0.2582%" height="15" fill="rgb(247,86,24)"/><text x="49.8123%" y="1135.50"></text></g><g><title>EVP_CipherInit_ex (57 samples, 0.36%)</title><rect x="49.4678%" y="1157" width="0.3590%" height="15" fill="rgb(205,101,16)"/><text x="49.7178%" y="1167.50"></text></g><g><title>aesni_gcm_init_key (50 samples, 0.31%)</title><rect x="49.5119%" y="1141" width="0.3149%" height="15" fill="rgb(246,168,33)"/><text x="49.7619%" y="1151.50"></text></g><g><title>gcm_ghash_avx (23 samples, 0.14%)</title><rect x="49.9339%" y="1109" width="0.1449%" height="15" fill="rgb(231,114,1)"/><text x="50.1839%" y="1119.50"></text></g><g><title>CRYPTO_gcm128_finish (30 samples, 0.19%)</title><rect x="49.9150%" y="1125" width="0.1890%" height="15" fill="rgb(207,184,53)"/><text x="50.1650%" y="1135.50"></text></g><g><title>EVP_DecryptFinal_ex (36 samples, 0.23%)</title><rect x="49.8961%" y="1157" width="0.2267%" height="15" fill="rgb(224,95,51)"/><text x="50.1461%" y="1167.50"></text></g><g><title>aes_gcm_cipher (33 samples, 0.21%)</title><rect x="49.9150%" y="1141" width="0.2078%" height="15" fill="rgb(212,188,45)"/><text x="50.1650%" y="1151.50"></text></g><g><title>aesni_ctr32_encrypt_blocks (16 samples, 0.10%)</title><rect x="50.5007%" y="1093" width="0.1008%" height="15" fill="rgb(223,154,38)"/><text x="50.7507%" y="1103.50"></text></g><g><title>aesni_encrypt (22 samples, 0.14%)</title><rect x="50.6015%" y="1093" width="0.1386%" height="15" fill="rgb(251,22,52)"/><text x="50.8515%" y="1103.50"></text></g><g><title>CRYPTO_gcm128_decrypt_ctr32 (65 samples, 0.41%)</title><rect x="50.3999%" y="1109" width="0.4094%" height="15" fill="rgb(229,209,22)"/><text x="50.6499%" y="1119.50"></text></g><g><title>aes_gcm_cipher (102 samples, 0.64%)</title><rect x="50.2299%" y="1125" width="0.6424%" height="15" fill="rgb(234,138,34)"/><text x="50.4799%" y="1135.50"></text></g><g><title>EVP_DecryptUpdate (115 samples, 0.72%)</title><rect x="50.1606%" y="1157" width="0.7243%" height="15" fill="rgb(212,95,11)"/><text x="50.4106%" y="1167.50"></text></g><g><title>EVP_DecryptUpdate (115 samples, 0.72%)</title><rect x="50.1606%" y="1141" width="0.7243%" height="15" fill="rgb(240,179,47)"/><text x="50.4106%" y="1151.50"></text></g><g><title>WPACKET_finish (29 samples, 0.18%)</title><rect x="50.9290%" y="1157" width="0.1827%" height="15" fill="rgb(240,163,11)"/><text x="51.1790%" y="1167.50"></text></g><g><title>wpacket_intern_close (20 samples, 0.13%)</title><rect x="50.9857%" y="1141" width="0.1260%" height="15" fill="rgb(236,37,12)"/><text x="51.2357%" y="1151.50"></text></g><g><title>__GI___libc_malloc (63 samples, 0.40%)</title><rect x="51.3762%" y="1125" width="0.3968%" height="15" fill="rgb(232,164,16)"/><text x="51.6262%" y="1135.50"></text></g><g><title>CRYPTO_zalloc (85 samples, 0.54%)</title><rect x="51.2565%" y="1141" width="0.5354%" height="15" fill="rgb(244,205,15)"/><text x="51.5065%" y="1151.50"></text></g><g><title>ssl3_get_record (5,077 samples, 31.98%)</title><rect x="19.8337%" y="1189" width="31.9771%" height="15" fill="rgb(223,117,47)"/><text x="20.0837%" y="1199.50">ssl3_get_record</text></g><g><title>tls13_enc (431 samples, 2.71%)</title><rect x="49.0962%" y="1173" width="2.7146%" height="15" fill="rgb(244,107,35)"/><text x="49.3462%" y="1183.50">tl..</text></g><g><title>wpacket_intern_init_len (90 samples, 0.57%)</title><rect x="51.2439%" y="1157" width="0.5669%" height="15" fill="rgb(205,140,8)"/><text x="51.4939%" y="1167.50"></text></g><g><title>_int_free (88 samples, 0.55%)</title><rect x="51.9116%" y="1173" width="0.5543%" height="15" fill="rgb(228,84,46)"/><text x="52.1616%" y="1183.50"></text></g><g><title>malloc_consolidate (24 samples, 0.15%)</title><rect x="52.3147%" y="1157" width="0.1512%" height="15" fill="rgb(254,188,9)"/><text x="52.5647%" y="1167.50"></text></g><g><title>ssl3_release_read_buffer (106 samples, 0.67%)</title><rect x="51.8108%" y="1189" width="0.6676%" height="15" fill="rgb(206,112,54)"/><text x="52.0608%" y="1199.50"></text></g><g><title>__lll_lock_wait_private (19 samples, 0.12%)</title><rect x="52.9256%" y="1157" width="0.1197%" height="15" fill="rgb(216,84,49)"/><text x="53.1756%" y="1167.50"></text></g><g><title>__GI___libc_malloc (151 samples, 0.95%)</title><rect x="52.5540%" y="1173" width="0.9511%" height="15" fill="rgb(214,194,35)"/><text x="52.8040%" y="1183.50"></text></g><g><title>_int_malloc (65 samples, 0.41%)</title><rect x="53.0957%" y="1157" width="0.4094%" height="15" fill="rgb(249,28,3)"/><text x="53.3457%" y="1167.50"></text></g><g><title>malloc_consolidate (19 samples, 0.12%)</title><rect x="53.3854%" y="1141" width="0.1197%" height="15" fill="rgb(222,56,52)"/><text x="53.6354%" y="1151.50"></text></g><g><title>SSL_read (5,647 samples, 35.57%)</title><rect x="17.9442%" y="1269" width="35.5672%" height="15" fill="rgb(245,217,50)"/><text x="18.1942%" y="1279.50">SSL_read</text></g><g><title>ssl_read_internal (5,637 samples, 35.50%)</title><rect x="18.0072%" y="1253" width="35.5042%" height="15" fill="rgb(213,201,24)"/><text x="18.2572%" y="1263.50">ssl_read_internal</text></g><g><title>ssl_read_internal (5,625 samples, 35.43%)</title><rect x="18.0828%" y="1237" width="35.4286%" height="15" fill="rgb(248,116,28)"/><text x="18.3328%" y="1247.50">ssl_read_internal</text></g><g><title>ssl3_read_internal (5,620 samples, 35.40%)</title><rect x="18.1143%" y="1221" width="35.3971%" height="15" fill="rgb(219,72,43)"/><text x="18.3643%" y="1231.50">ssl3_read_internal</text></g><g><title>ssl3_read_bytes (5,611 samples, 35.34%)</title><rect x="18.1709%" y="1205" width="35.3404%" height="15" fill="rgb(209,138,14)"/><text x="18.4209%" y="1215.50">ssl3_read_bytes</text></g><g><title>ssl3_setup_read_buffer (164 samples, 1.03%)</title><rect x="52.4784%" y="1189" width="1.0329%" height="15" fill="rgb(222,18,33)"/><text x="52.7284%" y="1199.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (5,679 samples, 35.77%)</title><rect x="17.8623%" y="1301" width="35.7687%" height="15" fill="rgb(213,199,7)"/><text x="18.1123%" y="1311.50">&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read</text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (5,678 samples, 35.76%)</title><rect x="17.8686%" y="1285" width="35.7624%" height="15" fill="rgb(250,110,10)"/><text x="18.1186%" y="1295.50">openssl::ssl::SslStream&lt;S&gt;::ssl_read</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (213 samples, 1.34%)</title><rect x="53.6562%" y="1269" width="1.3416%" height="15" fill="rgb(248,123,6)"/><text x="53.9062%" y="1279.50"></text></g><g><title>core::intrinsics::write_bytes (213 samples, 1.34%)</title><rect x="53.6562%" y="1253" width="1.3416%" height="15" fill="rgb(206,91,31)"/><text x="53.9062%" y="1263.50"></text></g><g><title>__memset_avx2_erms (213 samples, 1.34%)</title><rect x="53.6562%" y="1237" width="1.3416%" height="15" fill="rgb(211,154,13)"/><text x="53.9062%" y="1247.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled (214 samples, 1.35%)</title><rect x="53.6562%" y="1301" width="1.3479%" height="15" fill="rgb(225,148,7)"/><text x="53.9062%" y="1311.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::initialize_unfilled_to (214 samples, 1.35%)</title><rect x="53.6562%" y="1285" width="1.3479%" height="15" fill="rgb(220,160,43)"/><text x="53.9062%" y="1295.50"></text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::_{{closure}} (5,902 samples, 37.17%)</title><rect x="17.8623%" y="1317" width="37.1733%" height="15" fill="rgb(213,52,39)"/><text x="18.1123%" y="1327.50">&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncR..</text></g><g><title>&lt;h2::codec::framed_write::FramedWrite&lt;T,B&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5,932 samples, 37.36%)</title><rect x="17.8182%" y="1381" width="37.3622%" height="15" fill="rgb(243,137,7)"/><text x="18.0682%" y="1391.50">&lt;h2::codec::framed_write::FramedWrite&lt;T,B&gt; as tokio::io::asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5,932 samples, 37.36%)</title><rect x="17.8182%" y="1365" width="37.3622%" height="15" fill="rgb(230,79,13)"/><text x="18.0682%" y="1375.50">&lt;core::pin::Pin&lt;P&gt; as tokio::io::async_read::AsyncRead&gt;::poll..</text></g><g><title>&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5,932 samples, 37.36%)</title><rect x="17.8182%" y="1349" width="37.3622%" height="15" fill="rgb(247,105,23)"/><text x="18.0682%" y="1359.50">&lt;tokio_openssl::SslStream&lt;S&gt; as tokio::io::async_read::AsyncR..</text></g><g><title>tokio_openssl::SslStream&lt;S&gt;::with_context (5,931 samples, 37.36%)</title><rect x="17.8245%" y="1333" width="37.3559%" height="15" fill="rgb(223,179,41)"/><text x="18.0745%" y="1343.50">tokio_openssl::SslStream&lt;S&gt;::with_context</text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::get_mut (23 samples, 0.14%)</title><rect x="55.0356%" y="1317" width="0.1449%" height="15" fill="rgb(218,9,34)"/><text x="55.2856%" y="1327.50"></text></g><g><title>&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next (6,060 samples, 38.17%)</title><rect x="17.0183%" y="1429" width="38.1684%" height="15" fill="rgb(222,106,8)"/><text x="17.2683%" y="1439.50">&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_co..</text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (6,060 samples, 38.17%)</title><rect x="17.0183%" y="1413" width="38.1684%" height="15" fill="rgb(211,220,0)"/><text x="17.2683%" y="1423.50">&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_..</text></g><g><title>tokio_util::util::poll_read_buf (5,938 samples, 37.40%)</title><rect x="17.7867%" y="1397" width="37.4000%" height="15" fill="rgb(229,52,16)"/><text x="18.0367%" y="1407.50">tokio_util::util::poll_read_buf</text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.13%)</title><rect x="55.1867%" y="1429" width="0.1260%" height="15" fill="rgb(212,155,18)"/><text x="55.4367%" y="1439.50"></text></g><g><title>h2::codec::framed_read::FramedRead&lt;T&gt;::decode_frame (56 samples, 0.35%)</title><rect x="55.3694%" y="1429" width="0.3527%" height="15" fill="rgb(242,21,14)"/><text x="55.6194%" y="1439.50"></text></g><g><title>&lt;h2::codec::Codec&lt;T,B&gt; as futures_core::stream::Stream&gt;::poll_next (6,169 samples, 38.85%)</title><rect x="16.9616%" y="1461" width="38.8549%" height="15" fill="rgb(222,19,48)"/><text x="17.2116%" y="1471.50">&lt;h2::codec::Codec&lt;T,B&gt; as futures_core::stream::Stream&gt;::poll_n..</text></g><g><title>&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6,169 samples, 38.85%)</title><rect x="16.9616%" y="1445" width="38.8549%" height="15" fill="rgb(232,45,27)"/><text x="17.2116%" y="1455.50">&lt;h2::codec::framed_read::FramedRead&lt;T&gt; as futures_core::stream:..</text></g><g><title>core::option::Option&lt;T&gt;::filter (23 samples, 0.14%)</title><rect x="55.8481%" y="1397" width="0.1449%" height="15" fill="rgb(249,103,42)"/><text x="56.0981%" y="1407.50"></text></g><g><title>&lt;h2::proto::streams::store::Store as core::ops::index::Index&lt;h2::proto::streams::store::Key&gt;&gt;::index::_{{closure}} (23 samples, 0.14%)</title><rect x="55.8481%" y="1381" width="0.1449%" height="15" fill="rgb(246,81,33)"/><text x="56.0981%" y="1391.50"></text></g><g><title>&lt;h2::frame::stream_id::StreamId as core::cmp::PartialEq&gt;::eq (23 samples, 0.14%)</title><rect x="55.8481%" y="1365" width="0.1449%" height="15" fill="rgb(252,33,42)"/><text x="56.0981%" y="1375.50"></text></g><g><title>&lt;h2::proto::streams::store::Ptr as core::ops::deref::Deref&gt;::deref (28 samples, 0.18%)</title><rect x="55.8481%" y="1429" width="0.1764%" height="15" fill="rgb(209,212,41)"/><text x="56.0981%" y="1439.50"></text></g><g><title>&lt;h2::proto::streams::store::Store as core::ops::index::Index&lt;h2::proto::streams::store::Key&gt;&gt;::index (28 samples, 0.18%)</title><rect x="55.8481%" y="1413" width="0.1764%" height="15" fill="rgb(207,154,6)"/><text x="56.0981%" y="1423.50"></text></g><g><title>__memmove_avx_unaligned_erms (52 samples, 0.33%)</title><rect x="56.2638%" y="1381" width="0.3275%" height="15" fill="rgb(223,64,47)"/><text x="56.5138%" y="1391.50"></text></g><g><title>h2::proto::streams::buffer::Deque::push_back (76 samples, 0.48%)</title><rect x="56.2638%" y="1397" width="0.4787%" height="15" fill="rgb(211,161,38)"/><text x="56.5138%" y="1407.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert (24 samples, 0.15%)</title><rect x="56.5913%" y="1381" width="0.1512%" height="15" fill="rgb(219,138,40)"/><text x="56.8413%" y="1391.50"></text></g><g><title>slab::Slab&lt;T&gt;::insert_at (21 samples, 0.13%)</title><rect x="56.6102%" y="1365" width="0.1323%" height="15" fill="rgb(241,228,46)"/><text x="56.8602%" y="1375.50"></text></g><g><title>h2::proto::streams::recv::Recv::consume_connection_window (16 samples, 0.10%)</title><rect x="56.7425%" y="1397" width="0.1008%" height="15" fill="rgb(223,209,38)"/><text x="56.9925%" y="1407.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (42 samples, 0.26%)</title><rect x="56.9188%" y="1333" width="0.2645%" height="15" fill="rgb(236,164,45)"/><text x="57.1688%" y="1343.50"></text></g><g><title>core::sync::atomic::atomic_swap (42 samples, 0.26%)</title><rect x="56.9188%" y="1317" width="0.2645%" height="15" fill="rgb(231,15,5)"/><text x="57.1688%" y="1327.50"></text></g><g><title>_raw_spin_lock (48 samples, 0.30%)</title><rect x="57.6053%" y="1157" width="0.3023%" height="15" fill="rgb(252,35,15)"/><text x="57.8553%" y="1167.50"></text></g><g><title>__unqueue_futex (30 samples, 0.19%)</title><rect x="58.2226%" y="1141" width="0.1890%" height="15" fill="rgb(248,181,18)"/><text x="58.4726%" y="1151.50"></text></g><g><title>mark_wake_futex (70 samples, 0.44%)</title><rect x="57.9958%" y="1157" width="0.4409%" height="15" fill="rgb(233,39,42)"/><text x="58.2458%" y="1167.50"></text></g><g><title>_raw_spin_lock (20 samples, 0.13%)</title><rect x="58.8902%" y="1125" width="0.1260%" height="15" fill="rgb(238,110,33)"/><text x="59.1402%" y="1135.50"></text></g><g><title>select_task_rq_fair (58 samples, 0.37%)</title><rect x="59.0603%" y="1125" width="0.3653%" height="15" fill="rgb(233,195,10)"/><text x="59.3103%" y="1135.50"></text></g><g><title>select_idle_sibling (40 samples, 0.25%)</title><rect x="59.1736%" y="1109" width="0.2519%" height="15" fill="rgb(254,105,3)"/><text x="59.4236%" y="1119.50"></text></g><g><title>available_idle_cpu (40 samples, 0.25%)</title><rect x="59.1736%" y="1093" width="0.2519%" height="15" fill="rgb(221,225,9)"/><text x="59.4236%" y="1103.50"></text></g><g><title>account_entity_enqueue (24 samples, 0.15%)</title><rect x="59.7909%" y="1061" width="0.1512%" height="15" fill="rgb(224,227,45)"/><text x="60.0409%" y="1071.50"></text></g><g><title>update_cfs_group (27 samples, 0.17%)</title><rect x="60.1877%" y="1045" width="0.1701%" height="15" fill="rgb(229,198,43)"/><text x="60.4377%" y="1055.50"></text></g><g><title>reweight_entity (21 samples, 0.13%)</title><rect x="60.2255%" y="1029" width="0.1323%" height="15" fill="rgb(206,209,35)"/><text x="60.4755%" y="1039.50"></text></g><g><title>__update_load_avg_cfs_rq (23 samples, 0.14%)</title><rect x="60.6160%" y="1029" width="0.1449%" height="15" fill="rgb(245,195,53)"/><text x="60.8660%" y="1039.50"></text></g><g><title>enqueue_entity (139 samples, 0.88%)</title><rect x="59.9421%" y="1061" width="0.8755%" height="15" fill="rgb(240,92,26)"/><text x="60.1921%" y="1071.50"></text></g><g><title>update_load_avg (68 samples, 0.43%)</title><rect x="60.3892%" y="1045" width="0.4283%" height="15" fill="rgb(207,40,23)"/><text x="60.6392%" y="1055.50"></text></g><g><title>enqueue_task_fair (216 samples, 1.36%)</title><rect x="59.4634%" y="1077" width="1.3605%" height="15" fill="rgb(223,111,35)"/><text x="59.7134%" y="1087.50"></text></g><g><title>psi_task_change (147 samples, 0.93%)</title><rect x="60.8301%" y="1077" width="0.9259%" height="15" fill="rgb(229,147,28)"/><text x="61.0801%" y="1087.50"></text></g><g><title>enqueue_task (371 samples, 2.34%)</title><rect x="59.4256%" y="1093" width="2.3367%" height="15" fill="rgb(211,29,28)"/><text x="59.6756%" y="1103.50">e..</text></g><g><title>activate_task (379 samples, 2.39%)</title><rect x="59.4256%" y="1109" width="2.3871%" height="15" fill="rgb(228,72,33)"/><text x="59.6756%" y="1119.50">ac..</text></g><g><title>ttwu_do_activate (410 samples, 2.58%)</title><rect x="59.4256%" y="1125" width="2.5824%" height="15" fill="rgb(205,214,31)"/><text x="59.6756%" y="1135.50">tt..</text></g><g><title>ttwu_do_wakeup (24 samples, 0.15%)</title><rect x="61.8568%" y="1109" width="0.1512%" height="15" fill="rgb(224,111,15)"/><text x="62.1068%" y="1119.50"></text></g><g><title>check_preempt_curr (18 samples, 0.11%)</title><rect x="61.8946%" y="1093" width="0.1134%" height="15" fill="rgb(253,21,26)"/><text x="62.1446%" y="1103.50"></text></g><g><title>try_to_wake_up (575 samples, 3.62%)</title><rect x="58.6446%" y="1141" width="3.6216%" height="15" fill="rgb(245,139,43)"/><text x="58.8946%" y="1151.50">try_..</text></g><g><title>update_rq_clock (41 samples, 0.26%)</title><rect x="62.0079%" y="1125" width="0.2582%" height="15" fill="rgb(252,170,7)"/><text x="62.2579%" y="1135.50"></text></g><g><title>futex_wake (776 samples, 4.89%)</title><rect x="57.3912%" y="1173" width="4.8876%" height="15" fill="rgb(231,118,14)"/><text x="57.6412%" y="1183.50">futex_..</text></g><g><title>wake_up_q (609 samples, 3.84%)</title><rect x="58.4430%" y="1157" width="3.8357%" height="15" fill="rgb(238,83,0)"/><text x="58.6930%" y="1167.50">wake..</text></g><g><title>do_futex (785 samples, 4.94%)</title><rect x="57.3597%" y="1189" width="4.9443%" height="15" fill="rgb(221,39,39)"/><text x="57.6097%" y="1199.50">do_fut..</text></g><g><title>__x64_sys_futex (794 samples, 5.00%)</title><rect x="57.3219%" y="1205" width="5.0009%" height="15" fill="rgb(222,119,46)"/><text x="57.5719%" y="1215.50">__x64_..</text></g><g><title>do_syscall_64 (809 samples, 5.10%)</title><rect x="57.2967%" y="1221" width="5.0954%" height="15" fill="rgb(222,165,49)"/><text x="57.5467%" y="1231.50">do_sys..</text></g><g><title>entry_SYSCALL_64_after_hwframe (817 samples, 5.15%)</title><rect x="57.2526%" y="1237" width="5.1458%" height="15" fill="rgb(219,113,52)"/><text x="57.5026%" y="1247.50">entry_..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (834 samples, 5.25%)</title><rect x="57.1833%" y="1269" width="5.2529%" height="15" fill="rgb(214,7,15)"/><text x="57.4333%" y="1279.50">&lt;parki..</text></g><g><title>syscall (833 samples, 5.25%)</title><rect x="57.1896%" y="1253" width="5.2466%" height="15" fill="rgb(235,32,4)"/><text x="57.4396%" y="1263.50">syscall</text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (18 samples, 0.11%)</title><rect x="62.4929%" y="1269" width="0.1134%" height="15" fill="rgb(238,90,54)"/><text x="62.7429%" y="1279.50"></text></g><g><title>std::time::Instant::now (16 samples, 0.10%)</title><rect x="62.5055%" y="1253" width="0.1008%" height="15" fill="rgb(213,208,19)"/><text x="62.7555%" y="1263.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (16 samples, 0.10%)</title><rect x="62.5055%" y="1237" width="0.1008%" height="15" fill="rgb(233,156,4)"/><text x="62.7555%" y="1247.50"></text></g><g><title>std::sys::unix::time::inner::now (16 samples, 0.10%)</title><rect x="62.5055%" y="1221" width="0.1008%" height="15" fill="rgb(207,194,5)"/><text x="62.7555%" y="1231.50"></text></g><g><title>__GI___clock_gettime (16 samples, 0.10%)</title><rect x="62.5055%" y="1205" width="0.1008%" height="15" fill="rgb(206,111,30)"/><text x="62.7555%" y="1215.50"></text></g><g><title>__vdso_clock_gettime (16 samples, 0.10%)</title><rect x="62.5055%" y="1189" width="0.1008%" height="15" fill="rgb(243,70,54)"/><text x="62.7555%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (900 samples, 5.67%)</title><rect x="57.1833%" y="1333" width="5.6686%" height="15" fill="rgb(242,28,8)"/><text x="57.4333%" y="1343.50">tokio::..</text></g><g><title>parking_lot::condvar::Condvar::notify_one (900 samples, 5.67%)</title><rect x="57.1833%" y="1317" width="5.6686%" height="15" fill="rgb(219,106,18)"/><text x="57.4333%" y="1327.50">parking..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (900 samples, 5.67%)</title><rect x="57.1833%" y="1301" width="5.6686%" height="15" fill="rgb(244,222,10)"/><text x="57.4333%" y="1311.50">parking..</text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (900 samples, 5.67%)</title><rect x="57.1833%" y="1285" width="5.6686%" height="15" fill="rgb(236,179,52)"/><text x="57.4333%" y="1295.50">parking..</text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (29 samples, 0.18%)</title><rect x="62.6693%" y="1269" width="0.1827%" height="15" fill="rgb(213,23,39)"/><text x="62.9193%" y="1279.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (29 samples, 0.18%)</title><rect x="62.6693%" y="1253" width="0.1827%" height="15" fill="rgb(238,48,10)"/><text x="62.9193%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (29 samples, 0.18%)</title><rect x="62.6693%" y="1237" width="0.1827%" height="15" fill="rgb(251,196,23)"/><text x="62.9193%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_sub (29 samples, 0.18%)</title><rect x="62.6693%" y="1221" width="0.1827%" height="15" fill="rgb(250,152,24)"/><text x="62.9193%" y="1231.50"></text></g><g><title>h2::proto::streams::counts::Counts::transition (1,116 samples, 7.03%)</title><rect x="55.8418%" y="1445" width="7.0290%" height="15" fill="rgb(209,150,17)"/><text x="56.0918%" y="1455.50">h2::proto..</text></g><g><title>h2::proto::streams::streams::Streams&lt;B,P&gt;::recv_data::_{{closure}} (1,081 samples, 6.81%)</title><rect x="56.0622%" y="1429" width="6.8086%" height="15" fill="rgb(234,202,34)"/><text x="56.3122%" y="1439.50">h2::proto..</text></g><g><title>h2::proto::streams::recv::Recv::recv_data (1,073 samples, 6.76%)</title><rect x="56.1126%" y="1413" width="6.7582%" height="15" fill="rgb(253,148,53)"/><text x="56.3626%" y="1423.50">h2::proto..</text></g><g><title>h2::proto::streams::stream::Stream::notify_recv (956 samples, 6.02%)</title><rect x="56.8495%" y="1397" width="6.0213%" height="15" fill="rgb(218,129,16)"/><text x="57.0995%" y="1407.50">h2::prot..</text></g><g><title>core::task::wake::Waker::wake (950 samples, 5.98%)</title><rect x="56.8873%" y="1381" width="5.9835%" height="15" fill="rgb(216,85,19)"/><text x="57.1373%" y="1391.50">core::ta..</text></g><g><title>tokio::park::thread::wake (950 samples, 5.98%)</title><rect x="56.8873%" y="1365" width="5.9835%" height="15" fill="rgb(235,228,7)"/><text x="57.1373%" y="1375.50">tokio::p..</text></g><g><title>tokio::park::thread::Inner::unpark (949 samples, 5.98%)</title><rect x="56.8936%" y="1349" width="5.9772%" height="15" fill="rgb(245,175,0)"/><text x="57.1436%" y="1359.50">tokio::p..</text></g><g><title>h2::proto::streams::streams::Streams&lt;B,P&gt;::recv_data (1,127 samples, 7.10%)</title><rect x="55.8355%" y="1461" width="7.0983%" height="15" fill="rgb(208,168,36)"/><text x="56.0855%" y="1471.50">h2::proto:..</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (7,300 samples, 45.98%)</title><rect x="16.9616%" y="1477" width="45.9785%" height="15" fill="rgb(246,171,24)"/><text x="17.2116%" y="1487.50">h2::proto::connection::Connection&lt;T,P,B&gt;::poll2</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1605" width="46.0477%" height="15" fill="rgb(215,142,24)"/><text x="17.2116%" y="1615.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1589" width="46.0477%" height="15" fill="rgb(250,187,7)"/><text x="17.2116%" y="1599.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1573" width="46.0477%" height="15" fill="rgb(228,66,33)"/><text x="17.2116%" y="1583.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1557" width="46.0477%" height="15" fill="rgb(234,215,21)"/><text x="17.2116%" y="1567.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1541" width="46.0477%" height="15" fill="rgb(222,191,20)"/><text x="17.2116%" y="1551.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;..</text></g><g><title>h2s_client::main::_{{closure}}::_{{closure}} (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1525" width="46.0477%" height="15" fill="rgb(245,79,54)"/><text x="17.2116%" y="1535.50">h2s_client::main::_{{closure}}::_{{closure}}</text></g><g><title>&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1509" width="46.0477%" height="15" fill="rgb(240,10,37)"/><text x="17.2116%" y="1519.50">&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll</text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (7,311 samples, 46.05%)</title><rect x="16.9616%" y="1493" width="46.0477%" height="15" fill="rgb(214,192,32)"/><text x="17.2116%" y="1503.50">h2::proto::connection::Connection&lt;T,P,B&gt;::poll</text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.13%)</title><rect x="63.3180%" y="1349" width="0.1260%" height="15" fill="rgb(209,36,54)"/><text x="63.5680%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place (19 samples, 0.12%)</title><rect x="63.5636%" y="1333" width="0.1197%" height="15" fill="rgb(220,10,11)"/><text x="63.8136%" y="1343.50"></text></g><g><title>h2::proto::streams::streams::Streams&lt;B,P&gt;::send_pending_refusal (17 samples, 0.11%)</title><rect x="63.7022%" y="1333" width="0.1071%" height="15" fill="rgb(221,106,17)"/><text x="63.9522%" y="1343.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll_ready (55 samples, 0.35%)</title><rect x="63.5259%" y="1349" width="0.3464%" height="15" fill="rgb(251,142,44)"/><text x="63.7759%" y="1359.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.12%)</title><rect x="63.8849%" y="1301" width="0.1197%" height="15" fill="rgb(238,13,15)"/><text x="64.1349%" y="1311.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (17 samples, 0.11%)</title><rect x="63.8975%" y="1285" width="0.1071%" height="15" fill="rgb(208,107,27)"/><text x="64.1475%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.14%)</title><rect x="63.8849%" y="1333" width="0.1449%" height="15" fill="rgb(205,136,37)"/><text x="64.1349%" y="1343.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.14%)</title><rect x="63.8849%" y="1317" width="0.1449%" height="15" fill="rgb(250,205,27)"/><text x="64.1349%" y="1327.50"></text></g><g><title>__GI___pthread_mutex_lock (69 samples, 0.43%)</title><rect x="64.0360%" y="1285" width="0.4346%" height="15" fill="rgb(210,80,43)"/><text x="64.2860%" y="1295.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll2 (211 samples, 1.33%)</title><rect x="63.1542%" y="1365" width="1.3290%" height="15" fill="rgb(247,160,36)"/><text x="63.4042%" y="1375.50"></text></g><g><title>h2::proto::streams::streams::Streams&lt;B,P&gt;::recv_data (97 samples, 0.61%)</title><rect x="63.8723%" y="1349" width="0.6109%" height="15" fill="rgb(234,13,49)"/><text x="64.1223%" y="1359.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (72 samples, 0.45%)</title><rect x="64.0297%" y="1333" width="0.4535%" height="15" fill="rgb(234,122,0)"/><text x="64.2797%" y="1343.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (72 samples, 0.45%)</title><rect x="64.0297%" y="1317" width="0.4535%" height="15" fill="rgb(207,146,38)"/><text x="64.2797%" y="1327.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (71 samples, 0.45%)</title><rect x="64.0360%" y="1301" width="0.4472%" height="15" fill="rgb(207,177,25)"/><text x="64.2860%" y="1311.50"></text></g><g><title>h2::proto::streams::streams::Streams&lt;B,P&gt;::poll_complete (21 samples, 0.13%)</title><rect x="64.4832%" y="1365" width="0.1323%" height="15" fill="rgb(211,178,42)"/><text x="64.7332%" y="1375.50"></text></g><g><title>tokio::runtime::task::raw::poll (257 samples, 1.62%)</title><rect x="63.0094%" y="1605" width="1.6187%" height="15" fill="rgb(230,69,54)"/><text x="63.2594%" y="1615.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (257 samples, 1.62%)</title><rect x="63.0094%" y="1589" width="1.6187%" height="15" fill="rgb(214,135,41)"/><text x="63.2594%" y="1599.50"></text></g><g><title>std::panic::catch_unwind (257 samples, 1.62%)</title><rect x="63.0094%" y="1573" width="1.6187%" height="15" fill="rgb(237,67,25)"/><text x="63.2594%" y="1583.50"></text></g><g><title>std::panicking::try (257 samples, 1.62%)</title><rect x="63.0094%" y="1557" width="1.6187%" height="15" fill="rgb(222,189,50)"/><text x="63.2594%" y="1567.50"></text></g><g><title>std::panicking::try::do_call (257 samples, 1.62%)</title><rect x="63.0094%" y="1541" width="1.6187%" height="15" fill="rgb(245,148,34)"/><text x="63.2594%" y="1551.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (257 samples, 1.62%)</title><rect x="63.0094%" y="1525" width="1.6187%" height="15" fill="rgb(222,29,6)"/><text x="63.2594%" y="1535.50"></text></g><g><title>core::ops::function::FnOnce::call_once (257 samples, 1.62%)</title><rect x="63.0094%" y="1509" width="1.6187%" height="15" fill="rgb(221,189,43)"/><text x="63.2594%" y="1519.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (257 samples, 1.62%)</title><rect x="63.0094%" y="1493" width="1.6187%" height="15" fill="rgb(207,36,27)"/><text x="63.2594%" y="1503.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (257 samples, 1.62%)</title><rect x="63.0094%" y="1477" width="1.6187%" height="15" fill="rgb(217,90,24)"/><text x="63.2594%" y="1487.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (257 samples, 1.62%)</title><rect x="63.0094%" y="1461" width="1.6187%" height="15" fill="rgb(224,66,35)"/><text x="63.2594%" y="1471.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (257 samples, 1.62%)</title><rect x="63.0094%" y="1445" width="1.6187%" height="15" fill="rgb(221,13,50)"/><text x="63.2594%" y="1455.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (257 samples, 1.62%)</title><rect x="63.0094%" y="1429" width="1.6187%" height="15" fill="rgb(236,68,49)"/><text x="63.2594%" y="1439.50"></text></g><g><title>h2s_client::main::_{{closure}}::_{{closure}} (257 samples, 1.62%)</title><rect x="63.0094%" y="1413" width="1.6187%" height="15" fill="rgb(229,146,28)"/><text x="63.2594%" y="1423.50"></text></g><g><title>&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (253 samples, 1.59%)</title><rect x="63.0346%" y="1397" width="1.5935%" height="15" fill="rgb(225,31,38)"/><text x="63.2846%" y="1407.50"></text></g><g><title>h2::proto::connection::Connection&lt;T,P,B&gt;::poll (237 samples, 1.49%)</title><rect x="63.1354%" y="1381" width="1.4927%" height="15" fill="rgb(250,208,3)"/><text x="63.3854%" y="1391.50"></text></g><g><title>tokio::time::driver::wheel::level::Level::next_expiration (26 samples, 0.16%)</title><rect x="64.7037%" y="1605" width="0.1638%" height="15" fill="rgb(246,54,23)"/><text x="64.9537%" y="1615.50"></text></g><g><title>[unknown] (7,839 samples, 49.37%)</title><rect x="15.5319%" y="1621" width="49.3733%" height="15" fill="rgb(243,76,11)"/><text x="15.7819%" y="1631.50">[unknown]</text></g><g><title>__x64_sys_futex (20 samples, 0.13%)</title><rect x="64.9619%" y="1205" width="0.1260%" height="15" fill="rgb(245,21,50)"/><text x="65.2119%" y="1215.50"></text></g><g><title>do_futex (20 samples, 0.13%)</title><rect x="64.9619%" y="1189" width="0.1260%" height="15" fill="rgb(228,9,43)"/><text x="65.2119%" y="1199.50"></text></g><g><title>futex_wait (20 samples, 0.13%)</title><rect x="64.9619%" y="1173" width="0.1260%" height="15" fill="rgb(208,100,47)"/><text x="65.2119%" y="1183.50"></text></g><g><title>futex_wait_queue_me (20 samples, 0.13%)</title><rect x="64.9619%" y="1157" width="0.1260%" height="15" fill="rgb(232,26,8)"/><text x="65.2119%" y="1167.50"></text></g><g><title>schedule (20 samples, 0.13%)</title><rect x="64.9619%" y="1141" width="0.1260%" height="15" fill="rgb(216,166,38)"/><text x="65.2119%" y="1151.50"></text></g><g><title>__schedule (20 samples, 0.13%)</title><rect x="64.9619%" y="1125" width="0.1260%" height="15" fill="rgb(251,202,51)"/><text x="65.2119%" y="1135.50"></text></g><g><title>finish_task_switch (20 samples, 0.13%)</title><rect x="64.9619%" y="1109" width="0.1260%" height="15" fill="rgb(254,216,34)"/><text x="65.2119%" y="1119.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.13%)</title><rect x="64.9619%" y="1093" width="0.1260%" height="15" fill="rgb(251,32,27)"/><text x="65.2119%" y="1103.50"></text></g><g><title>perf_pmu_enable.part.111 (20 samples, 0.13%)</title><rect x="64.9619%" y="1077" width="0.1260%" height="15" fill="rgb(208,127,28)"/><text x="65.2119%" y="1087.50"></text></g><g><title>x86_pmu_enable (20 samples, 0.13%)</title><rect x="64.9619%" y="1061" width="0.1260%" height="15" fill="rgb(224,137,22)"/><text x="65.2119%" y="1071.50"></text></g><g><title>intel_pmu_enable_all (20 samples, 0.13%)</title><rect x="64.9619%" y="1045" width="0.1260%" height="15" fill="rgb(254,70,32)"/><text x="65.2119%" y="1055.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (20 samples, 0.13%)</title><rect x="64.9619%" y="1029" width="0.1260%" height="15" fill="rgb(229,75,37)"/><text x="65.2119%" y="1039.50"></text></g><g><title>native_write_msr (20 samples, 0.13%)</title><rect x="64.9619%" y="1013" width="0.1260%" height="15" fill="rgb(252,64,23)"/><text x="65.2119%" y="1023.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait_timeout (21 samples, 0.13%)</title><rect x="64.9619%" y="1381" width="0.1323%" height="15" fill="rgb(232,162,48)"/><text x="65.2119%" y="1391.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_for (21 samples, 0.13%)</title><rect x="64.9619%" y="1365" width="0.1323%" height="15" fill="rgb(246,160,12)"/><text x="65.2119%" y="1375.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (21 samples, 0.13%)</title><rect x="64.9619%" y="1349" width="0.1323%" height="15" fill="rgb(247,166,0)"/><text x="65.2119%" y="1359.50"></text></g><g><title>parking_lot_core::parking_lot::park (21 samples, 0.13%)</title><rect x="64.9619%" y="1333" width="0.1323%" height="15" fill="rgb(249,219,21)"/><text x="65.2119%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (21 samples, 0.13%)</title><rect x="64.9619%" y="1317" width="0.1323%" height="15" fill="rgb(205,209,3)"/><text x="65.2119%" y="1327.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (21 samples, 0.13%)</title><rect x="64.9619%" y="1301" width="0.1323%" height="15" fill="rgb(243,44,1)"/><text x="65.2119%" y="1311.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park_until (21 samples, 0.13%)</title><rect x="64.9619%" y="1285" width="0.1323%" height="15" fill="rgb(206,159,16)"/><text x="65.2119%" y="1295.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (21 samples, 0.13%)</title><rect x="64.9619%" y="1269" width="0.1323%" height="15" fill="rgb(244,77,30)"/><text x="65.2119%" y="1279.50"></text></g><g><title>syscall (21 samples, 0.13%)</title><rect x="64.9619%" y="1253" width="0.1323%" height="15" fill="rgb(218,69,12)"/><text x="65.2119%" y="1263.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (21 samples, 0.13%)</title><rect x="64.9619%" y="1237" width="0.1323%" height="15" fill="rgb(212,87,7)"/><text x="65.2119%" y="1247.50"></text></g><g><title>do_syscall_64 (21 samples, 0.13%)</title><rect x="64.9619%" y="1221" width="0.1323%" height="15" fill="rgb(245,114,25)"/><text x="65.2119%" y="1231.50"></text></g><g><title>finish_task_switch (39 samples, 0.25%)</title><rect x="65.1068%" y="1093" width="0.2456%" height="15" fill="rgb(210,61,42)"/><text x="65.3568%" y="1103.50"></text></g><g><title>__perf_event_task_sched_in (39 samples, 0.25%)</title><rect x="65.1068%" y="1077" width="0.2456%" height="15" fill="rgb(211,52,33)"/><text x="65.3568%" y="1087.50"></text></g><g><title>perf_pmu_enable.part.111 (39 samples, 0.25%)</title><rect x="65.1068%" y="1061" width="0.2456%" height="15" fill="rgb(234,58,33)"/><text x="65.3568%" y="1071.50"></text></g><g><title>x86_pmu_enable (37 samples, 0.23%)</title><rect x="65.1194%" y="1045" width="0.2330%" height="15" fill="rgb(220,115,36)"/><text x="65.3694%" y="1055.50"></text></g><g><title>intel_pmu_enable_all (37 samples, 0.23%)</title><rect x="65.1194%" y="1029" width="0.2330%" height="15" fill="rgb(243,153,54)"/><text x="65.3694%" y="1039.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (37 samples, 0.23%)</title><rect x="65.1194%" y="1013" width="0.2330%" height="15" fill="rgb(251,47,18)"/><text x="65.3694%" y="1023.50"></text></g><g><title>native_write_msr (36 samples, 0.23%)</title><rect x="65.1257%" y="997" width="0.2267%" height="15" fill="rgb(242,102,42)"/><text x="65.3757%" y="1007.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (42 samples, 0.26%)</title><rect x="65.0942%" y="1381" width="0.2645%" height="15" fill="rgb(234,31,38)"/><text x="65.3442%" y="1391.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (42 samples, 0.26%)</title><rect x="65.0942%" y="1365" width="0.2645%" height="15" fill="rgb(221,117,51)"/><text x="65.3442%" y="1375.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (42 samples, 0.26%)</title><rect x="65.0942%" y="1349" width="0.2645%" height="15" fill="rgb(212,20,18)"/><text x="65.3442%" y="1359.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (42 samples, 0.26%)</title><rect x="65.0942%" y="1333" width="0.2645%" height="15" fill="rgb(245,133,36)"/><text x="65.3442%" y="1343.50"></text></g><g><title>parking_lot_core::parking_lot::park (40 samples, 0.25%)</title><rect x="65.1068%" y="1317" width="0.2519%" height="15" fill="rgb(212,6,19)"/><text x="65.3568%" y="1327.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (40 samples, 0.25%)</title><rect x="65.1068%" y="1301" width="0.2519%" height="15" fill="rgb(218,1,36)"/><text x="65.3568%" y="1311.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (40 samples, 0.25%)</title><rect x="65.1068%" y="1285" width="0.2519%" height="15" fill="rgb(246,84,54)"/><text x="65.3568%" y="1295.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (40 samples, 0.25%)</title><rect x="65.1068%" y="1269" width="0.2519%" height="15" fill="rgb(242,110,6)"/><text x="65.3568%" y="1279.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (40 samples, 0.25%)</title><rect x="65.1068%" y="1253" width="0.2519%" height="15" fill="rgb(214,47,5)"/><text x="65.3568%" y="1263.50"></text></g><g><title>syscall (40 samples, 0.25%)</title><rect x="65.1068%" y="1237" width="0.2519%" height="15" fill="rgb(218,159,25)"/><text x="65.3568%" y="1247.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (40 samples, 0.25%)</title><rect x="65.1068%" y="1221" width="0.2519%" height="15" fill="rgb(215,211,28)"/><text x="65.3568%" y="1231.50"></text></g><g><title>do_syscall_64 (40 samples, 0.25%)</title><rect x="65.1068%" y="1205" width="0.2519%" height="15" fill="rgb(238,59,32)"/><text x="65.3568%" y="1215.50"></text></g><g><title>__x64_sys_futex (40 samples, 0.25%)</title><rect x="65.1068%" y="1189" width="0.2519%" height="15" fill="rgb(226,82,3)"/><text x="65.3568%" y="1199.50"></text></g><g><title>do_futex (40 samples, 0.25%)</title><rect x="65.1068%" y="1173" width="0.2519%" height="15" fill="rgb(240,164,32)"/><text x="65.3568%" y="1183.50"></text></g><g><title>futex_wait (40 samples, 0.25%)</title><rect x="65.1068%" y="1157" width="0.2519%" height="15" fill="rgb(232,46,7)"/><text x="65.3568%" y="1167.50"></text></g><g><title>futex_wait_queue_me (40 samples, 0.25%)</title><rect x="65.1068%" y="1141" width="0.2519%" height="15" fill="rgb(229,129,53)"/><text x="65.3568%" y="1151.50"></text></g><g><title>schedule (40 samples, 0.25%)</title><rect x="65.1068%" y="1125" width="0.2519%" height="15" fill="rgb(234,188,29)"/><text x="65.3568%" y="1135.50"></text></g><g><title>__schedule (40 samples, 0.25%)</title><rect x="65.1068%" y="1109" width="0.2519%" height="15" fill="rgb(246,141,4)"/><text x="65.3568%" y="1119.50"></text></g><g><title>entry_SYSCALL_64 (59 samples, 0.37%)</title><rect x="65.7177%" y="1013" width="0.3716%" height="15" fill="rgb(229,23,39)"/><text x="65.9677%" y="1023.50"></text></g><g><title>_raw_spin_lock (24 samples, 0.15%)</title><rect x="66.4420%" y="949" width="0.1512%" height="15" fill="rgb(206,12,3)"/><text x="66.6920%" y="959.50"></text></g><g><title>_raw_spin_lock (55 samples, 0.35%)</title><rect x="67.2041%" y="917" width="0.3464%" height="15" fill="rgb(252,226,20)"/><text x="67.4541%" y="927.50"></text></g><g><title>pick_next_entity (19 samples, 0.12%)</title><rect x="67.9410%" y="901" width="0.1197%" height="15" fill="rgb(216,123,35)"/><text x="68.1910%" y="911.50"></text></g><g><title>__calc_delta (30 samples, 0.19%)</title><rect x="68.3127%" y="885" width="0.1890%" height="15" fill="rgb(212,68,40)"/><text x="68.5627%" y="895.50"></text></g><g><title>__cgroup_account_cputime (26 samples, 0.16%)</title><rect x="68.5016%" y="885" width="0.1638%" height="15" fill="rgb(254,125,32)"/><text x="68.7516%" y="895.50"></text></g><g><title>cgroup_rstat_updated (24 samples, 0.15%)</title><rect x="68.5142%" y="869" width="0.1512%" height="15" fill="rgb(253,97,22)"/><text x="68.7642%" y="879.50"></text></g><g><title>cpuacct_charge (32 samples, 0.20%)</title><rect x="68.6906%" y="885" width="0.2015%" height="15" fill="rgb(241,101,14)"/><text x="68.9406%" y="895.50"></text></g><g><title>update_curr (143 samples, 0.90%)</title><rect x="68.0670%" y="901" width="0.9007%" height="15" fill="rgb(238,103,29)"/><text x="68.3170%" y="911.50"></text></g><g><title>pick_next_task_fair (217 samples, 1.37%)</title><rect x="67.6135%" y="917" width="1.3668%" height="15" fill="rgb(233,195,47)"/><text x="67.8635%" y="927.50"></text></g><g><title>__schedule (437 samples, 2.75%)</title><rect x="66.6310%" y="933" width="2.7524%" height="15" fill="rgb(246,218,30)"/><text x="66.8810%" y="943.50">__..</text></g><g><title>update_rq_clock (53 samples, 0.33%)</title><rect x="69.0496%" y="917" width="0.3338%" height="15" fill="rgb(219,145,47)"/><text x="69.2996%" y="927.50"></text></g><g><title>sched_clock_cpu (39 samples, 0.25%)</title><rect x="69.1377%" y="901" width="0.2456%" height="15" fill="rgb(243,12,26)"/><text x="69.3877%" y="911.50"></text></g><g><title>sched_clock (33 samples, 0.21%)</title><rect x="69.1755%" y="885" width="0.2078%" height="15" fill="rgb(214,87,16)"/><text x="69.4255%" y="895.50"></text></g><g><title>native_sched_clock (33 samples, 0.21%)</title><rect x="69.1755%" y="869" width="0.2078%" height="15" fill="rgb(208,99,42)"/><text x="69.4255%" y="879.50"></text></g><g><title>schedule (462 samples, 2.91%)</title><rect x="66.5932%" y="949" width="2.9099%" height="15" fill="rgb(253,99,2)"/><text x="66.8432%" y="959.50">sc..</text></g><g><title>do_sched_yield (512 samples, 3.22%)</title><rect x="66.3475%" y="965" width="3.2248%" height="15" fill="rgb(220,168,23)"/><text x="66.5975%" y="975.50">do_..</text></g><g><title>__x64_sys_sched_yield (536 samples, 3.38%)</title><rect x="66.3161%" y="981" width="3.3760%" height="15" fill="rgb(242,38,24)"/><text x="66.5661%" y="991.50">__x..</text></g><g><title>yield_task_fair (19 samples, 0.12%)</title><rect x="69.5723%" y="965" width="0.1197%" height="15" fill="rgb(225,182,9)"/><text x="69.8223%" y="975.50"></text></g><g><title>do_syscall_64 (556 samples, 3.50%)</title><rect x="66.2279%" y="997" width="3.5019%" height="15" fill="rgb(243,178,37)"/><text x="66.4779%" y="1007.50">do_..</text></g><g><title>entry_SYSCALL_64_after_hwframe (582 samples, 3.67%)</title><rect x="66.0893%" y="1013" width="3.6657%" height="15" fill="rgb(232,139,19)"/><text x="66.3393%" y="1023.50">entr..</text></g><g><title>__GI___sched_yield (684 samples, 4.31%)</title><rect x="65.4973%" y="1029" width="4.3081%" height="15" fill="rgb(225,201,24)"/><text x="65.7473%" y="1039.50">__GI_..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (32 samples, 0.20%)</title><rect x="69.8684%" y="1029" width="0.2015%" height="15" fill="rgb(221,47,46)"/><text x="70.1184%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (32 samples, 0.20%)</title><rect x="69.8684%" y="1013" width="0.2015%" height="15" fill="rgb(249,23,13)"/><text x="70.1184%" y="1023.50"></text></g><g><title>dequeue_task (22 samples, 0.14%)</title><rect x="70.2463%" y="725" width="0.1386%" height="15" fill="rgb(219,9,5)"/><text x="70.4963%" y="735.50"></text></g><g><title>deactivate_task (23 samples, 0.14%)</title><rect x="70.2463%" y="741" width="0.1449%" height="15" fill="rgb(254,171,16)"/><text x="70.4963%" y="751.50"></text></g><g><title>finish_task_switch (59 samples, 0.37%)</title><rect x="70.3911%" y="741" width="0.3716%" height="15" fill="rgb(230,171,20)"/><text x="70.6411%" y="751.50"></text></g><g><title>__perf_event_task_sched_in (55 samples, 0.35%)</title><rect x="70.4163%" y="725" width="0.3464%" height="15" fill="rgb(210,71,41)"/><text x="70.6663%" y="735.50"></text></g><g><title>perf_pmu_enable.part.111 (55 samples, 0.35%)</title><rect x="70.4163%" y="709" width="0.3464%" height="15" fill="rgb(206,173,20)"/><text x="70.6663%" y="719.50"></text></g><g><title>x86_pmu_enable (55 samples, 0.35%)</title><rect x="70.4163%" y="693" width="0.3464%" height="15" fill="rgb(233,88,34)"/><text x="70.6663%" y="703.50"></text></g><g><title>intel_pmu_enable_all (55 samples, 0.35%)</title><rect x="70.4163%" y="677" width="0.3464%" height="15" fill="rgb(223,209,46)"/><text x="70.6663%" y="687.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (55 samples, 0.35%)</title><rect x="70.4163%" y="661" width="0.3464%" height="15" fill="rgb(250,43,18)"/><text x="70.6663%" y="671.50"></text></g><g><title>native_write_msr (55 samples, 0.35%)</title><rect x="70.4163%" y="645" width="0.3464%" height="15" fill="rgb(208,13,10)"/><text x="70.6663%" y="655.50"></text></g><g><title>__schedule (92 samples, 0.58%)</title><rect x="70.2022%" y="757" width="0.5795%" height="15" fill="rgb(212,200,36)"/><text x="70.4522%" y="767.50"></text></g><g><title>futex_wait_queue_me (95 samples, 0.60%)</title><rect x="70.1896%" y="789" width="0.5983%" height="15" fill="rgb(225,90,30)"/><text x="70.4396%" y="799.50"></text></g><g><title>schedule (94 samples, 0.59%)</title><rect x="70.1959%" y="773" width="0.5921%" height="15" fill="rgb(236,182,39)"/><text x="70.4459%" y="783.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (110 samples, 0.69%)</title><rect x="70.1014%" y="917" width="0.6928%" height="15" fill="rgb(212,144,35)"/><text x="70.3514%" y="927.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (102 samples, 0.64%)</title><rect x="70.1518%" y="901" width="0.6424%" height="15" fill="rgb(228,63,44)"/><text x="70.4018%" y="911.50"></text></g><g><title>syscall (102 samples, 0.64%)</title><rect x="70.1518%" y="885" width="0.6424%" height="15" fill="rgb(228,109,6)"/><text x="70.4018%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (101 samples, 0.64%)</title><rect x="70.1581%" y="869" width="0.6361%" height="15" fill="rgb(238,117,24)"/><text x="70.4081%" y="879.50"></text></g><g><title>do_syscall_64 (100 samples, 0.63%)</title><rect x="70.1644%" y="853" width="0.6298%" height="15" fill="rgb(242,26,26)"/><text x="70.4144%" y="863.50"></text></g><g><title>__x64_sys_futex (100 samples, 0.63%)</title><rect x="70.1644%" y="837" width="0.6298%" height="15" fill="rgb(221,92,48)"/><text x="70.4144%" y="847.50"></text></g><g><title>do_futex (100 samples, 0.63%)</title><rect x="70.1644%" y="821" width="0.6298%" height="15" fill="rgb(209,209,32)"/><text x="70.4144%" y="831.50"></text></g><g><title>futex_wait (99 samples, 0.62%)</title><rect x="70.1707%" y="805" width="0.6235%" height="15" fill="rgb(221,70,22)"/><text x="70.4207%" y="815.50"></text></g><g><title>tokio::runtime::park::Inner::park_condvar (117 samples, 0.74%)</title><rect x="70.0825%" y="1029" width="0.7369%" height="15" fill="rgb(248,145,5)"/><text x="70.3325%" y="1039.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (116 samples, 0.73%)</title><rect x="70.0888%" y="1013" width="0.7306%" height="15" fill="rgb(226,116,26)"/><text x="70.3388%" y="1023.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (116 samples, 0.73%)</title><rect x="70.0888%" y="997" width="0.7306%" height="15" fill="rgb(244,5,17)"/><text x="70.3388%" y="1007.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (115 samples, 0.72%)</title><rect x="70.0951%" y="981" width="0.7243%" height="15" fill="rgb(252,159,33)"/><text x="70.3451%" y="991.50"></text></g><g><title>parking_lot_core::parking_lot::park (114 samples, 0.72%)</title><rect x="70.1014%" y="965" width="0.7180%" height="15" fill="rgb(206,71,0)"/><text x="70.3514%" y="975.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (114 samples, 0.72%)</title><rect x="70.1014%" y="949" width="0.7180%" height="15" fill="rgb(233,118,54)"/><text x="70.3514%" y="959.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (114 samples, 0.72%)</title><rect x="70.1014%" y="933" width="0.7180%" height="15" fill="rgb(234,83,48)"/><text x="70.3514%" y="943.50"></text></g><g><title>__libc_disable_asynccancel (18 samples, 0.11%)</title><rect x="71.3863%" y="821" width="0.1134%" height="15" fill="rgb(228,3,54)"/><text x="71.6363%" y="831.50"></text></g><g><title>__fdget (23 samples, 0.14%)</title><rect x="71.9405%" y="757" width="0.1449%" height="15" fill="rgb(226,155,13)"/><text x="72.1905%" y="767.50"></text></g><g><title>__fget_light (23 samples, 0.14%)</title><rect x="71.9405%" y="741" width="0.1449%" height="15" fill="rgb(241,28,37)"/><text x="72.1905%" y="751.50"></text></g><g><title>__fget (20 samples, 0.13%)</title><rect x="71.9594%" y="725" width="0.1260%" height="15" fill="rgb(233,93,10)"/><text x="72.2094%" y="735.50"></text></g><g><title>tcp_poll (57 samples, 0.36%)</title><rect x="74.0757%" y="677" width="0.3590%" height="15" fill="rgb(225,113,19)"/><text x="74.3257%" y="687.50"></text></g><g><title>ep_item_poll.isra.20 (222 samples, 1.40%)</title><rect x="73.1058%" y="709" width="1.3982%" height="15" fill="rgb(241,2,18)"/><text x="73.3558%" y="719.50"></text></g><g><title>sock_poll (140 samples, 0.88%)</title><rect x="73.6222%" y="693" width="0.8818%" height="15" fill="rgb(228,207,21)"/><text x="73.8722%" y="703.50"></text></g><g><title>ep_send_events_proc (276 samples, 1.74%)</title><rect x="72.8223%" y="725" width="1.7384%" height="15" fill="rgb(213,211,35)"/><text x="73.0723%" y="735.50"></text></g><g><title>mutex_lock (29 samples, 0.18%)</title><rect x="74.5607%" y="725" width="0.1827%" height="15" fill="rgb(209,83,10)"/><text x="74.8107%" y="735.50"></text></g><g><title>ep_scan_ready_list.constprop.24 (333 samples, 2.10%)</title><rect x="72.6712%" y="741" width="2.0974%" height="15" fill="rgb(209,164,1)"/><text x="72.9212%" y="751.50">e..</text></g><g><title>_raw_spin_lock (22 samples, 0.14%)</title><rect x="75.1212%" y="661" width="0.1386%" height="15" fill="rgb(213,184,43)"/><text x="75.3712%" y="671.50"></text></g><g><title>ctx_sched_out (31 samples, 0.20%)</title><rect x="75.2598%" y="645" width="0.1953%" height="15" fill="rgb(231,61,34)"/><text x="75.5098%" y="655.50"></text></g><g><title>__perf_event_task_sched_out (61 samples, 0.38%)</title><rect x="75.0835%" y="677" width="0.3842%" height="15" fill="rgb(235,75,3)"/><text x="75.3335%" y="687.50"></text></g><g><title>task_ctx_sched_out (33 samples, 0.21%)</title><rect x="75.2598%" y="661" width="0.2078%" height="15" fill="rgb(220,106,47)"/><text x="75.5098%" y="671.50"></text></g><g><title>update_cfs_group (47 samples, 0.30%)</title><rect x="75.9778%" y="613" width="0.2960%" height="15" fill="rgb(210,196,33)"/><text x="76.2278%" y="623.50"></text></g><g><title>reweight_entity (23 samples, 0.14%)</title><rect x="76.1290%" y="597" width="0.1449%" height="15" fill="rgb(229,154,42)"/><text x="76.3790%" y="607.50"></text></g><g><title>update_curr (49 samples, 0.31%)</title><rect x="76.2739%" y="613" width="0.3086%" height="15" fill="rgb(228,114,26)"/><text x="76.5239%" y="623.50"></text></g><g><title>update_min_vruntime (20 samples, 0.13%)</title><rect x="76.4565%" y="597" width="0.1260%" height="15" fill="rgb(208,144,1)"/><text x="76.7065%" y="607.50"></text></g><g><title>update_load_avg (39 samples, 0.25%)</title><rect x="76.5825%" y="613" width="0.2456%" height="15" fill="rgb(239,112,37)"/><text x="76.8325%" y="623.50"></text></g><g><title>__update_load_avg_se (17 samples, 0.11%)</title><rect x="76.7210%" y="597" width="0.1071%" height="15" fill="rgb(210,96,50)"/><text x="76.9710%" y="607.50"></text></g><g><title>dequeue_entity (182 samples, 1.15%)</title><rect x="75.6881%" y="629" width="1.1463%" height="15" fill="rgb(222,178,2)"/><text x="75.9381%" y="639.50"></text></g><g><title>dequeue_task_fair (204 samples, 1.28%)</title><rect x="75.5747%" y="645" width="1.2849%" height="15" fill="rgb(226,74,18)"/><text x="75.8247%" y="655.50"></text></g><g><title>psi_task_change (348 samples, 2.19%)</title><rect x="76.8596%" y="645" width="2.1918%" height="15" fill="rgb(225,67,54)"/><text x="77.1096%" y="655.50">p..</text></g><g><title>record_times (40 samples, 0.25%)</title><rect x="78.7995%" y="629" width="0.2519%" height="15" fill="rgb(251,92,32)"/><text x="79.0495%" y="639.50"></text></g><g><title>sched_clock_cpu (31 samples, 0.20%)</title><rect x="78.8562%" y="613" width="0.1953%" height="15" fill="rgb(228,149,22)"/><text x="79.1062%" y="623.50"></text></g><g><title>sched_clock (21 samples, 0.13%)</title><rect x="78.9192%" y="597" width="0.1323%" height="15" fill="rgb(243,54,13)"/><text x="79.1692%" y="607.50"></text></g><g><title>native_sched_clock (19 samples, 0.12%)</title><rect x="78.9318%" y="581" width="0.1197%" height="15" fill="rgb(243,180,28)"/><text x="79.1818%" y="591.50"></text></g><g><title>dequeue_task (559 samples, 3.52%)</title><rect x="75.5369%" y="661" width="3.5208%" height="15" fill="rgb(208,167,24)"/><text x="75.7869%" y="671.50">deq..</text></g><g><title>deactivate_task (562 samples, 3.54%)</title><rect x="75.5369%" y="677" width="3.5397%" height="15" fill="rgb(245,73,45)"/><text x="75.7869%" y="687.50">dea..</text></g><g><title>__intel_pmu_enable_all.constprop.31 (104 samples, 0.66%)</title><rect x="79.4923%" y="597" width="0.6550%" height="15" fill="rgb(237,203,48)"/><text x="79.7423%" y="607.50"></text></g><g><title>native_write_msr (102 samples, 0.64%)</title><rect x="79.5049%" y="581" width="0.6424%" height="15" fill="rgb(211,197,16)"/><text x="79.7549%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (119 samples, 0.75%)</title><rect x="79.4357%" y="661" width="0.7495%" height="15" fill="rgb(243,99,51)"/><text x="79.6857%" y="671.50"></text></g><g><title>perf_pmu_enable.part.111 (113 samples, 0.71%)</title><rect x="79.4735%" y="645" width="0.7117%" height="15" fill="rgb(215,123,29)"/><text x="79.7235%" y="655.50"></text></g><g><title>x86_pmu_enable (112 samples, 0.71%)</title><rect x="79.4798%" y="629" width="0.7054%" height="15" fill="rgb(239,186,37)"/><text x="79.7298%" y="639.50"></text></g><g><title>intel_pmu_enable_all (110 samples, 0.69%)</title><rect x="79.4923%" y="613" width="0.6928%" height="15" fill="rgb(252,136,39)"/><text x="79.7423%" y="623.50"></text></g><g><title>finish_task_switch (177 samples, 1.11%)</title><rect x="79.0767%" y="677" width="1.1148%" height="15" fill="rgb(223,213,32)"/><text x="79.3267%" y="687.50"></text></g><g><title>pick_next_task_fair (46 samples, 0.29%)</title><rect x="80.1915%" y="677" width="0.2897%" height="15" fill="rgb(233,115,5)"/><text x="80.4415%" y="687.50"></text></g><g><title>newidle_balance (33 samples, 0.21%)</title><rect x="80.2734%" y="661" width="0.2078%" height="15" fill="rgb(207,226,44)"/><text x="80.5234%" y="671.50"></text></g><g><title>__schedule (920 samples, 5.79%)</title><rect x="74.8882%" y="693" width="5.7945%" height="15" fill="rgb(208,126,0)"/><text x="75.1382%" y="703.50">__sched..</text></g><g><title>ep_poll (1,374 samples, 8.65%)</title><rect x="72.0917%" y="757" width="8.6540%" height="15" fill="rgb(244,66,21)"/><text x="72.3417%" y="767.50">ep_poll</text></g><g><title>schedule_hrtimeout_range (946 samples, 5.96%)</title><rect x="74.7874%" y="741" width="5.9583%" height="15" fill="rgb(222,97,12)"/><text x="75.0374%" y="751.50">schedule..</text></g><g><title>schedule_hrtimeout_range_clock (946 samples, 5.96%)</title><rect x="74.7874%" y="725" width="5.9583%" height="15" fill="rgb(219,213,19)"/><text x="75.0374%" y="735.50">schedule..</text></g><g><title>schedule (941 samples, 5.93%)</title><rect x="74.8189%" y="709" width="5.9268%" height="15" fill="rgb(252,169,30)"/><text x="75.0689%" y="719.50">schedule</text></g><g><title>fput (28 samples, 0.18%)</title><rect x="80.7457%" y="757" width="0.1764%" height="15" fill="rgb(206,32,51)"/><text x="80.9957%" y="767.50"></text></g><g><title>fput_many (28 samples, 0.18%)</title><rect x="80.7457%" y="741" width="0.1764%" height="15" fill="rgb(250,172,42)"/><text x="80.9957%" y="751.50"></text></g><g><title>do_epoll_wait (1,436 samples, 9.04%)</title><rect x="71.9028%" y="773" width="9.0445%" height="15" fill="rgb(209,34,43)"/><text x="72.1528%" y="783.50">do_epoll_wait</text></g><g><title>__x64_sys_epoll_wait (1,442 samples, 9.08%)</title><rect x="71.8902%" y="789" width="9.0823%" height="15" fill="rgb(223,11,35)"/><text x="72.1402%" y="799.50">__x64_sys_epo..</text></g><g><title>do_syscall_64 (1,477 samples, 9.30%)</title><rect x="71.7894%" y="805" width="9.3028%" height="15" fill="rgb(251,219,26)"/><text x="72.0394%" y="815.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64_after_hwframe (1,507 samples, 9.49%)</title><rect x="71.6382%" y="821" width="9.4917%" height="15" fill="rgb(231,119,3)"/><text x="71.8882%" y="831.50">entry_SYSCALL_..</text></g><g><title>mio::poll::Poll::poll (1,592 samples, 10.03%)</title><rect x="71.1658%" y="869" width="10.0271%" height="15" fill="rgb(216,97,11)"/><text x="71.4158%" y="879.50">mio::poll::Pol..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1,592 samples, 10.03%)</title><rect x="71.1658%" y="853" width="10.0271%" height="15" fill="rgb(223,59,9)"/><text x="71.4158%" y="863.50">mio::sys::unix..</text></g><g><title>epoll_wait (1,576 samples, 9.93%)</title><rect x="71.2666%" y="837" width="9.9263%" height="15" fill="rgb(233,93,31)"/><text x="71.5166%" y="847.50">epoll_wait</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (54 samples, 0.34%)</title><rect x="81.2118%" y="837" width="0.3401%" height="15" fill="rgb(239,81,33)"/><text x="81.4618%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.34%)</title><rect x="81.2118%" y="821" width="0.3401%" height="15" fill="rgb(213,120,34)"/><text x="81.4618%" y="831.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::set_readiness (64 samples, 0.40%)</title><rect x="81.2118%" y="853" width="0.4031%" height="15" fill="rgb(243,49,53)"/><text x="81.4618%" y="863.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake (69 samples, 0.43%)</title><rect x="81.6149%" y="853" width="0.4346%" height="15" fill="rgb(247,216,33)"/><text x="81.8649%" y="863.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::wake0 (69 samples, 0.43%)</title><rect x="81.6149%" y="837" width="0.4346%" height="15" fill="rgb(226,26,14)"/><text x="81.8649%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (21 samples, 0.13%)</title><rect x="81.9172%" y="821" width="0.1323%" height="15" fill="rgb(215,49,53)"/><text x="82.1672%" y="831.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (21 samples, 0.13%)</title><rect x="81.9172%" y="805" width="0.1323%" height="15" fill="rgb(245,162,40)"/><text x="82.1672%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (21 samples, 0.13%)</title><rect x="81.9172%" y="789" width="0.1323%" height="15" fill="rgb(229,68,17)"/><text x="82.1672%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (21 samples, 0.13%)</title><rect x="81.9172%" y="773" width="0.1323%" height="15" fill="rgb(213,182,10)"/><text x="82.1672%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (21 samples, 0.13%)</title><rect x="81.9172%" y="757" width="0.1323%" height="15" fill="rgb(245,125,30)"/><text x="82.1672%" y="767.50"></text></g><g><title>tokio::io::driver::Driver::dispatch (148 samples, 0.93%)</title><rect x="81.1929%" y="869" width="0.9322%" height="15" fill="rgb(232,202,2)"/><text x="81.4429%" y="879.50"></text></g><g><title>&lt;tokio::io::driver::Driver as tokio::park::Park&gt;::park (1,786 samples, 11.25%)</title><rect x="70.9202%" y="901" width="11.2490%" height="15" fill="rgb(237,140,51)"/><text x="71.1702%" y="911.50">&lt;tokio::io::drive..</text></g><g><title>tokio::io::driver::Driver::turn (1,783 samples, 11.23%)</title><rect x="70.9391%" y="885" width="11.2301%" height="15" fill="rgb(236,157,25)"/><text x="71.1891%" y="895.50">tokio::io::driver..</text></g><g><title>&lt;tokio::signal::unix::driver::Driver as tokio::park::Park&gt;::park (1,817 samples, 11.44%)</title><rect x="70.9202%" y="917" width="11.4442%" height="15" fill="rgb(219,209,0)"/><text x="71.1702%" y="927.50">&lt;tokio::signal::u..</text></g><g><title>tokio::signal::unix::driver::Driver::process (31 samples, 0.20%)</title><rect x="82.1692%" y="901" width="0.1953%" height="15" fill="rgb(240,116,54)"/><text x="82.4192%" y="911.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_ready (25 samples, 0.16%)</title><rect x="82.2070%" y="885" width="0.1575%" height="15" fill="rgb(216,10,36)"/><text x="82.4570%" y="895.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_ready (25 samples, 0.16%)</title><rect x="82.2070%" y="869" width="0.1575%" height="15" fill="rgb(222,72,44)"/><text x="82.4570%" y="879.50"></text></g><g><title>tokio::io::driver::scheduled_io::ScheduledIo::poll_readiness (22 samples, 0.14%)</title><rect x="82.2259%" y="853" width="0.1386%" height="15" fill="rgb(232,159,9)"/><text x="82.4759%" y="863.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1,820 samples, 11.46%)</title><rect x="70.9202%" y="949" width="11.4631%" height="15" fill="rgb(210,39,32)"/><text x="71.1702%" y="959.50">&lt;tokio::park::eit..</text></g><g><title>&lt;tokio::process::imp::driver::Driver as tokio::park::Park&gt;::park (1,820 samples, 11.46%)</title><rect x="70.9202%" y="933" width="11.4631%" height="15" fill="rgb(216,194,45)"/><text x="71.1702%" y="943.50">&lt;tokio::process::..</text></g><g><title>core::ptr::drop_in_place (45 samples, 0.28%)</title><rect x="82.6038%" y="917" width="0.2834%" height="15" fill="rgb(218,18,35)"/><text x="82.8538%" y="927.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.17%)</title><rect x="82.7171%" y="901" width="0.1701%" height="15" fill="rgb(207,83,51)"/><text x="82.9671%" y="911.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process_at_time (106 samples, 0.67%)</title><rect x="82.4274%" y="933" width="0.6676%" height="15" fill="rgb(225,63,43)"/><text x="82.6774%" y="943.50"></text></g><g><title>tokio::time::clock::Clock::now (34 samples, 0.21%)</title><rect x="83.0950%" y="917" width="0.2141%" height="15" fill="rgb(207,57,36)"/><text x="83.3450%" y="927.50"></text></g><g><title>tokio::time::clock::now (34 samples, 0.21%)</title><rect x="83.0950%" y="901" width="0.2141%" height="15" fill="rgb(216,99,33)"/><text x="83.3450%" y="911.50"></text></g><g><title>std::time::Instant::now (34 samples, 0.21%)</title><rect x="83.0950%" y="885" width="0.2141%" height="15" fill="rgb(225,42,16)"/><text x="83.3450%" y="895.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (34 samples, 0.21%)</title><rect x="83.0950%" y="869" width="0.2141%" height="15" fill="rgb(220,201,45)"/><text x="83.3450%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::now (34 samples, 0.21%)</title><rect x="83.0950%" y="853" width="0.2141%" height="15" fill="rgb(225,33,4)"/><text x="83.3450%" y="863.50"></text></g><g><title>__GI___clock_gettime (33 samples, 0.21%)</title><rect x="83.1013%" y="837" width="0.2078%" height="15" fill="rgb(224,33,50)"/><text x="83.3513%" y="847.50"></text></g><g><title>__vdso_clock_gettime (33 samples, 0.21%)</title><rect x="83.1013%" y="821" width="0.2078%" height="15" fill="rgb(246,198,51)"/><text x="83.3513%" y="831.50"></text></g><g><title>[[vdso]] (31 samples, 0.20%)</title><rect x="83.1139%" y="805" width="0.1953%" height="15" fill="rgb(205,22,4)"/><text x="83.3639%" y="815.50"></text></g><g><title>tokio::time::driver::&lt;impl tokio::time::driver::handle::Handle&gt;::process (150 samples, 0.94%)</title><rect x="82.4274%" y="949" width="0.9448%" height="15" fill="rgb(206,3,8)"/><text x="82.6774%" y="959.50"></text></g><g><title>tokio::time::driver::ClockTime::now (44 samples, 0.28%)</title><rect x="83.0950%" y="933" width="0.2771%" height="15" fill="rgb(251,23,15)"/><text x="83.3450%" y="943.50"></text></g><g><title>tokio::time::driver::handle::Handle::lock (16 samples, 0.10%)</title><rect x="83.3722%" y="949" width="0.1008%" height="15" fill="rgb(252,88,28)"/><text x="83.6222%" y="959.50"></text></g><g><title>&lt;tokio::time::driver::Driver&lt;P&gt; as tokio::park::Park&gt;::park (2,015 samples, 12.69%)</title><rect x="70.8194%" y="981" width="12.6913%" height="15" fill="rgb(212,127,14)"/><text x="71.0694%" y="991.50">&lt;tokio::time::drive..</text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (2,008 samples, 12.65%)</title><rect x="70.8635%" y="965" width="12.6472%" height="15" fill="rgb(247,145,37)"/><text x="71.1135%" y="975.50">tokio::time::driver..</text></g><g><title>&lt;tokio::runtime::driver::Driver as tokio::park::Park&gt;::park (2,038 samples, 12.84%)</title><rect x="70.8194%" y="1013" width="12.8362%" height="15" fill="rgb(209,117,53)"/><text x="71.0694%" y="1023.50">&lt;tokio::runtime::dr..</text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (2,038 samples, 12.84%)</title><rect x="70.8194%" y="997" width="12.8362%" height="15" fill="rgb(212,90,42)"/><text x="71.0694%" y="1007.50">&lt;tokio::park::eithe..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (23 samples, 0.14%)</title><rect x="83.5107%" y="981" width="0.1449%" height="15" fill="rgb(218,164,37)"/><text x="83.7607%" y="991.50"></text></g><g><title>tokio::runtime::park::Inner::park_driver (2,061 samples, 12.98%)</title><rect x="70.8194%" y="1029" width="12.9810%" height="15" fill="rgb(246,65,34)"/><text x="71.0694%" y="1039.50">tokio::runtime::park..</text></g><g><title>core::sync::atomic::AtomicUsize::swap (16 samples, 0.10%)</title><rect x="83.6997%" y="1013" width="0.1008%" height="15" fill="rgb(231,100,33)"/><text x="83.9497%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.10%)</title><rect x="83.6997%" y="997" width="0.1008%" height="15" fill="rgb(228,126,14)"/><text x="83.9497%" y="1007.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (2,916 samples, 18.37%)</title><rect x="65.4973%" y="1061" width="18.3662%" height="15" fill="rgb(215,173,21)"/><text x="65.7473%" y="1071.50">&lt;tokio::runtime::park::Parker..</text></g><g><title>tokio::runtime::park::Inner::park (2,916 samples, 18.37%)</title><rect x="65.4973%" y="1045" width="18.3662%" height="15" fill="rgb(210,6,40)"/><text x="65.7473%" y="1055.50">tokio::runtime::park::Inner::..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (2,929 samples, 18.45%)</title><rect x="65.4973%" y="1077" width="18.4481%" height="15" fill="rgb(212,48,18)"/><text x="65.7473%" y="1087.50">tokio::runtime::thread_pool::..</text></g><g><title>tokio::runtime::thread_pool::worker::Core::maintenance (32 samples, 0.20%)</title><rect x="83.9453%" y="1077" width="0.2015%" height="15" fill="rgb(230,214,11)"/><text x="84.1953%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::drain_pending_drop (22 samples, 0.14%)</title><rect x="84.0083%" y="1061" width="0.1386%" height="15" fill="rgb(254,105,39)"/><text x="84.2583%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::is_parked (23 samples, 0.14%)</title><rect x="84.1595%" y="1061" width="0.1449%" height="15" fill="rgb(245,158,5)"/><text x="84.4095%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_parked (28 samples, 0.18%)</title><rect x="84.1469%" y="1077" width="0.1764%" height="15" fill="rgb(249,208,11)"/><text x="84.3969%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park (3,015 samples, 18.99%)</title><rect x="65.3776%" y="1093" width="18.9897%" height="15" fill="rgb(210,39,28)"/><text x="65.6276%" y="1103.50">tokio::runtime::thread_pool::w..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::yield_now (17 samples, 0.11%)</title><rect x="84.3862%" y="917" width="0.1071%" height="15" fill="rgb(211,56,53)"/><text x="84.6362%" y="927.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (17 samples, 0.11%)</title><rect x="84.3862%" y="901" width="0.1071%" height="15" fill="rgb(226,201,30)"/><text x="84.6362%" y="911.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::yield_now::_{{closure}} (17 samples, 0.11%)</title><rect x="84.3862%" y="885" width="0.1071%" height="15" fill="rgb(239,101,34)"/><text x="84.6362%" y="895.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Worker&gt;&gt;::yield_now (17 samples, 0.11%)</title><rect x="84.3862%" y="869" width="0.1071%" height="15" fill="rgb(226,209,5)"/><text x="84.6362%" y="879.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule (17 samples, 0.11%)</title><rect x="84.3862%" y="853" width="0.1071%" height="15" fill="rgb(250,105,47)"/><text x="84.6362%" y="863.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (17 samples, 0.11%)</title><rect x="84.3862%" y="837" width="0.1071%" height="15" fill="rgb(230,72,3)"/><text x="84.6362%" y="847.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule::_{{closure}} (17 samples, 0.11%)</title><rect x="84.3862%" y="821" width="0.1071%" height="15" fill="rgb(232,218,39)"/><text x="84.6362%" y="831.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::schedule_local (17 samples, 0.11%)</title><rect x="84.3862%" y="805" width="0.1071%" height="15" fill="rgb(248,166,6)"/><text x="84.6362%" y="815.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (17 samples, 0.11%)</title><rect x="84.3862%" y="789" width="0.1071%" height="15" fill="rgb(247,89,20)"/><text x="84.6362%" y="799.50"></text></g><g><title>tokio::coop::budget (23 samples, 0.14%)</title><rect x="84.3673%" y="1077" width="0.1449%" height="15" fill="rgb(248,130,54)"/><text x="84.6173%" y="1087.50"></text></g><g><title>tokio::coop::with_budget (23 samples, 0.14%)</title><rect x="84.3673%" y="1061" width="0.1449%" height="15" fill="rgb(234,196,4)"/><text x="84.6173%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.14%)</title><rect x="84.3673%" y="1045" width="0.1449%" height="15" fill="rgb(250,143,31)"/><text x="84.6173%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.14%)</title><rect x="84.3673%" y="1029" width="0.1449%" height="15" fill="rgb(211,110,34)"/><text x="84.6173%" y="1039.50"></text></g><g><title>tokio::coop::with_budget::_{{closure}} (23 samples, 0.14%)</title><rect x="84.3673%" y="1013" width="0.1449%" height="15" fill="rgb(215,124,48)"/><text x="84.6173%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task::_{{closure}} (23 samples, 0.14%)</title><rect x="84.3673%" y="997" width="0.1449%" height="15" fill="rgb(216,46,13)"/><text x="84.6173%" y="1007.50"></text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (21 samples, 0.13%)</title><rect x="84.3799%" y="981" width="0.1323%" height="15" fill="rgb(205,184,25)"/><text x="84.6299%" y="991.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (21 samples, 0.13%)</title><rect x="84.3799%" y="965" width="0.1323%" height="15" fill="rgb(228,1,10)"/><text x="84.6299%" y="975.50"></text></g><g><title>tokio::runtime::task::raw::poll (21 samples, 0.13%)</title><rect x="84.3799%" y="949" width="0.1323%" height="15" fill="rgb(213,116,27)"/><text x="84.6299%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (21 samples, 0.13%)</title><rect x="84.3799%" y="933" width="0.1323%" height="15" fill="rgb(241,95,50)"/><text x="84.6299%" y="943.50"></text></g><g><title>ttwu_do_activate (17 samples, 0.11%)</title><rect x="84.7263%" y="853" width="0.1071%" height="15" fill="rgb(238,48,32)"/><text x="84.9763%" y="863.50"></text></g><g><title>activate_task (17 samples, 0.11%)</title><rect x="84.7263%" y="837" width="0.1071%" height="15" fill="rgb(235,113,49)"/><text x="84.9763%" y="847.50"></text></g><g><title>enqueue_task (17 samples, 0.11%)</title><rect x="84.7263%" y="821" width="0.1071%" height="15" fill="rgb(205,127,43)"/><text x="84.9763%" y="831.50"></text></g><g><title>futex_wake (39 samples, 0.25%)</title><rect x="84.6004%" y="901" width="0.2456%" height="15" fill="rgb(250,162,2)"/><text x="84.8504%" y="911.50"></text></g><g><title>wake_up_q (33 samples, 0.21%)</title><rect x="84.6382%" y="885" width="0.2078%" height="15" fill="rgb(220,13,41)"/><text x="84.8882%" y="895.50"></text></g><g><title>try_to_wake_up (30 samples, 0.19%)</title><rect x="84.6571%" y="869" width="0.1890%" height="15" fill="rgb(249,221,25)"/><text x="84.9071%" y="879.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (45 samples, 0.28%)</title><rect x="84.5752%" y="997" width="0.2834%" height="15" fill="rgb(215,208,19)"/><text x="84.8252%" y="1007.50"></text></g><g><title>syscall (45 samples, 0.28%)</title><rect x="84.5752%" y="981" width="0.2834%" height="15" fill="rgb(236,175,2)"/><text x="84.8252%" y="991.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (42 samples, 0.26%)</title><rect x="84.5941%" y="965" width="0.2645%" height="15" fill="rgb(241,52,2)"/><text x="84.8441%" y="975.50"></text></g><g><title>do_syscall_64 (41 samples, 0.26%)</title><rect x="84.6004%" y="949" width="0.2582%" height="15" fill="rgb(248,140,14)"/><text x="84.8504%" y="959.50"></text></g><g><title>__x64_sys_futex (41 samples, 0.26%)</title><rect x="84.6004%" y="933" width="0.2582%" height="15" fill="rgb(253,22,42)"/><text x="84.8504%" y="943.50"></text></g><g><title>do_futex (41 samples, 0.26%)</title><rect x="84.6004%" y="917" width="0.2582%" height="15" fill="rgb(234,61,47)"/><text x="84.8504%" y="927.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (53 samples, 0.33%)</title><rect x="84.5752%" y="1029" width="0.3338%" height="15" fill="rgb(208,226,15)"/><text x="84.8252%" y="1039.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (53 samples, 0.33%)</title><rect x="84.5752%" y="1013" width="0.3338%" height="15" fill="rgb(217,221,4)"/><text x="84.8252%" y="1023.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (87 samples, 0.55%)</title><rect x="84.3673%" y="1093" width="0.5480%" height="15" fill="rgb(212,174,34)"/><text x="84.6173%" y="1103.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Core::transition_from_searching (64 samples, 0.40%)</title><rect x="84.5122%" y="1077" width="0.4031%" height="15" fill="rgb(253,83,4)"/><text x="84.7622%" y="1087.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::transition_worker_from_searching (64 samples, 0.40%)</title><rect x="84.5122%" y="1061" width="0.4031%" height="15" fill="rgb(250,195,49)"/><text x="84.7622%" y="1071.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Shared::notify_parked (64 samples, 0.40%)</title><rect x="84.5122%" y="1045" width="0.4031%" height="15" fill="rgb(241,192,25)"/><text x="84.7622%" y="1055.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (3,120 samples, 19.65%)</title><rect x="65.3587%" y="1221" width="19.6511%" height="15" fill="rgb(208,124,10)"/><text x="65.6087%" y="1231.50">tokio::loom::std::unsafe_cell::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (3,120 samples, 19.65%)</title><rect x="65.3587%" y="1205" width="19.6511%" height="15" fill="rgb(222,33,0)"/><text x="65.6087%" y="1215.50">tokio::runtime::task::core::Cor..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,120 samples, 19.65%)</title><rect x="65.3587%" y="1189" width="19.6511%" height="15" fill="rgb(234,209,28)"/><text x="65.6087%" y="1199.50">&lt;tokio::runtime::blocking::task..</text></g><g><title>tokio::runtime::thread_pool::worker::Launch::launch::_{{closure}} (3,120 samples, 19.65%)</title><rect x="65.3587%" y="1173" width="19.6511%" height="15" fill="rgb(224,11,23)"/><text x="65.6087%" y="1183.50">tokio::runtime::thread_pool::wo..</text></g><g><title>tokio::runtime::thread_pool::worker::run (3,120 samples, 19.65%)</title><rect x="65.3587%" y="1157" width="19.6511%" height="15" fill="rgb(232,99,1)"/><text x="65.6087%" y="1167.50">tokio::runtime::thread_pool::wo..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3,119 samples, 19.64%)</title><rect x="65.3650%" y="1141" width="19.6448%" height="15" fill="rgb(237,95,45)"/><text x="65.6150%" y="1151.50">tokio::macros::scoped_tls::Scop..</text></g><g><title>tokio::runtime::thread_pool::worker::run::_{{closure}} (3,119 samples, 19.64%)</title><rect x="65.3650%" y="1125" width="19.6448%" height="15" fill="rgb(208,109,11)"/><text x="65.6150%" y="1135.50">tokio::runtime::thread_pool::wo..</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3,119 samples, 19.64%)</title><rect x="65.3650%" y="1109" width="19.6448%" height="15" fill="rgb(216,190,48)"/><text x="65.6150%" y="1119.50">tokio::runtime::thread_pool::wo..</text></g><g><title>std::panic::catch_unwind (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1509" width="20.0542%" height="15" fill="rgb(251,171,36)"/><text x="65.2119%" y="1519.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1493" width="20.0542%" height="15" fill="rgb(230,62,22)"/><text x="65.2119%" y="1503.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1477" width="20.0542%" height="15" fill="rgb(225,114,35)"/><text x="65.2119%" y="1487.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1461" width="20.0542%" height="15" fill="rgb(215,118,42)"/><text x="65.2119%" y="1471.50">&lt;std::panic::AssertUnwindSafe&lt;F..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1445" width="20.0542%" height="15" fill="rgb(243,119,21)"/><text x="65.2119%" y="1455.50">std::thread::Builder::spawn_unc..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1429" width="20.0542%" height="15" fill="rgb(252,177,53)"/><text x="65.2119%" y="1439.50">std::sys_common::backtrace::__r..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1413" width="20.0542%" height="15" fill="rgb(237,209,29)"/><text x="65.2119%" y="1423.50">tokio::runtime::blocking::pool:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3,184 samples, 20.05%)</title><rect x="64.9619%" y="1397" width="20.0542%" height="15" fill="rgb(212,65,23)"/><text x="65.2119%" y="1407.50">tokio::runtime::blocking::pool:..</text></g><g><title>tokio::runtime::task::Notified&lt;S&gt;::run (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1381" width="19.6574%" height="15" fill="rgb(230,222,46)"/><text x="65.6087%" y="1391.50">tokio::runtime::task::Notified&lt;..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1365" width="19.6574%" height="15" fill="rgb(215,135,32)"/><text x="65.6087%" y="1375.50">tokio::runtime::task::raw::RawT..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1349" width="19.6574%" height="15" fill="rgb(246,101,22)"/><text x="65.6087%" y="1359.50">tokio::runtime::task::harness::..</text></g><g><title>std::panic::catch_unwind (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1333" width="19.6574%" height="15" fill="rgb(206,107,13)"/><text x="65.6087%" y="1343.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1317" width="19.6574%" height="15" fill="rgb(250,100,44)"/><text x="65.6087%" y="1327.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1301" width="19.6574%" height="15" fill="rgb(231,147,38)"/><text x="65.6087%" y="1311.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1285" width="19.6574%" height="15" fill="rgb(229,8,40)"/><text x="65.6087%" y="1295.50">&lt;std::panic::AssertUnwindSafe&lt;F..</text></g><g><title>core::ops::function::FnOnce::call_once (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1269" width="19.6574%" height="15" fill="rgb(221,135,30)"/><text x="65.6087%" y="1279.50">core::ops::function::FnOnce::ca..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll::_{{closure}} (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1253" width="19.6574%" height="15" fill="rgb(249,193,18)"/><text x="65.6087%" y="1263.50">tokio::runtime::task::harness::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3,121 samples, 19.66%)</title><rect x="65.3587%" y="1237" width="19.6574%" height="15" fill="rgb(209,133,39)"/><text x="65.6087%" y="1247.50">tokio::runtime::task::core::Cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,194 samples, 20.12%)</title><rect x="64.9304%" y="1573" width="20.1172%" height="15" fill="rgb(232,100,14)"/><text x="65.1804%" y="1583.50">&lt;alloc::boxed::Box&lt;F&gt; as core::o..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,194 samples, 20.12%)</title><rect x="64.9304%" y="1557" width="20.1172%" height="15" fill="rgb(224,185,1)"/><text x="65.1804%" y="1567.50">&lt;alloc::boxed::Box&lt;F&gt; as core::o..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,194 samples, 20.12%)</title><rect x="64.9304%" y="1541" width="20.1172%" height="15" fill="rgb(223,139,8)"/><text x="65.1804%" y="1551.50">core::ops::function::FnOnce::cal..</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (3,194 samples, 20.12%)</title><rect x="64.9304%" y="1525" width="20.1172%" height="15" fill="rgb(232,213,38)"/><text x="65.1804%" y="1535.50">std::thread::Builder::spawn_unch..</text></g><g><title>__GI___clone (3,208 samples, 20.21%)</title><rect x="64.9052%" y="1621" width="20.2053%" height="15" fill="rgb(207,94,22)"/><text x="65.1552%" y="1631.50">__GI___clone</text></g><g><title>start_thread (3,208 samples, 20.21%)</title><rect x="64.9052%" y="1605" width="20.2053%" height="15" fill="rgb(219,183,54)"/><text x="65.1552%" y="1615.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,204 samples, 20.18%)</title><rect x="64.9304%" y="1589" width="20.1801%" height="15" fill="rgb(216,185,54)"/><text x="65.1804%" y="1599.50">std::sys::unix::thread::Thread::..</text></g><g><title>finish_task_switch (18 samples, 0.11%)</title><rect x="99.3891%" y="1525" width="0.1134%" height="15" fill="rgb(254,217,39)"/><text x="99.6391%" y="1535.50"></text></g><g><title>__perf_event_task_sched_in (16 samples, 0.10%)</title><rect x="99.4017%" y="1509" width="0.1008%" height="15" fill="rgb(240,178,23)"/><text x="99.6517%" y="1519.50"></text></g><g><title>perf_pmu_enable.part.111 (16 samples, 0.10%)</title><rect x="99.4017%" y="1493" width="0.1008%" height="15" fill="rgb(218,11,47)"/><text x="99.6517%" y="1503.50"></text></g><g><title>x86_pmu_enable (16 samples, 0.10%)</title><rect x="99.4017%" y="1477" width="0.1008%" height="15" fill="rgb(218,51,51)"/><text x="99.6517%" y="1487.50"></text></g><g><title>intel_pmu_enable_all (16 samples, 0.10%)</title><rect x="99.4017%" y="1461" width="0.1008%" height="15" fill="rgb(238,126,27)"/><text x="99.6517%" y="1471.50"></text></g><g><title>__intel_pmu_enable_all.constprop.31 (16 samples, 0.10%)</title><rect x="99.4017%" y="1445" width="0.1008%" height="15" fill="rgb(249,202,22)"/><text x="99.6517%" y="1455.50"></text></g><g><title>native_write_msr (16 samples, 0.10%)</title><rect x="99.4017%" y="1429" width="0.1008%" height="15" fill="rgb(254,195,49)"/><text x="99.6517%" y="1439.50"></text></g><g><title>exit_to_usermode_loop (19 samples, 0.12%)</title><rect x="99.3891%" y="1573" width="0.1197%" height="15" fill="rgb(208,123,14)"/><text x="99.6391%" y="1583.50"></text></g><g><title>schedule (19 samples, 0.12%)</title><rect x="99.3891%" y="1557" width="0.1197%" height="15" fill="rgb(224,200,8)"/><text x="99.6391%" y="1567.50"></text></g><g><title>__schedule (19 samples, 0.12%)</title><rect x="99.3891%" y="1541" width="0.1197%" height="15" fill="rgb(217,61,36)"/><text x="99.6391%" y="1551.50"></text></g><g><title>_aesni_ctr32_ghash_6x (2,286 samples, 14.40%)</title><rect x="85.1168%" y="1621" width="14.3982%" height="15" fill="rgb(206,35,45)"/><text x="85.3668%" y="1631.50">_aesni_ctr32_ghash_6x</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (20 samples, 0.13%)</title><rect x="99.3891%" y="1605" width="0.1260%" height="15" fill="rgb(217,65,33)"/><text x="99.6391%" y="1615.50"></text></g><g><title>prepare_exit_to_usermode (20 samples, 0.13%)</title><rect x="99.3891%" y="1589" width="0.1260%" height="15" fill="rgb(222,158,48)"/><text x="99.6391%" y="1599.50"></text></g><g><title>entry_SYSCALL_64 (27 samples, 0.17%)</title><rect x="99.5150%" y="1621" width="0.1701%" height="15" fill="rgb(254,2,54)"/><text x="99.7650%" y="1631.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (18 samples, 0.11%)</title><rect x="99.6851%" y="1621" width="0.1134%" height="15" fill="rgb(250,143,38)"/><text x="99.9351%" y="1631.50"></text></g><g><title>all (15,877 samples, 100%)</title><rect x="0.0000%" y="1653" width="100.0000%" height="15" fill="rgb(248,25,0)"/><text x="0.2500%" y="1663.50"></text></g><g><title>tokio-runtime-w (13,685 samples, 86.19%)</title><rect x="13.8061%" y="1637" width="86.1939%" height="15" fill="rgb(206,152,27)"/><text x="14.0561%" y="1647.50">tokio-runtime-w</text></g></svg></svg>